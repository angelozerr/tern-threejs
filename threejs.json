{
  "!name": "threejs",
  "THREE": {
    "Original": {
      "!name": "Original",
      "!url": "http://threejs.org/docs/#Reference/Original",
      "!doc": "todo",
      "prototype": {
        "!proto": "Geometry"
      }
    },
    "Camera": {
      "!name": "Camera",
      "!url": "http://threejs.org/docs/#Reference/cameras/Camera",
      "!doc": "Abstract base class for cameras. This class should always be inherited when you build a new camera.",
      "!type": "fn()",
      "prototype": {}
    },
    "CubeCamera": {
      "!name": "CubeCamera",
      "!url": "http://threejs.org/docs/#Reference/cameras/CubeCamera",
      "!doc": "Creates 6 cameras that render to a [page:WebGLRenderTargetCube].",
      "!type": "fn(near:number, far:number, cubeResolution:number)",
      "prototype": {
        "!proto": "Object3D"
      }
    },
    "OrthographicCamera": {
      "!name": "OrthographicCamera",
      "!url": "http://threejs.org/docs/#Reference/cameras/OrthographicCamera",
      "!doc": "Camera with orthographic projection.",
      "prototype": {
        "!proto": "Camera"
      }
    },
    "PerspectiveCamera": {
      "!name": "PerspectiveCamera",
      "!url": "http://threejs.org/docs/#Reference/cameras/PerspectiveCamera",
      "!doc": "Camera with perspective projection.",
      "!type": "fn(fov:Float, aspect:Float, near:Float, far:Float)",
      "prototype": {}
    },
    "CustomBlendingEquations": {
      "!name": "CustomBlendingEquations",
      "!url": "http://threejs.org/docs/#Reference/constants/CustomBlendingEquations",
      "prototype": {}
    },
    "GLState": {
      "!name": "GLState",
      "!url": "http://threejs.org/docs/#Reference/constants/GLState",
      "prototype": {}
    },
    "Materials": {
      "!name": "Materials",
      "!url": "http://threejs.org/docs/#Reference/constants/Materials",
      "prototype": {}
    },
    "ShadowingTypes": {
      "!name": "ShadowingTypes",
      "!url": "http://threejs.org/docs/#Reference/constants/ShadowingTypes",
      "prototype": {}
    },
    "Textures": {
      "!name": "Textures",
      "!url": "http://threejs.org/docs/#Reference/constants/Textures",
      "prototype": {}
    },
    "BufferAttribute": {
      "!name": "BufferAttribute",
      "!url": "http://threejs.org/docs/#Reference/core/BufferAttribute",
      "!doc": "This class stores data for an attribute associated with a [page:BufferGeometry]. See that page for details and a usage example. This class is used to store builtin attributes such as vertex position, normals, color, etc., but can also be used in your code to store custom attributes in a [page:BufferGeometry].",
      "!type": "fn(array:Array, itemSize:Integer)",
      "prototype": {
        "!proto": "BufferGeometry"
      }
    },
    "BufferGeometry": {
      "!name": "BufferGeometry",
      "!url": "http://threejs.org/docs/#Reference/core/BufferGeometry",
      "!doc": "<p>\n\t\tThis class is an efficient alternative to [page:Geometry], because it stores all data, including\n\t\tvertex positions, face indices, normals, colors, UVs, and custom attributes within buffers; this\n\t\treduces the cost of passing all this data to the GPU. \n\t\tThis also makes BufferGeometry harder to work with than [page:Geometry]; rather than accessing \n\t\tposition data as [page:Vector3] objects, color data as [page:Color] objects, and so on, you have to \n\t\taccess the raw data from the appropriate [page:BufferAttribute attribute] buffer. This makes \n\t\tBufferGeometry best-suited for static objects where you don't need to manipulate the geometry much\n\t\tafter instantiating it.\n\t\t</p>\n\n\t\t<h3>Example</h3>\n\t\t<code>\n\t\tvar geometry = new THREE.BufferGeometry();\n\t\t// create a simple square shape. We duplicate the top left and bottom right\n\t\t// vertices because each vertex needs to appear once per triangle. \n\t\tvar vertexPositions = [ \n\t\t\t[-1.0, -1.0,  1.0],\n\t\t\t[ 1.0, -1.0,  1.0],\n\t\t\t[ 1.0,  1.0,  1.0],\n\n\t\t\t[ 1.0,  1.0,  1.0],\n\t\t\t[-1.0,  1.0,  1.0],\n\t\t\t[-1.0, -1.0,  1.0]\n\t\t];\n\t\tvar vertices = new Float32Array( vertexPositions.length * 3 ); // three components per vertex\n\n\t\t// components of the position vector for each vertex are stored\n\t\t// contiguously in the buffer.\n\t\tfor ( var i = 0; i &lt; vertexPositions.length; i++ )\n\t\t{\n\t\t\tvertices[ i*3 + 0 ] = vertexPositions[i][0];\n\t\t\tvertices[ i*3 + 1 ] = vertexPositions[i][1];\n\t\t\tvertices[ i*3 + 2 ] = vertexPositions[i][2];\n\t\t}\n\n\t\t// itemSize = 3 because there are 3 values (components) per vertex\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\n\t\tvar material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );\n\t\tvar mesh = new THREE.Mesh( geometry, material );\n\t\t</code>\n\t\t<p>More examples: [example:webgl_buffergeometry Complex mesh with non-indexed faces], [example:webgl_buffergeometry_uint Complex mesh with indexed faces], [example:webgl_buffergeometry_lines Lines], [example:webgl_buffergeometry_lines_indexed Indexed Lines], [example:webgl_buffergeometry_particles Particles], and [example:webgl_buffergeometry_rawshader Raw Shaders].</p>\n\n\t\t\n\t\t<h3>Accessing attributes</h3>\n\t\t<p>\n\t\tWebGL stores data associated with individual vertices of a geometry in <emph>attributes</emph>. \n\t\tExamples include the position of the vertex, the normal vector for the vertex, the vertex color,\n\t\tand so on. When using [page:Geometry], the [page:WebGLRenderer renderer] takes care of wrapping\n\t\tup this information into typed array buffers and sending this data to the shader. With \n\t\tBufferGeometry, all of this data is stored in buffers associated with an individual attributes.\n\t\tThis means that to get the position data associated with a vertex (for instance), you must call\n\t\t[page:.getAttribute] to access the 'position' [page:BufferAttribute attribute], then access the individual \n\t\tx, y, and z coordinates of the position.  \n\t\t</p>\n\t\t<p>\n\t\tThe following attributes are set by various members of this class:\n\t\t</p>\n\t\t<h4>[page:BufferAttribute position] (itemSize: 3)</h4>\n\t\t<div>\n\t\tStores the x, y, and z coordinates of each vertex in this geometry. Set by [page:.fromGeometry]().\n\t\t</div>\n\n\t\t<h4>[page:BufferAttribute normal] (itemSize: 3)</h4>\n\t\t<div>\n\t\tStores the x, y, and z components of the face or vertex normal vector of each vertex in this geometry.\n\t\tSet by [page:.fromGeometry]().\n\t\t</div>\n\n\t\t<h4>[page:BufferAttribute color] (itemSize: 3)</h4>\n\t\t<div>\n\t\tStores the red, green, and blue channels of vertex color of each vertex in this geometry.\n\t\tSet by [page:.fromGeometry]().\n\t\t</div>\n\n\t\t<h4>[page:BufferAttribute tangent] (itemSize: 3)</h4>\n\t\t<div>\n\t\tStores the x, y, and z components of the tangent vector of each vertex in this geometry. Set by [page:.computeTangents]().\n\t\t</div>\n\n\t\t<h4>[page:BufferAttribute index] (itemSize: 3)</h4>\n\t\tAllows for vertices to be re-used across multiple triangles; this is called using \"indexed triangles,\" and works much the same as it does in [page:Geometry]: each triangle is associated with the index of three vertices. This attribute therefore stores the index of each vertex for each triangular face.\n\n\t\tIf this attribute is not set, the [page:WebGLRenderer renderer] assumes that each three contiguous positions represent a single triangle.",
      "!type": "fn()",
      "prototype": {
        "!proto": "Geometry"
      }
    },
    "Clock": {
      "!name": "Clock",
      "!url": "http://threejs.org/docs/#Reference/core/Clock",
      "!doc": "Object for keeping track of time.",
      "prototype": {}
    },
    "EventDispatcher": {
      "!name": "EventDispatcher",
      "!url": "http://threejs.org/docs/#Reference/core/EventDispatcher",
      "!doc": "JavaScript events for custom objects.<br>\n\t\t<a href=\"https://github.com/mrdoob/eventdispatcher.js\">https://github.com/mrdoob/eventdispatcher.js</a>",
      "!type": "fn()",
      "prototype": {}
    },
    "Face3": {
      "!name": "Face3",
      "!url": "http://threejs.org/docs/#Reference/core/Face3",
      "!doc": "Triangle face.",
      "!type": "fn(a:Integer, b:Integer, c:Integer, normal:Vector3, color:Color, materialIndex:Integer)",
      "prototype": {}
    },
    "Geometry": {
      "!name": "Geometry",
      "!url": "http://threejs.org/docs/#Reference/core/Geometry",
      "!doc": "Base class for geometries.<br>\n\t\tA geometry holds all data necessary to describe a 3D model.",
      "!type": "fn()",
      "prototype": {
        "!proto": "PointCloud"
      }
    },
    "Object3D": {
      "!name": "Object3D",
      "!url": "http://threejs.org/docs/#Reference/core/Object3D",
      "!doc": "Base class for scene graph objects.",
      "prototype": {
        "!proto": "Mesh"
      }
    },
    "Raycaster": {
      "!name": "Raycaster",
      "!url": "http://threejs.org/docs/#Reference/core/Raycaster",
      "!doc": "This class makes raycasting easier. Raycasting is used for picking and more.",
      "!type": "fn(origin:Vector3, direction:Vector3, near:Float, far:Float)",
      "prototype": {}
    },
    "Lut": {
      "!name": "Lut",
      "!url": "http://threejs.org/docs/#Reference/examples/Lut",
      "!doc": "Represents a lookup table for colormaps. It is used to determine the color values from a range of data values.",
      "prototype": {}
    },
    "CombinedCamera": {
      "!name": "CombinedCamera",
      "!url": "http://threejs.org/docs/#Reference/examples/cameras/CombinedCamera",
      "!doc": "A general purpose camera, for setting FOV, Lens Focal Length,\n \t\tand switching between perspective and orthographic views easily.\n \t\tUse this only if you do not wish to manage\n \t\tboth an Orthographic and Perspective Camera",
      "!type": "fn(width:Number, height:Number, fov:Number, near:Number, far:Number, orthoNear:Number, orthoFar:Number)",
      "prototype": {
        "!proto": "Camera"
      }
    },
    "FontUtils": {
      "!name": "FontUtils",
      "!url": "http://threejs.org/docs/#Reference/extras/FontUtils",
      "!doc": "A class for text operations in three.js (See [page:TextGeometry])",
      "prototype": {
        "!proto": "TextGeometry"
      }
    },
    "GeometryUtils": {
      "!name": "GeometryUtils",
      "!url": "http://threejs.org/docs/#Reference/extras/GeometryUtils",
      "!doc": "Contains handy functions geometry manipulations.",
      "prototype": {}
    },
    "ImageUtils": {
      "!name": "ImageUtils",
      "!url": "http://threejs.org/docs/#Reference/extras/ImageUtils",
      "!doc": "A Helper class to ease the loading of images of different types.",
      "prototype": {}
    },
    "SceneUtils": {
      "!name": "SceneUtils",
      "!url": "http://threejs.org/docs/#Reference/extras/SceneUtils",
      "!doc": "A class containing useful utility functions for scene manipulation.",
      "prototype": {}
    },
    "Animation": {
      "!name": "Animation",
      "!url": "http://threejs.org/docs/#Reference/extras/animation/Animation",
      "!doc": "This class animates an object based on an hierarchy. This hierarchy can be Object3ds or bones.",
      "!type": "fn(root:Object3d, name:String)",
      "prototype": {}
    },
    "AnimationHandler": {
      "!name": "AnimationHandler",
      "!url": "http://threejs.org/docs/#Reference/extras/animation/AnimationHandler",
      "!doc": "The AnimationHandler handles the initialisation of the Animation data and \n\t\tthe animations itself. It keeps track of every animation and if it's active or not.\n\t\tIt also update all animations which are active if its method *update* is called.",
      "!type": "fn()",
      "prototype": {}
    },
    "AnimationMorphTarget": {
      "!name": "AnimationMorphTarget",
      "!url": "http://threejs.org/docs/#Reference/extras/animation/AnimationMorphTarget",
      "!doc": "todo",
      "prototype": {}
    },
    "KeyFrameAnimation": {
      "!name": "KeyFrameAnimation",
      "!url": "http://threejs.org/docs/#Reference/extras/animation/KeyFrameAnimation",
      "!doc": "todo",
      "!type": "fn(root:todo, data:todo, JITCompile:todo)",
      "prototype": {}
    },
    "Curve": {
      "!name": "Curve",
      "!url": "http://threejs.org/docs/#Reference/extras/core/Curve",
      "!doc": "An extensible curve object which contains methods for interpolation.",
      "!type": "fn()",
      "prototype": {}
    },
    "CurvePath": {
      "!name": "CurvePath",
      "!url": "http://threejs.org/docs/#Reference/extras/core/CurvePath",
      "!doc": "todo",
      "prototype": {
        "!proto": "Curve"
      }
    },
    "Gyroscope": {
      "!name": "Gyroscope",
      "!url": "http://threejs.org/docs/#Reference/extras/core/Gyroscope",
      "!doc": "todo",
      "!type": "fn()",
      "prototype": {}
    },
    "Path": {
      "!name": "Path",
      "!url": "http://threejs.org/docs/#Reference/extras/core/Path",
      "!doc": "A 2d path representation, comprising of points, lines, and cubes,  similar to the html5 2d canvas api. It extends CurvePath.",
      "!type": "fn(points:todo)",
      "prototype": {
        "!proto": "CurvePath"
      }
    },
    "Shape": {
      "!name": "Shape",
      "!url": "http://threejs.org/docs/#Reference/extras/core/Shape",
      "!doc": "Defines a 2d shape plane using paths.",
      "prototype": {}
    },
    "ArcCurve": {
      "!name": "ArcCurve",
      "!url": "http://threejs.org/docs/#Reference/extras/curves/ArcCurve",
      "!doc": "Alias for [page:EllipseCurve]",
      "prototype": {
        "!proto": "EllipseCurve"
      }
    },
    "ClosedSplineCurve3": {
      "!name": "ClosedSplineCurve3",
      "!url": "http://threejs.org/docs/#Reference/extras/curves/ClosedSplineCurve3",
      "!doc": "Create a smooth 3d spline curve from a series of points that loops back onto itself",
      "!type": "fn(points:Array)",
      "prototype": {
        "!proto": "Vector3"
      }
    },
    "CubicBezierCurve": {
      "!name": "CubicBezierCurve",
      "!url": "http://threejs.org/docs/#Reference/extras/curves/CubicBezierCurve",
      "!doc": "Create a smooth 2d <a href=\"http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:Bezier_curve.svg\" target=\"_blank\">cubic bezier curve</a>.",
      "prototype": {
        "!proto": "Curve"
      }
    },
    "CubicBezierCurve3": {
      "!name": "CubicBezierCurve3",
      "!url": "http://threejs.org/docs/#Reference/extras/curves/CubicBezierCurve3",
      "!doc": "Create a smooth 3d <a href=\"http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:Bezier_curve.svg\" target=\"_blank\">cubic bezier curve</a>.",
      "!type": "fn(v0:Vector3, v1:Vector3, v2:Vector3, v3:Vector3)",
      "prototype": {}
    },
    "EllipseCurve": {
      "!name": "EllipseCurve",
      "!url": "http://threejs.org/docs/#Reference/extras/curves/EllipseCurve",
      "!doc": "Creates a 2d curve in the shape of an ellipse.",
      "prototype": {
        "!proto": "Curve"
      }
    },
    "LineCurve": {
      "!name": "LineCurve",
      "!url": "http://threejs.org/docs/#Reference/extras/curves/LineCurve",
      "!doc": "A curve representing a 2d line segment",
      "!type": "fn(v1:Vector2, v2:Vector2)",
      "prototype": {
        "!proto": "Curve"
      }
    },
    "LineCurve3": {
      "!name": "LineCurve3",
      "!url": "http://threejs.org/docs/#Reference/extras/curves/LineCurve3",
      "!doc": "A curve representing a 3d line segment",
      "prototype": {}
    },
    "QuadraticBezierCurve": {
      "!name": "QuadraticBezierCurve",
      "!url": "http://threejs.org/docs/#Reference/extras/curves/QuadraticBezierCurve",
      "!doc": "Create a smooth 2d <a href=\"http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:B%C3%A9zier_2_big.gif\" target=\"_blank\">quadratic bezier curve</a>.",
      "!type": "fn(v0:Vector2, v1:Vector2, v2:Vector2)",
      "prototype": {
        "!proto": "Curve"
      }
    },
    "QuadraticBezierCurve3": {
      "!name": "QuadraticBezierCurve3",
      "!url": "http://threejs.org/docs/#Reference/extras/curves/QuadraticBezierCurve3",
      "!doc": "Create a smooth 3d <a href=\"http://en.wikipedia.org/wiki/B%C3%A9zier_curve#mediaviewer/File:B%C3%A9zier_2_big.gif\" target=\"_blank\">quadratic bezier curve</a>.",
      "prototype": {
        "!proto": "Curve"
      }
    },
    "SplineCurve": {
      "!name": "SplineCurve",
      "!url": "http://threejs.org/docs/#Reference/extras/curves/SplineCurve",
      "!doc": "Create a smooth 2d spline curve from a series of points",
      "!type": "fn(points:Array)",
      "prototype": {}
    },
    "SplineCurve3": {
      "!name": "SplineCurve3",
      "!url": "http://threejs.org/docs/#Reference/extras/curves/SplineCurve3",
      "!doc": "Create a smooth 3d spline curve from a series of points",
      "!type": "fn(points:Array)",
      "prototype": {
        "!proto": "Curve"
      }
    },
    "BoxGeometry": {
      "!name": "BoxGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/BoxGeometry",
      "!doc": "BoxGeometry is the quadrilateral primitive geometry class. It is typically used for creating a cube or irregular quadrilateral of the dimensions provided with the 'width', 'height', and 'depth' constructor arguments.",
      "prototype": {}
    },
    "CircleGeometry": {
      "!name": "CircleGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/CircleGeometry",
      "!doc": "CircleGeometry is a simple shape of Euclidean geometry.  It is contructed from a number of triangular segments that are oriented around a central point and extend as far out as a given radius.  It is built counter-clockwise from a start angle and a given central angle.  It can also be used to create regular polygons, where the number of segments determines the number of sides.",
      "!type": "fn(radius:Float, segments:Integer, thetaStart:Float, thetaLength:Float)",
      "prototype": {
        "!proto": "Geometry"
      }
    },
    "CubeGeometry": {
      "!name": "CubeGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/CubeGeometry",
      "!doc": "Renamed CubeGeometry to BoxGeometry. see [page:BoxGeometry].",
      "prototype": {
        "!proto": "BoxGeometry"
      }
    },
    "CylinderGeometry": {
      "!name": "CylinderGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/CylinderGeometry",
      "!doc": "A class for generating cylinder geometries",
      "!type": "fn(radiusTop:Float, radiusBottom:Float, height:Float, radiusSegments:Integer, heightSegments:Integer, openEnded:Boolean, thetaStart:Float, thetaLength:Float)",
      "prototype": {}
    },
    "DodecahedronGeometry": {
      "!name": "DodecahedronGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/DodecahedronGeometry",
      "!doc": "A class for generating a dodecahedron geometries.",
      "prototype": {
        "!proto": "PolyhedronGeometry"
      }
    },
    "ExtrudeGeometry": {
      "!name": "ExtrudeGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/ExtrudeGeometry",
      "!doc": "Creates extruded geometry from a path shape",
      "!type": "fn(shapes:Array, options:Object)",
      "prototype": {}
    },
    "IcosahedronGeometry": {
      "!name": "IcosahedronGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/IcosahedronGeometry",
      "!doc": "A class for generating an icosahedron geometry.",
      "prototype": {
        "!proto": "PolyhedronGeometry"
      }
    },
    "LatheGeometry": {
      "!name": "LatheGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/LatheGeometry",
      "!doc": "Class for generating meshes with axial symmetry. Possible uses include donuts, pipes, vases etc. The lathe rotate around the Z axis.",
      "!type": "fn(points:Array, segments:Integer, phiStart:Float, phiLength:Float)",
      "prototype": {}
    },
    "OctahedronGeometry": {
      "!name": "OctahedronGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/OctahedronGeometry",
      "!doc": "A class for generating an octahedron geometry.",
      "prototype": {
        "!proto": "PolyhedronGeometry"
      }
    },
    "ParametricGeometry": {
      "!name": "ParametricGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/ParametricGeometry",
      "!doc": "Generate geometry representing a parametric surface.",
      "!type": "fn(func:Function, slices:Integer, stacks:Integer)",
      "prototype": {
        "!proto": "Vector3"
      }
    },
    "PlaneGeometry": {
      "!name": "PlaneGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/PlaneGeometry",
      "!doc": "A class for generating plane geometries",
      "!type": "fn(width:Float, height:Float, widthSegments:Integer, heightSegments:Integer)",
      "prototype": {}
    },
    "PolyhedronGeometry": {
      "!name": "PolyhedronGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/PolyhedronGeometry",
      "!doc": "A polyhedron is a solid in three dimensions with flat faces. This class will take an array of vertices,\n\t\t\tproject them onto a sphere, and then divide them up to the desired level of detail. This class is used\n\t\t\tby [page:DodecahedronGeometry], [page:IcosahedronGeometry], [page:OctahedronGeometry],\n\t\t\tand [page:TetrahedronGeometry] to generate their respective geometries.",
      "!type": "fn(vertices:Array, faces:Array, radius:Float, detail:Integer)",
      "prototype": {
        "!proto": "Geometry"
      }
    },
    "RingGeometry": {
      "!name": "RingGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/RingGeometry",
      "!doc": "A class for generating a two-dimensional ring geometry.",
      "prototype": {}
    },
    "ShapeGeometry": {
      "!name": "ShapeGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/ShapeGeometry",
      "!doc": "Creates a one-sided polygonal geometry from one or more path shapes. Similar to [page:ExtrudeGeometry]",
      "!type": "fn(shapes:Array, options:Object)",
      "prototype": {
        "!proto": "Geometry"
      }
    },
    "SphereGeometry": {
      "!name": "SphereGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/SphereGeometry",
      "!doc": "A class for generating sphere geometries",
      "prototype": {}
    },
    "TetrahedronGeometry": {
      "!name": "TetrahedronGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/TetrahedronGeometry",
      "!doc": "A class for generating a tetrahedron geometries.",
      "!type": "fn(radius:Float, detail:Integer)",
      "prototype": {
        "!proto": "PolyhedronGeometry"
      }
    },
    "TextGeometry": {
      "!name": "TextGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/TextGeometry",
      "!doc": "This object creates an 3D object of text as a single object.",
      "prototype": {}
    },
    "TorusGeometry": {
      "!name": "TorusGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/TorusGeometry",
      "!doc": "A class for generating torus geometries",
      "!type": "fn(radius:Float, tube:Float, radialSegments:Integer, tubularSegments:Integer, arc:Float)",
      "prototype": {
        "!proto": "Geometry"
      }
    },
    "TorusKnotGeometry": {
      "!name": "TorusKnotGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/TorusKnotGeometry",
      "!doc": "Creates a torus knot, the particular shape of which is defined by a pair of coprime integers, p and q.  If p and q are not coprime, the result will be a torus link.",
      "!type": "fn(radius:Float, tube:Float, radialSegments:Integer, tubularSegments:Integer, p:Integer, q:Integer, heightScale:Float)",
      "prototype": {}
    },
    "TubeGeometry": {
      "!name": "TubeGeometry",
      "!url": "http://threejs.org/docs/#Reference/extras/geometries/TubeGeometry",
      "!doc": "Creates a tube that extrudes along a 3d curve",
      "!type": "fn(path:Curve, segments:Integer, radius:Float, radiusSegments:Integer, closed:Boolean)",
      "prototype": {
        "!proto": "Geometry"
      }
    },
    "ArrowHelper": {
      "!name": "ArrowHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/ArrowHelper",
      "!doc": "An 3D arrow Object.",
      "prototype": {}
    },
    "AxisHelper": {
      "!name": "AxisHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/AxisHelper",
      "!doc": "An axis object to visualize the the 3 axes in a simple way. <br>\n\t\t\tThe X axis is red. The Y axis is green. The Z axis is blue.",
      "!type": "fn(size:Number)",
      "prototype": {
        "!proto": "Line"
      }
    },
    "BoundingBoxHelper": {
      "!name": "BoundingBoxHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/BoundingBoxHelper",
      "!doc": "A helper object to show the world-axis-aligned bounding box for an object.",
      "!type": "fn(object:Object3D, hex:Number)",
      "prototype": {
        "!proto": "Mesh"
      }
    },
    "BoxHelper": {
      "!name": "BoxHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/BoxHelper",
      "!doc": "Helper object to show a wireframe box (with no face diagonals) around an object",
      "prototype": {}
    },
    "CameraHelper": {
      "!name": "CameraHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/CameraHelper",
      "!doc": "The camera Helper is an Object3D which helps visualizing what a camera contains in its frustum.<br>\n\t\tIt visualizes the frustum with an line Geometry.",
      "!type": "fn(camera:Camera)",
      "prototype": {
        "!proto": "Line"
      }
    },
    "DirectionalLightHelper": {
      "!name": "DirectionalLightHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/DirectionalLightHelper",
      "!doc": "Visualize a [page:DirectionalLight]'s effect on the scene",
      "prototype": {
        "!proto": "DirectionalLight"
      }
    },
    "EdgesHelper": {
      "!name": "EdgesHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/EdgesHelper",
      "!doc": "Creates a wireframe object that shows the \"hard\" edges of another object's geometry. To draw a full wireframe image of an object, see [page:WireframeHelper].",
      "!type": "fn(object:Object3D, color:Color, thresholdAngle:Float)",
      "prototype": {
        "!proto": "WireframeHelper"
      }
    },
    "FaceNormalsHelper": {
      "!name": "FaceNormalsHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/FaceNormalsHelper",
      "!doc": "Renders [page:ArrowHelper arrows] to visualize an object's [page:Face3 face] normals. Requires that the object's geometry be an instance of [page:Geometry] (does not work with [page:BufferGeometry]), and that face normals have been specified on all [page:Face3 faces] or calculated with [page:Geometry.computeFaceNormals computeFaceNormals].",
      "!type": "fn(object:Object3D, size:Number, color:Color, linewidth:Number)",
      "prototype": {
        "!proto": "BufferGeometry"
      }
    },
    "GridHelper": {
      "!name": "GridHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/GridHelper",
      "!doc": "The GridHelper is an object to define grids. Grids are two-dimensional arrays of lines.",
      "prototype": {
        "!proto": "Color"
      }
    },
    "HemisphereLightHelper": {
      "!name": "HemisphereLightHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/HemisphereLightHelper",
      "!doc": "Creates a visual aid for a [page:HemisphereLight HemisphereLight].",
      "!type": "fn(light:HemisphereLight, sphereSize:Number)",
      "prototype": {}
    },
    "PointLightHelper": {
      "!name": "PointLightHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/PointLightHelper",
      "!doc": "This display a helper for a pointLight",
      "!type": "fn(light:todo, sphereSize:todo)",
      "prototype": {
        "!proto": "Mesh"
      }
    },
    "SpotLightHelper": {
      "!name": "SpotLightHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/SpotLightHelper",
      "!doc": "todo",
      "prototype": {}
    },
    "VertexNormalsHelper": {
      "!name": "VertexNormalsHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/VertexNormalsHelper",
      "!doc": "Renders [page:ArrowHelper arrows] to visualize an object's vertex normal vectors. Requires that normals have been specified in a [page:BufferAttribute custom attribute] or have been calculated using [page:Geometry.computeVertexNormals computeVertexNormals].",
      "!type": "fn(object:Object3D, size:Number, color:Color, linewidth:Number)",
      "prototype": {
        "!proto": "Line"
      }
    },
    "VertexTangentsHelper": {
      "!name": "VertexTangentsHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/VertexTangentsHelper",
      "!doc": "Renders [page:ArrowHelper arrows] to visualize an object's vertex tangent vectors. Requires that tangents have been specified in a [page:BufferAttribute custom attribute] or have been computed using [page:Geometry.computeTangents computeTangents].",
      "prototype": {}
    },
    "WireframeHelper": {
      "!name": "WireframeHelper",
      "!url": "http://threejs.org/docs/#Reference/extras/helpers/WireframeHelper",
      "!doc": "Creates a wireframe object that shows the edges of another object's geometry. To draw a  wireframe image showing only \"hard\" edges (edges between non-coplanar faces), see [page:EdgesHelper].",
      "!type": "fn(object:Object3D, color:Color)",
      "prototype": {
        "!proto": "Line"
      }
    },
    "ImmediateRenderObject": {
      "!name": "ImmediateRenderObject",
      "!url": "http://threejs.org/docs/#Reference/extras/objects/ImmediateRenderObject",
      "!doc": "base class for immediate rendering objects.",
      "prototype": {}
    },
    "MorphBlendMesh": {
      "!name": "MorphBlendMesh",
      "!url": "http://threejs.org/docs/#Reference/extras/objects/MorphBlendMesh",
      "!doc": "todo",
      "!type": "fn(geometry:todo, material:todo)",
      "prototype": {
        "!proto": "Mesh"
      }
    },
    "AmbientLight": {
      "!name": "AmbientLight",
      "!url": "http://threejs.org/docs/#Reference/lights/AmbientLight",
      "!doc": "This light's color gets applied to all the objects in the scene globally.",
      "!type": "fn(hex:Integer)",
      "prototype": {
        "!proto": "Light"
      }
    },
    "AreaLight": {
      "!name": "AreaLight",
      "!url": "http://threejs.org/docs/#Reference/lights/AreaLight",
      "!doc": "This illuminates the scene from a complete surface. This light only works in the [page:WebGLDeferredRenderer deferredrenderer].",
      "!type": "fn(hex:Integer, intensity:Float)",
      "prototype": {}
    },
    "DirectionalLight": {
      "!name": "DirectionalLight",
      "!url": "http://threejs.org/docs/#Reference/lights/DirectionalLight",
      "!doc": "Affects objects using [page:MeshLambertMaterial] or [page:MeshPhongMaterial].",
      "prototype": {
        "!proto": "Object3D"
      }
    },
    "HemisphereLight": {
      "!name": "HemisphereLight",
      "!url": "http://threejs.org/docs/#Reference/lights/HemisphereLight",
      "!doc": "A light source positioned directly above the scene.",
      "!type": "fn(skyColorHex:Integer, groundColorHex:Integer, intensity:Float)",
      "prototype": {
        "!proto": "Light"
      }
    },
    "Light": {
      "!name": "Light",
      "!url": "http://threejs.org/docs/#Reference/lights/Light",
      "!doc": "Abstract base class for lights.",
      "prototype": {}
    },
    "PointLight": {
      "!name": "PointLight",
      "!url": "http://threejs.org/docs/#Reference/lights/PointLight",
      "!doc": "Affects objects using [page:MeshLambertMaterial] or [page:MeshPhongMaterial].",
      "!type": "fn(hex:Integer, intensity:Float, distance:Number)",
      "prototype": {
        "!proto": "Object3D"
      }
    },
    "SpotLight": {
      "!name": "SpotLight",
      "!url": "http://threejs.org/docs/#Reference/lights/SpotLight",
      "!doc": "A point light that can cast shadow in one direction.",
      "!type": "fn(hex:Integer, intensity:Float, distance:todo, angle:todo, exponent:todo)",
      "prototype": {
        "!proto": "Light"
      }
    },
    "BabylonLoader": {
      "!name": "BabylonLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/BabylonLoader",
      "!doc": "A loader for loading a <em>.babylon</em> resource.",
      "prototype": {
        "!proto": "Object3D"
      }
    },
    "BufferGeometryLoader": {
      "!name": "BufferGeometryLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/BufferGeometryLoader",
      "!doc": "A loader for loading a [page:BufferGeometry].",
      "!type": "fn(manager:LoadingManager)",
      "prototype": {
        "!proto": "BufferGeometry"
      }
    },
    "Cache": {
      "!name": "Cache",
      "!url": "http://threejs.org/docs/#Reference/loaders/Cache",
      "!doc": "A simple caching classe, used internaly by [page:XHRLoader].",
      "prototype": {}
    },
    "ColladaLoader": {
      "!name": "ColladaLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/ColladaLoader",
      "!doc": "A loader for <em>Collada</em> files.",
      "!type": "fn()",
      "prototype": {
        "!proto": "Geometry"
      }
    },
    "ImageLoader": {
      "!name": "ImageLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/ImageLoader",
      "!doc": "A loader for loading an [page:Image].",
      "prototype": {}
    },
    "JSONLoader": {
      "!name": "JSONLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/JSONLoader",
      "!doc": "A loader for loading objects in JSON format.",
      "!type": "fn(showStatus:Boolean)",
      "prototype": {
        "!proto": "Loader"
      }
    },
    "Loader": {
      "!name": "Loader",
      "!url": "http://threejs.org/docs/#Reference/loaders/Loader",
      "!doc": "Base class for implementing loaders.",
      "prototype": {
        "!proto": "Material"
      }
    },
    "LoadingManager": {
      "!name": "LoadingManager",
      "!url": "http://threejs.org/docs/#Reference/loaders/LoadingManager",
      "!doc": "Handles and keeps track of loaded and pending data.",
      "!type": "fn(onLoad:Function, onProgress:Function, onError:Function)",
      "prototype": {}
    },
    "MTLLoader": {
      "!name": "MTLLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/MTLLoader",
      "!doc": "A loader for loading an <em>.mtl</em> resource, used internaly by [page:OBJMTLLoader] and [page:UTF8Loader].",
      "prototype": {
        "!proto": "OBJMTLLoader"
      }
    },
    "MaterialLoader": {
      "!name": "MaterialLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/MaterialLoader",
      "!doc": "A loader for loading a [page:Material] in JSON format.",
      "!type": "fn(manager:LoadingManager)",
      "prototype": {
        "!proto": "Material"
      }
    },
    "OBJLoader": {
      "!name": "OBJLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/OBJLoader",
      "!doc": "A loader for loading an <em>.obj</em> resource.",
      "prototype": {
        "!proto": "Object3D"
      }
    },
    "OBJMTLLoader": {
      "!name": "OBJMTLLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/OBJMTLLoader",
      "!doc": "A loader for loading a <em>.obj</em> and its <em>.mtl</em> together.",
      "!type": "fn(manager:LoadingManager)",
      "prototype": {
        "!proto": "Object3D"
      }
    },
    "ObjectLoader": {
      "!name": "ObjectLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/ObjectLoader",
      "!doc": "A loader for loading a JSON resource. Unlike the [page:JSONLoader], this one make use of the <em>.type</em> attributes of objects to map them to their original classes.",
      "!type": "fn(manager:LoadingManager)",
      "prototype": {}
    },
    "PDBLoader": {
      "!name": "PDBLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/PDBLoader",
      "!doc": "A loader for loading a <em>.pdb</em> resource.\n\t\t<br><br>\n\t\tThe <a href=\"http://en.wikipedia.org/wiki/Protein_Data_Bank_(file_format)\">Protein Data Bank file format</a> is a textual file format describing the three-dimensional structures of molecules.",
      "!type": "fn(manager:LoadingManager)",
      "prototype": {
        "!proto": "Geometry"
      }
    },
    "SVGLoader": {
      "!name": "SVGLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/SVGLoader",
      "!doc": "A loader for loading an <em>.svg</em> resource.",
      "prototype": {}
    },
    "TGALoader": {
      "!name": "TGALoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/TGALoader",
      "!doc": "Class for loading a <em>.tga</em> [page:DataTexture texture].",
      "!type": "fn(manager:LoadingManager)",
      "prototype": {
        "!proto": "DataTexture"
      }
    },
    "TextureLoader": {
      "!name": "TextureLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/TextureLoader",
      "!doc": "Class for loading a [page:Texture texture].",
      "prototype": {}
    },
    "XHRLoader": {
      "!name": "XHRLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/XHRLoader",
      "!doc": "A low level class for loading resources with XmlHttpRequest, used internaly by most loaders.",
      "!type": "fn(manager:LoadingManager)",
      "prototype": {}
    },
    "glTFLoader": {
      "!name": "glTFLoader",
      "!url": "http://threejs.org/docs/#Reference/loaders/glTFLoader",
      "!doc": "A loader for loading a <em>.gltf</em> resource in <em>JSON</em> format.\n\t\t<br><br>\n\t\tThe <a href=\"https://www.khronos.org/gltf\">glTF file format</a> is a JSON file format to enable rapid delivery and loading of 3D content.",
      "!type": "fn()",
      "prototype": {
        "!proto": "Loader"
      }
    },
    "LineBasicMaterial": {
      "!name": "LineBasicMaterial",
      "!url": "http://threejs.org/docs/#Reference/materials/LineBasicMaterial",
      "!doc": "A material for drawing wireframe-style geometries.",
      "prototype": {}
    },
    "LineDashedMaterial": {
      "!name": "LineDashedMaterial",
      "!url": "http://threejs.org/docs/#Reference/materials/LineDashedMaterial",
      "!doc": "A material for drawing wireframe-style geometries with dashed lines.",
      "!type": "fn(parameters:Object)",
      "prototype": {
        "!proto": "Material"
      }
    },
    "Material": {
      "!name": "Material",
      "!url": "http://threejs.org/docs/#Reference/materials/Material",
      "!doc": "Materials describe the appearance of [page:Object objects]. They are defined in a (mostly) renderer-independent way, so you don't have to rewrite materials if you decide to use a different renderer.",
      "!type": "fn()",
      "prototype": {
        "!proto": "CanvasRenderer"
      }
    },
    "MeshBasicMaterial": {
      "!name": "MeshBasicMaterial",
      "!url": "http://threejs.org/docs/#Reference/materials/MeshBasicMaterial",
      "!doc": "A material for drawing geometries in a simple shaded (flat or wireframe) way.",
      "!type": "fn(parameters:Object)",
      "prototype": {}
    },
    "MeshDepthMaterial": {
      "!name": "MeshDepthMaterial",
      "!url": "http://threejs.org/docs/#Reference/materials/MeshDepthMaterial",
      "!doc": "A material for drawing geometry by depth. Depth is based off of the camera near and far plane. White is nearest, black is farthest.",
      "prototype": {
        "!proto": "Material"
      }
    },
    "MeshFaceMaterial": {
      "!name": "MeshFaceMaterial",
      "!url": "http://threejs.org/docs/#Reference/materials/MeshFaceMaterial",
      "!doc": "A Material to define multiple materials for the same geometry. \n\t\tThe geometry decides which material is used for which faces by the [page:Face3 faces materialindex].\n\t\tThe materialindex corresponds with the index of the material in the materials array.",
      "!type": "fn(materials:Array)",
      "prototype": {}
    },
    "MeshLambertMaterial": {
      "!name": "MeshLambertMaterial",
      "!url": "http://threejs.org/docs/#Reference/materials/MeshLambertMaterial",
      "!doc": "A material for non-shiny (Lambertian) surfaces, evaluated per vertex.",
      "prototype": {
        "!proto": "Material"
      }
    },
    "MeshNormalMaterial": {
      "!name": "MeshNormalMaterial",
      "!url": "http://threejs.org/docs/#Reference/materials/MeshNormalMaterial",
      "!doc": "A material that maps the normal vectors to RGB colors.",
      "!type": "fn(parameters:Object)",
      "prototype": {}
    },
    "MeshPhongMaterial": {
      "!name": "MeshPhongMaterial",
      "!url": "http://threejs.org/docs/#Reference/materials/MeshPhongMaterial",
      "!doc": "A material for shiny surfaces, evaluated per pixel.",
      "prototype": {
        "!proto": "Material"
      }
    },
    "PointCloudMaterial": {
      "!name": "PointCloudMaterial",
      "!url": "http://threejs.org/docs/#Reference/materials/PointCloudMaterial",
      "!doc": "The default material used by [page:PointCloud particle] systems.",
      "!type": "fn(parameters:Object)",
      "prototype": {}
    },
    "RawShaderMaterial": {
      "!name": "RawShaderMaterial",
      "!url": "http://threejs.org/docs/#Reference/materials/RawShaderMaterial",
      "!doc": "This class works just like [page:ShaderMaterial], except that definitions of built-in uniforms and attributes are not automatically prepended to the GLSL shader code.",
      "prototype": {
        "!proto": "ShaderMaterial"
      }
    },
    "ShaderMaterial": {
      "!name": "ShaderMaterial",
      "!url": "http://threejs.org/docs/#Reference/materials/ShaderMaterial",
      "!doc": "Material rendered with custom shaders. A shader is a small program written in [link:https://www.opengl.org/documentation/glsl/ GLSL] to run on the GPU. You may want to use a custom shader if you need to:\n\t\t<ul>\n\t\t\t<li>implement an effect not included with any of the built-in [page:Material materials]</li>\n\t\t\t<li>combine many objects into a single [page:Geometry] or [page:BufferGeometry] in order to improve performance</li>\n\t\t\t<li>associate custom data with individual vertices (\"custom attributes\")</li>\n\t\t</ul>\n\t\tNote that a ShaderMaterial will only be rendered properly by [page:WebGLRenderer], since the GLSL code in the vertexShader and fragmentShader properties must be compiled and run on the GPU using WebGL.",
      "!type": "fn(parameters:Object)",
      "prototype": {
        "!proto": "Geometry"
      }
    },
    "SpriteCanvasMaterial": {
      "!name": "SpriteCanvasMaterial",
      "!url": "http://threejs.org/docs/#Reference/materials/SpriteCanvasMaterial",
      "!doc": "Create a material that can draw custom sprites using a 2d canvas.",
      "prototype": {}
    },
    "SpriteMaterial": {
      "!name": "SpriteMaterial",
      "!url": "http://threejs.org/docs/#Reference/materials/SpriteMaterial",
      "!doc": "A material for a [page:Sprite].",
      "!type": "fn(parameters:Object)",
      "prototype": {
        "!proto": "Material"
      }
    },
    "Box2": {
      "!name": "Box2",
      "!url": "http://threejs.org/docs/#Reference/math/Box2",
      "!doc": "Represents a boundary box in 2D space.",
      "prototype": {
        "!proto": "Vector2"
      }
    },
    "Box3": {
      "!name": "Box3",
      "!url": "http://threejs.org/docs/#Reference/math/Box3",
      "!doc": "Represents a boundary box in 3d space.",
      "!type": "fn(min:Vector3, max:Vector3)",
      "prototype": {
        "!proto": "Vector3"
      }
    },
    "Color": {
      "!name": "Color",
      "!url": "http://threejs.org/docs/#Reference/math/Color",
      "!doc": "Represents a color.",
      "!type": "fn(value)",
      "prototype": {
        "!proto": "Color"
      }
    },
    "Euler": {
      "!name": "Euler",
      "!url": "http://threejs.org/docs/#Reference/math/Euler",
      "!doc": "Euler Angles. <br><br>\n\n\t\tEuler angles describe a rotation transformation by rotating an object on its various axes in specified amounts per axis, and a specified axis order.\n\t\t(More information on <a href=\"http://en.wikipedia.org/wiki/Euler_angles\" target=\"blank\">Wikipedia</a>)",
      "!type": "fn(x:Float, y:Float, z:Float, order:String)",
      "prototype": {}
    },
    "Frustum": {
      "!name": "Frustum",
      "!url": "http://threejs.org/docs/#Reference/math/Frustum",
      "!doc": "<a href=\"http://en.wikipedia.org/wiki/Frustum\">Frustums</a> are used to determine what is inside the camera's field of view. They help speed up the rendering process.",
      "prototype": {
        "!proto": "Plane"
      }
    },
    "Line3": {
      "!name": "Line3",
      "!url": "http://threejs.org/docs/#Reference/math/Line3",
      "!doc": "A geometric line segment represented by a start and end point.",
      "!type": "fn(start:Vector3, end:Vector3)",
      "prototype": {
        "!proto": "Vector3"
      }
    },
    "Math": {
      "!name": "Math",
      "!url": "http://threejs.org/docs/#Reference/math/Math",
      "!doc": "Math utility functions",
      "prototype": {
        "!proto": "Float"
      }
    },
    "Matrix3": {
      "!name": "Matrix3",
      "!url": "http://threejs.org/docs/#Reference/math/Matrix3",
      "!doc": "A 3x3 matrix.",
      "!type": "fn(n11:Float, n12:Float, n13:Float, n21:Float, n22:Float, n23:Float, n31:Float, n32:Float, n33:Float)",
      "prototype": {
        "!proto": "Float"
      }
    },
    "Matrix4": {
      "!name": "Matrix4",
      "!url": "http://threejs.org/docs/#Reference/math/Matrix4",
      "!doc": "A 4x4 Matrix.",
      "!type": "fn(n11:Float, n12:Float, n13:Float, n14:Float, n21:Float, n22:Float, n23:Float, n24:Float, n31:Float, n32:Float, n33:Float, n34:Float, n41:Float, n42:Float, n43:Float, n44:Float)",
      "prototype": {}
    },
    "Plane": {
      "!name": "Plane",
      "!url": "http://threejs.org/docs/#Reference/math/Plane",
      "!doc": "A two dimensional surface that extends infinitely in 3d space.",
      "prototype": {
        "!proto": "Vector3"
      }
    },
    "Quaternion": {
      "!name": "Quaternion",
      "!url": "http://threejs.org/docs/#Reference/math/Quaternion",
      "!doc": "Implementation of a <a href=\"http://en.wikipedia.org/wiki/Quaternion\">quaternion</a>. This is used for rotating things without encountering the dreaded <a href=\"http://en.wikipedia.org/wiki/Gimbal_lock\">gimbal lock</a> issue, amongst other advantages.",
      "!type": "fn(x:Float, y:Float, z:Float, w:Float)",
      "prototype": {}
    },
    "Ray": {
      "!name": "Ray",
      "!url": "http://threejs.org/docs/#Reference/math/Ray",
      "!doc": "A ray that emits from an origin in a certain direction.",
      "prototype": {
        "!proto": "Vector3"
      }
    },
    "Sphere": {
      "!name": "Sphere",
      "!url": "http://threejs.org/docs/#Reference/math/Sphere",
      "!doc": "A geometric sphere defined by a center position and radius.",
      "!type": "fn(center:Vector3, radius:Float)",
      "prototype": {
        "!proto": "Float"
      }
    },
    "Spline": {
      "!name": "Spline",
      "!url": "http://threejs.org/docs/#Reference/math/Spline",
      "!doc": "Represents a spline.",
      "prototype": {}
    },
    "Triangle": {
      "!name": "Triangle",
      "!url": "http://threejs.org/docs/#Reference/math/Triangle",
      "!doc": "A geometric triangle as defined by three vectors.",
      "!type": "fn(a:Vector3, b:Vector3, c:Vector3)",
      "prototype": {
        "!proto": "Vector3"
      }
    },
    "Vector2": {
      "!name": "Vector2",
      "!url": "http://threejs.org/docs/#Reference/math/Vector2",
      "!doc": "2D vector.",
      "!type": "fn(x:Float, y:Float)",
      "prototype": {
        "!proto": "Float"
      }
    },
    "Vector3": {
      "!name": "Vector3",
      "!url": "http://threejs.org/docs/#Reference/math/Vector3",
      "!doc": "3D vector.",
      "prototype": {
        "!proto": "Float"
      }
    },
    "Vector4": {
      "!name": "Vector4",
      "!url": "http://threejs.org/docs/#Reference/math/Vector4",
      "!doc": "4D vector.",
      "!type": "fn(x:Float, y:Float, z:Float, w:Float)",
      "prototype": {
        "!proto": "Vector4"
      }
    },
    "Bone": {
      "!name": "Bone",
      "!url": "http://threejs.org/docs/#Reference/objects/Bone",
      "!doc": "A bone which is part of a SkinnedMesh.",
      "prototype": {}
    },
    "LOD": {
      "!name": "LOD",
      "!url": "http://threejs.org/docs/#Reference/objects/LOD",
      "!doc": "todo",
      "!type": "fn()",
      "prototype": {
        "!proto": "Object3D"
      }
    },
    "LensFlare": {
      "!name": "LensFlare",
      "!url": "http://threejs.org/docs/#Reference/objects/LensFlare",
      "!doc": "todo",
      "prototype": {}
    },
    "Line": {
      "!name": "Line",
      "!url": "http://threejs.org/docs/#Reference/objects/Line",
      "!doc": "A line or a series of lines.",
      "!type": "fn(geometry:Geometry, material:Material, type:Integer)",
      "prototype": {
        "!proto": "Object3D"
      }
    },
    "Mesh": {
      "!name": "Mesh",
      "!url": "http://threejs.org/docs/#Reference/objects/Mesh",
      "!doc": "Base class for Mesh objects, such as [page:MorphAnimMesh] and [page:SkinnedMesh].",
      "prototype": {
        "!proto": "MorphAnimMesh"
      }
    },
    "MorphAnimMesh": {
      "!name": "MorphAnimMesh",
      "!url": "http://threejs.org/docs/#Reference/objects/MorphAnimMesh",
      "!doc": "todo",
      "!type": "fn(geometry:todo, material:todo)",
      "prototype": {}
    },
    "PointCloud": {
      "!name": "PointCloud",
      "!url": "http://threejs.org/docs/#Reference/objects/PointCloud",
      "!doc": "A class for displaying particles in the form of variable size points. For example, if using the [page:WebGLRenderer], the particles are displayed using GL_POINTS.",
      "!type": "fn(geometry:Geometry, material:Material)",
      "prototype": {
        "!proto": "Object3D"
      }
    },
    "SkinnedMesh": {
      "!name": "SkinnedMesh",
      "!url": "http://threejs.org/docs/#Reference/objects/SkinnedMesh",
      "!doc": "An 3d object that has bones data. These Bones can then be used to animate the vertices of the object.",
      "prototype": {
        "!proto": "Geometry"
      }
    },
    "Sprite": {
      "!name": "Sprite",
      "!url": "http://threejs.org/docs/#Reference/objects/Sprite",
      "!doc": "A sprite is a plane in an 3d scene which faces always towards the camera.",
      "!type": "fn(material:Material)",
      "prototype": {
        "!proto": "Material"
      }
    },
    "CanvasRenderer": {
      "!name": "CanvasRenderer",
      "!url": "http://threejs.org/docs/#Reference/renderers/CanvasRenderer",
      "!doc": "The Canvas renderer displays your beautifully crafted scenes <em>not</em> using WebGL, but draws it using the (slower) <a href=\"http://www.w3.org/html/wg/drafts/2dcontext/html5_canvas/\">Canvas 2D Context</a> API.<br><br>\n\t\t\tThis renderer can be a nice fallback from [page:WebGLRenderer] for simple scenes:\n\n\t\t\t<code>\n\t\t\tfunction webglAvailable() {\n\t\t\t\ttry {\n\t\t\t\t\tvar canvas = document.createElement( 'canvas' );\n\t\t\t\t\treturn !!( window.WebGLRenderingContext &amp;&amp; (\n\t\t\t\t\t\tcanvas.getContext( 'webgl' ) ||\n\t\t\t\t\t\tcanvas.getContext( 'experimental-webgl' ) )\n\t\t\t\t\t);\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( webglAvailable() ) {\n\t\t\t\trenderer = new THREE.WebGLRenderer();\n\t\t\t} else {\n\t\t\t\trenderer = new THREE.CanvasRenderer();\n\t\t\t}\n\t\t\t</code>\n\n\t\t\tNote: both WebGLRenderer and CanvasRenderer are embedded in the web page using an HTML5 &lt;canvas&gt; tag.\n\t\t\tThe \"Canvas\" in CanvasRenderer means it uses Canvas 2D instead of WebGL.<br><br>\n\n\t\t\tDon't confuse either CanvasRenderer with the SoftwareRenderer example, which simulates a screen buffer in a Javascript array.",
      "!type": "fn(parameters:object)",
      "prototype": {
        "!proto": "Canvas"
      }
    },
    "WebGLRenderTarget": {
      "!name": "WebGLRenderTarget",
      "!url": "http://threejs.org/docs/#Reference/renderers/WebGLRenderTarget",
      "!doc": "A render target is a buffer where the video card draws pixels for a scene that is being rendered in the background. It is used in different effects.",
      "prototype": {}
    },
    "WebGLRenderTargetCube": {
      "!name": "WebGLRenderTargetCube",
      "!url": "http://threejs.org/docs/#Reference/renderers/WebGLRenderTargetCube",
      "!doc": "[page:CubeCamera] uses this as its [page:WebGLRenderTarget]",
      "!type": "fn(width:Number, height:Number, options:Object)",
      "prototype": {
        "!proto": "WebGLRenderTarget"
      }
    },
    "WebGLRenderer": {
      "!name": "WebGLRenderer",
      "!url": "http://threejs.org/docs/#Reference/renderers/WebGLRenderer",
      "!doc": "The WebGL renderer displays your beautifully crafted scenes using WebGL, if your device supports it.",
      "prototype": {
        "!proto": "CanvasRenderer"
      }
    },
    "ShaderChunk": {
      "!name": "ShaderChunk",
      "!url": "http://threejs.org/docs/#Reference/renderers/shaders/ShaderChunk",
      "!doc": "Shader chunks for WebLG Shader library",
      "prototype": {}
    },
    "ShaderLib": {
      "!name": "ShaderLib",
      "!url": "http://threejs.org/docs/#Reference/renderers/shaders/ShaderLib",
      "!doc": "Webgl Shader Library for three.js",
      "prototype": {}
    },
    "UniformsLib": {
      "!name": "UniformsLib",
      "!url": "http://threejs.org/docs/#Reference/renderers/shaders/UniformsLib",
      "!doc": "Uniforms library for shared webgl shaders",
      "prototype": {}
    },
    "UniformsUtils": {
      "!name": "UniformsUtils",
      "!url": "http://threejs.org/docs/#Reference/renderers/shaders/UniformsUtils",
      "!doc": "Uniform Utilities. Support merging and cloning of uniform variables",
      "prototype": {}
    },
    "WebGLProgram": {
      "!name": "WebGLProgram",
      "!url": "http://threejs.org/docs/#Reference/renderers/webgl/WebGLProgram",
      "!doc": "Constructor for the GLSL program sent to vertex and fragment shaders, including default uniforms and attributes.",
      "!type": "fn(renderer:WebGLRenderer, code:Object, material:Material, parameters:Object)",
      "prototype": {}
    },
    "WebGLShader": {
      "!name": "WebGLShader",
      "!url": "http://threejs.org/docs/#Reference/renderers/webgl/WebGLShader",
      "!doc": "todo",
      "prototype": {}
    },
    "LensFlarePlugin": {
      "!name": "LensFlarePlugin",
      "!url": "http://threejs.org/docs/#Reference/renderers/webgl/plugins/LensFlarePlugin",
      "!doc": "The Webglrenderer plugin class that allows lensflares to be rendered in the WebglRenderer. This plugin is automatically loaded in the Webglrenderer.",
      "!type": "fn()",
      "prototype": {}
    },
    "ShadowMapPlugin": {
      "!name": "ShadowMapPlugin",
      "!url": "http://threejs.org/docs/#Reference/renderers/webgl/plugins/ShadowMapPlugin",
      "!doc": "The Webglrenderer plugin class that allows shadowmaps to be rendered in the WebglRenderer. This plugin is automatically loaded in the Webglrenderer.",
      "prototype": {}
    },
    "SpritePlugin": {
      "!name": "SpritePlugin",
      "!url": "http://threejs.org/docs/#Reference/renderers/webgl/plugins/SpritePlugin",
      "!doc": "The Webglrenderer plugin class that allows Sprites to be rendered in the WebglRenderer. This plugin is automatically loaded in the Webglrenderer.",
      "!type": "fn()",
      "prototype": {}
    },
    "Fog": {
      "!name": "Fog",
      "!url": "http://threejs.org/docs/#Reference/scenes/Fog",
      "!doc": "This class contains the parameters that define linear fog, i.e., that grows linearly denser with the distance.",
      "prototype": {
        "!proto": "Color"
      }
    },
    "FogExp2": {
      "!name": "FogExp2",
      "!url": "http://threejs.org/docs/#Reference/scenes/FogExp2",
      "!doc": "This class contains the parameters that define exponential fog, i.e., that grows exponentially denser with the distance.",
      "!type": "fn(hex:Integer, density:Float)",
      "prototype": {}
    },
    "Scene": {
      "!name": "Scene",
      "!url": "http://threejs.org/docs/#Reference/scenes/Scene",
      "!doc": "Scenes allow you to set up what and where is to be rendered by three.js. This is where you place objects, lights and cameras.",
      "prototype": {
        "!proto": "Object3D"
      }
    },
    "CompressedTexture": {
      "!name": "CompressedTexture",
      "!url": "http://threejs.org/docs/#Reference/textures/CompressedTexture",
      "!doc": "Creates a texture based on data in compressed form.",
      "!type": "fn(mipmaps:Array, width:Number, height:Number, format:Number, type:Number, mapping:Number, wrapS:Number, wrapT:Number, magFilter:Number, minFilter:Number, anisotropy:Number)",
      "prototype": {}
    },
    "DataTexture": {
      "!name": "DataTexture",
      "!url": "http://threejs.org/docs/#Reference/textures/DataTexture",
      "!doc": "Creates a texture directly from bitmapdata, width and height.",
      "prototype": {
        "!proto": "Texture"
      }
    },
    "Texture": {
      "!name": "Texture",
      "!url": "http://threejs.org/docs/#Reference/textures/Texture",
      "!doc": "Create a texture to apply to a surface or as a reflection or refraction map.",
      "!type": "fn(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy)",
      "prototype": {}
    }
  }
}
