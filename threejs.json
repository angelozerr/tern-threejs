{
  "!name": "three",
  "!define": {
    "THREE.DirectionalLight.prototype.clone.!ret": "+THREE.HemisphereLight",
    "THREE.PerspectiveCamera.prototype.clone.!ret": "+THREE.PerspectiveCamera",
    "THREE.Int8Attribute.!ret": "+THREE.BufferAttribute",
    "THREE.BufferGeometry.prototype.fromGeometry.!0": "+THREE.ShapeGeometry",
    "THREE.BufferGeometry.prototype.fromGeometry.!1": {
      "vertexColors": {
        "!type": "number",
        "!span": "2097[114:27]-2111[114:41]"
      },
      "!span": "2095[114:25]-2129[114:59]"
    },
    "THREE.BufferGeometry.prototype.computeOffsets.!ret": "[?]",
    "THREE.BufferGeometry.prototype.computeOffsets.!ret.<i>": {
      "start": {
        "!type": "number",
        "!span": "16408[731:23]-16413[731:28]"
      },
      "count": {
        "!type": "number",
        "!span": "16424[731:39]-16429[731:44]"
      },
      "index": {
        "!type": "number",
        "!span": "16433[731:48]-16438[731:53]"
      },
      "!span": "16406[731:21]-16450[731:65]"
    },
    "THREE.BufferGeometry.prototype.merge.!0": "+THREE.ShaderMaterial",
    "THREE.BufferGeometry.prototype.toJSON.!ret": {
      "metadata": {
        "version": {
          "!type": "number",
          "!span": "20536[880:4]-20543[880:11]"
        },
        "type": {
          "!type": "string",
          "!span": "20554[881:4]-20558[881:8]"
        },
        "generator": {
          "!type": "string",
          "!span": "20582[882:4]-20591[882:13]"
        },
        "!span": "20520[879:3]-20528[879:11]"
      },
      "uuid": {
        "!type": "string",
        "!span": "20627[884:3]-20631[884:7]"
      },
      "type": {
        "!type": "string",
        "!span": "20647[885:3]-20651[885:7]"
      },
      "data": {
        "boundingSphere": {
          "center": {
            "!type": "[number]",
            "!span": "21273[918:4]-21279[918:10]"
          },
          "radius": {
            "!type": "number",
            "!span": "21318[919:4]-21324[919:10]"
          },
          "!span": "21250[917:15]-21264[917:29]"
        },
        "!span": "20667[886:3]-20671[886:7]"
      },
      "!span": "20515[878:15]-20702[889:3]"
    },
    "THREE.BufferGeometry.prototype.clone.!ret": "+THREE.BufferGeometry",
    "THREE.BufferGeometry.prototype.dispatchEvent.!0": {
      "type": {
        "!type": "string",
        "!span": "6277[361:27]-6281[361:31]"
      },
      "!span": "6275[361:25]-6294[361:44]",
      "target": "+THREE.Bone"
    },
    "THREE.DynamicBufferAttribute.prototype.clone.!ret": "+THREE.DynamicBufferAttribute",
    "THREE.EventDispatcher.prototype.apply.!0": {
      "constructor": {
        "DEFAULT_MAPPING": {
          "!type": "number",
          "!span": "1496[45:14]-1511[45:29]"
        },
        "prototype": "THREE.Texture.prototype"
      },
      "addEventListener": "THREE.BufferGeometry.prototype.addEventListener",
      "hasEventListener": "THREE.BufferGeometry.prototype.hasEventListener",
      "removeEventListener": "THREE.BufferGeometry.prototype.removeEventListener",
      "dispatchEvent": "THREE.BufferGeometry.prototype.dispatchEvent",
      "clone": "THREE.Texture.prototype.clone",
      "update": "THREE.Texture.prototype.update",
      "dispose": "THREE.Texture.prototype.dispose"
    },
    "THREE.Face3.prototype.clone.!ret": "+THREE.Face3",
    "THREE.Geometry.prototype.fromBufferGeometry.!0": "+THREE.PlaneBufferGeometry",
    "THREE.Geometry.prototype.toJSON.!ret": {
      "metadata": {
        "version": {
          "!type": "number",
          "!span": "16975[803:4]-16982[803:11]"
        },
        "type": {
          "!type": "string",
          "!span": "16993[804:4]-16997[804:8]"
        },
        "generator": {
          "!type": "string",
          "!span": "17021[805:4]-17030[805:13]"
        },
        "!span": "16959[802:3]-16967[802:11]"
      },
      "uuid": {
        "!type": "string",
        "!span": "17066[807:3]-17070[807:7]"
      },
      "type": {
        "!type": "string",
        "!span": "17086[808:3]-17090[808:7]"
      },
      "name": {
        "!type": "string",
        "!span": "17141[811:33]-17145[811:37]"
      },
      "data": {
        "vertices": {
          "!type": "[number]",
          "!span": "20725[988:14]-20733[988:22]"
        },
        "normals": {
          "!type": "[number]",
          "!span": "20760[989:14]-20767[989:21]"
        },
        "colors": {
          "!type": "[number]",
          "!span": "20818[990:39]-20824[990:45]"
        },
        "uvs": {
          "!type": "[[number]]",
          "!span": "20871[991:36]-20874[991:39]"
        },
        "faces": {
          "!type": "[number]",
          "!span": "20935[992:14]-20940[992:19]"
        },
        "!span": "20699[986:9]-20703[986:13]"
      },
      "!span": "16954[801:15]-17105[809:3]"
    },
    "THREE.Geometry.prototype.toJSON.!ret.data.uvs.<i>": "[number]",
    "THREE.Geometry.prototype.clone.!ret": "+THREE.Geometry",
    "THREE.Object3D.prototype.toJSON.!ret": {
      "metadata": {
        "version": {
          "!type": "number",
          "!span": "9880[573:4]-9887[573:11]"
        },
        "type": {
          "!type": "string",
          "!span": "9898[574:4]-9902[574:8]"
        },
        "generator": {
          "!type": "string",
          "!span": "9918[575:4]-9927[575:13]"
        },
        "!span": "9864[572:3]-9872[572:11]"
      },
      "geometries": {
        "!type": "[?]",
        "!span": "10090[587:11]-10100[587:21]"
      },
      "materials": {
        "!type": "[?]",
        "!span": "10478[615:11]-10487[615:20]"
      },
      "object": {
        "uuid": {
          "!type": "string",
          "!span": "10807[641:8]-10811[641:12]"
        },
        "type": {
          "!type": "string",
          "!span": "10835[642:8]-10839[642:12]"
        },
        "name": {
          "!type": "string",
          "!span": "10890[644:34]-10894[644:38]"
        },
        "visible": {
          "!type": "bool",
          "!span": "11035[646:39]-11042[646:46]"
        },
        "fov": {
          "!type": "number",
          "!span": "11126[650:9]-11129[650:12]"
        },
        "aspect": {
          "!type": "number",
          "!span": "11153[651:9]-11159[651:15]"
        },
        "near": {
          "!type": "number",
          "!span": "11186[652:9]-11190[652:13]"
        },
        "far": {
          "!type": "number",
          "!span": "11215[653:9]-11218[653:12]"
        },
        "left": {
          "!type": "number",
          "!span": "11306[657:9]-11310[657:13]"
        },
        "right": {
          "!type": "number",
          "!span": "11335[658:9]-11340[658:14]"
        },
        "top": {
          "!type": "number",
          "!span": "11366[659:9]-11369[659:12]"
        },
        "bottom": {
          "!type": "number",
          "!span": "11393[660:9]-11399[660:15]"
        },
        "color": {
          "!type": "number",
          "!span": "11540[666:9]-11545[666:14]"
        },
        "intensity": {
          "!type": "number",
          "!span": "11682[671:9]-11691[671:18]"
        },
        "distance": {
          "!type": "number",
          "!span": "11856[677:9]-11864[677:17]"
        },
        "decay": {
          "!type": "number",
          "!span": "11893[678:9]-11898[678:14]"
        },
        "angle": {
          "!type": "number",
          "!span": "12095[685:9]-12100[685:14]"
        },
        "exponent": {
          "!type": "number",
          "!span": "12126[686:9]-12134[686:17]"
        },
        "groundColor": {
          "!type": "number",
          "!span": "12295[692:9]-12306[692:20]"
        },
        "children": {
          "!type": "[THREE.Object3D.prototype.toJSON.!ret.object]",
          "!span": "12837[711:9]-12845[711:17]"
        },
        "!span": "13021[725:9]-13027[725:15]",
        "matrix": "THREE.Matrix4.prototype.toArray.!ret"
      },
      "!span": "9859[571:15]-9954[577:3]"
    },
    "THREE.Raycaster.prototype.setFromCamera.!1": "+THREE.Camera",
    "THREE.Raycaster.prototype.intersectObject.!ret": "[?]",
    "THREE.Raycaster.prototype.intersectObjects.!ret": "[?]",
    "THREE.FontUtils.drawText.!ret": {
      "paths": {
        "!type": "[+THREE.Path]",
        "!span": "2176[104:11]-2181[104:16]"
      },
      "offset": {
        "!type": "number",
        "!span": "2194[104:29]-2200[104:35]"
      },
      "!span": "2174[104:9]-2209[104:44]",
      "!doc": "Get a Font data json object"
    },
    "THREE.FontUtils.extractGlyphPoints.!ret": {
      "offset": {
        "!type": "number",
        "!span": "4470[227:11]-4476[227:17]"
      },
      "!span": "4468[227:9]-4507[227:48]",
      "path": "+THREE.Path"
    },
    "THREE.FontUtils.generateShapes.!1": {
      "amount": {
        "!type": "number",
        "!span": "1163[46:12]-1169[46:18]",
        "!doc": "translate parameters to ExtrudeGeometry API"
      },
      "bevelThickness": {
        "!type": "number",
        "!span": "1304[50:59]-1318[50:73]"
      },
      "bevelSize": {
        "!type": "number",
        "!span": "1379[51:54]-1388[51:63]"
      },
      "bevelEnabled": {
        "!type": "bool",
        "!span": "1451[52:57]-1463[52:69]"
      }
    },
    "THREE.FontUtils.generateShapes.!ret": "[?]",
    "THREE.FontUtils.generateShapes.!ret.<i>": "+THREE.Shape",
    "THREE.FontUtils.Triangulate.!0": "[+THREE.Vector2]",
    "THREE.FontUtils.Triangulate.!ret": "[[number]]",
    "THREE.FontUtils.Triangulate.!ret.<i>": "[number]",
    "THREE.GeometryUtils.merge.!0": {
      "merge": {},
      "clone": "THREE.UniformsUtils.clone"
    },
    "THREE.GeometryUtils.merge.!0.merge.!0": {
      "<i>": {
        "fogDensity": {
          "type": {
            "!type": "string",
            "!span": "941[42:19]-945[42:23]"
          },
          "value": {
            "!type": "number",
            "!span": "952[42:30]-957[42:35]"
          }
        },
        "fogNear": {
          "type": {
            "!type": "string",
            "!span": "986[43:16]-990[43:20]"
          },
          "value": {
            "!type": "number",
            "!span": "997[43:27]-1002[43:32]"
          }
        },
        "fogFar": {
          "type": {
            "!type": "string",
            "!span": "1024[44:15]-1028[44:19]"
          },
          "value": {
            "!type": "number",
            "!span": "1035[44:26]-1040[44:31]"
          }
        },
        "fogColor": {
          "type": {
            "!type": "string",
            "!span": "1067[45:17]-1071[45:21]"
          },
          "value": "+THREE.Color"
        }
      }
    },
    "THREE.ImageUtils.loadTexture.!ret": "+THREE.Texture",
    "THREE.ImageUtils.loadTextureCube.!3": {
      "!type": "fn(event: ?)",
      "!span": "553[24:16]-615[28:3]"
    },
    "THREE.ImageUtils.loadTextureCube.!ret": "+THREE.CubeTexture",
    "THREE.SceneUtils.detach.!2": "+THREE.LensFlare",
    "THREE.AnimationHandler.animations.<i>": "+THREE.Animation",
    "THREE.AnimationHandler.parse.!ret": {
      "!type": "[?]",
      "!doc": "setup hierarchy"
    },
    "THREE.Audio.prototype.load.!ret": "+THREE.Audio",
    "THREE.Audio.!0": "+THREE.AudioListener",
    "THREE.Curve.prototype.getPoints.!ret": "[?]",
    "THREE.Curve.prototype.getSpacedPoints.!ret": "[?]",
    "THREE.CurvePath.prototype.getBoundingBox.!ret": {
      "minX": {
        "!type": "number",
        "!span": "3704[177:2]-3708[177:6]"
      },
      "minY": {
        "!type": "number",
        "!span": "3718[178:2]-3722[178:6]"
      },
      "maxX": {
        "!type": "number",
        "!span": "3732[179:2]-3736[179:6]"
      },
      "maxY": {
        "!type": "number",
        "!span": "3746[180:2]-3750[180:6]"
      },
      "!span": "3699[175:11]-3760[182:2]"
    },
    "THREE.CurvePath.prototype.getTransformedSpacedPoints.!ret": "[?]",
    "THREE.CurvePath.prototype.getWrapPoints.!1": "+THREE.QuadraticBezierCurve",
    "THREE.Path.prototype.arc.!0": {
      "!type": "number",
      "!span": "3640[139:5]-3642[139:7]"
    },
    "THREE.Path.prototype.arc.!1": {
      "!type": "number",
      "!span": "3683[140:5]-3685[140:7]"
    },
    "THREE.Path.prototype.ellipse.!0": {
      "!type": "number",
      "!span": "4187[156:5]-4189[156:7]"
    },
    "THREE.Path.prototype.ellipse.!1": {
      "!type": "number",
      "!span": "4230[157:5]-4232[157:7]"
    },
    "THREE.Path.prototype.toShapes.!ret": "[+THREE.Shape]",
    "THREE.Shape.prototype.extrude.!ret": "+THREE.ExtrudeGeometry",
    "THREE.Shape.prototype.getPointsHoles.!ret": "[[?]]",
    "THREE.Shape.prototype.getSpacedPointsHoles.!ret": "[[?]]",
    "THREE.Shape.prototype.extractAllPoints.!ret": {
      "!span": "1647[76:8]-1744[81:2]",
      "shape": "THREE.FontUtils.Triangulate.!0",
      "holes": "THREE.Shape.prototype.getPointsHoles.!ret"
    },
    "THREE.Shape.prototype.extractPoints.!ret": {
      "!span": "2311[111:8]-2420[116:2]",
      "shape": "THREE.CurvePath.prototype.getTransformedSpacedPoints.!ret",
      "holes": "THREE.Shape.prototype.getSpacedPointsHoles.!ret"
    },
    "THREE.ClosedSplineCurve3.!0": "[?]",
    "THREE.SplineCurve3.!0": "[?]",
    "THREE.CubeGeometry.!ret": "+THREE.BoxGeometry",
    "THREE.ExtrudeGeometry.WorldUVGenerator.generateTopUV.!ret": "[+THREE.Vector2]",
    "THREE.ExtrudeGeometry.WorldUVGenerator.generateSideWallUV.!ret": "[+THREE.Vector2]",
    "THREE.ExtrudeGeometry.!1": {
      "amount": {
        "!type": "number",
        "!span": "1163[46:12]-1169[46:18]",
        "!doc": "translate parameters to ExtrudeGeometry API"
      },
      "bevelThickness": {
        "!type": "number",
        "!span": "1304[50:59]-1318[50:73]"
      },
      "bevelSize": {
        "!type": "number",
        "!span": "1379[51:54]-1388[51:63]"
      },
      "bevelEnabled": {
        "!type": "bool",
        "!span": "1451[52:57]-1463[52:69]"
      },
      "!span": "1026[40:28]-1028[40:30]"
    },
    "THREE.PolyhedronGeometry.!0": "[number]",
    "THREE.PolyhedronGeometry.!1": "[number]",
    "THREE.TubeGeometry.FrenetFrames.!0": "+THREE.Curve",
    "THREE.TubeGeometry.!0": "+THREE.LineCurve",
    "THREE.EdgesHelper.!0": "+THREE.CameraHelper",
    "THREE.FaceNormalsHelper.prototype.update.!ret": "+THREE.FaceNormalsHelper",
    "THREE.SkeletonHelper.prototype.getBoneList.!ret": "[?]",
    "THREE.VertexNormalsHelper.prototype.update.!ret": "+THREE.VertexNormalsHelper",
    "THREE.VertexTangentsHelper.prototype.update.!ret": "+THREE.VertexTangentsHelper",
    "THREE.MorphBlendMesh.!1": "+THREE.MeshBasicMaterial",
    "THREE.AmbientLight.prototype.clone.!ret": "+THREE.AmbientLight",
    "THREE.Light.prototype.clone.!0": "+THREE.SpotLight",
    "THREE.PointLight.prototype.clone.!ret": "+THREE.PointLight",
    "THREE.CompressedTextureLoader.prototype.load.!ret": "+THREE.CompressedTexture",
    "THREE.ImageLoader.prototype.load.!1": {
      "!type": "fn(image: ?)",
      "!span": "450[20:20]-616[31:3]"
    },
    "THREE.JSONLoader.prototype.loadAjaxJSON.!0": "+THREE.JSONLoader",
    "THREE.JSONLoader.prototype.parse.!ret": {
      "!span": "12284[549:9]-12328[549:53]",
      "geometry": "+THREE.Geometry",
      "materials": "THREE.Loader.prototype.initMaterials.!ret"
    },
    "THREE.Loader.prototype.updateProgress.!0": {
      "total": {
        "!type": "number",
        "!span": "2280[93:24]-2285[93:29]"
      },
      "!span": "2278[93:22]-2328[93:72]"
    },
    "THREE.Loader.prototype.initMaterials.!ret": {
      "!type": "[?]",
      "!span": "12306[549:31]-12315[549:40]"
    },
    "THREE.ObjectLoader.prototype.parseGeometries.!ret": {
      "!span": "1449[72:19]-1451[72:21]",
      "<i>": "+THREE.Geometry"
    },
    "THREE.ObjectLoader.prototype.parseMaterials.!1": {
      "!span": "6231[339:17]-6233[339:19]",
      "<i>": "+THREE.Texture"
    },
    "THREE.ObjectLoader.prototype.parseMaterials.!ret": {
      "!span": "3915[213:18]-3917[213:20]"
    },
    "THREE.ObjectLoader.prototype.parseImages.!ret": {
      "!span": "5521[301:15]-5523[301:17]"
    },
    "THREE.XHRLoader.prototype.load.!1": {
      "!type": "fn(text: ?)",
      "!span": "581[27:20]-652[31:3]"
    },
    "THREE.LineBasicMaterial.prototype.clone.!ret": "+THREE.LineBasicMaterial",
    "THREE.LineBasicMaterial.!0": {
      "color": {
        "!type": "number",
        "!span": "314[11:84]-319[11:89]"
      },
      "!span": "312[11:82]-347[11:117]"
    },
    "THREE.LineDashedMaterial.prototype.clone.!ret": "+THREE.LineDashedMaterial",
    "THREE.LineDashedMaterial.!0": {
      "vertexShader": {
        "!type": "string",
        "!span": "1239[47:2]-1251[47:14]"
      },
      "fragmentShader": {
        "!type": "string",
        "!span": "1281[48:2]-1295[48:16]"
      },
      "morphTargets": {
        "!type": "bool",
        "!span": "1327[49:2]-1339[49:14]"
      },
      "skinning": {
        "!type": "bool",
        "!span": "1349[50:2]-1357[50:10]"
      },
      "!span": "1208[45:53]-1366[51:2]"
    },
    "THREE.Material.prototype.toJSON.!ret": {
      "metadata": {
        "version": {
          "!type": "number",
          "!span": "2037[113:4]-2044[113:11]"
        },
        "type": {
          "!type": "string",
          "!span": "2055[114:4]-2059[114:8]"
        },
        "generator": {
          "!type": "string",
          "!span": "2077[115:4]-2086[115:13]"
        },
        "!span": "2021[112:3]-2029[112:11]"
      },
      "uuid": {
        "!type": "string",
        "!span": "2116[117:3]-2120[117:7]"
      },
      "type": {
        "!type": "string",
        "!span": "2136[118:3]-2140[118:7]"
      },
      "name": {
        "!type": "string",
        "!span": "2191[121:33]-2195[121:37]"
      },
      "blending": {
        "!type": "number",
        "!span": "2445[127:56]-2453[127:64]"
      },
      "side": {
        "!type": "number",
        "!span": "2518[128:47]-2522[128:51]"
      },
      "opacity": {
        "!type": "number",
        "!span": "4620[181:33]-4627[181:40]"
      },
      "transparent": {
        "!type": "bool",
        "!span": "4687[182:43]-4698[182:54]"
      },
      "!span": "2016[111:15]-2155[119:3]"
    },
    "THREE.MeshBasicMaterial.!0": {
      "color": {
        "!type": "number",
        "!span": "443[14:84]-448[14:89]"
      },
      "!span": "441[14:82]-476[14:117]"
    },
    "THREE.MeshDepthMaterial.prototype.clone.!ret": "+THREE.MeshDepthMaterial",
    "THREE.MeshFaceMaterial.prototype.toJSON.!ret": {
      "metadata": {
        "version": {
          "!type": "number",
          "!span": "380[22:4]-387[22:11]"
        },
        "type": {
          "!type": "string",
          "!span": "398[23:4]-402[23:8]"
        },
        "generator": {
          "!type": "string",
          "!span": "420[24:4]-429[24:13]"
        },
        "!span": "364[21:3]-372[21:11]"
      },
      "uuid": {
        "!type": "string",
        "!span": "459[26:3]-463[26:7]"
      },
      "type": {
        "!type": "string",
        "!span": "479[27:3]-483[27:7]"
      },
      "materials": {
        "!type": "[?]",
        "!span": "499[28:3]-508[28:12]"
      },
      "!span": "359[20:15]-516[29:3]"
    },
    "THREE.MeshFaceMaterial.prototype.clone.!ret": "+THREE.MeshFaceMaterial",
    "THREE.MeshLambertMaterial.prototype.clone.!ret": "+THREE.MeshLambertMaterial",
    "THREE.MeshNormalMaterial.prototype.clone.!ret": "+THREE.MeshNormalMaterial",
    "THREE.MeshPhongMaterial.prototype.clone.!ret": "+THREE.MeshPhongMaterial",
    "THREE.PointCloudMaterial.!0": {
      "color": {
        "!type": "number",
        "!span": "330[11:85]-335[11:90]"
      },
      "!span": "328[11:83]-363[11:118]"
    },
    "THREE.RawShaderMaterial.prototype.clone.!ret": "+THREE.RawShaderMaterial",
    "THREE.Box2.prototype.set.!ret": "+THREE.Box2",
    "THREE.Box2.prototype.distanceToPoint.!0": "+THREE.Vector2",
    "THREE.Color.prototype.getHSL.!0": {
      "h": {
        "!type": "number",
        "!span": "4159[239:32]-4160[239:33]"
      },
      "s": {
        "!type": "number",
        "!span": "4165[239:38]-4166[239:39]"
      },
      "l": {
        "!type": "number",
        "!span": "4171[239:44]-4172[239:45]"
      },
      "!span": "4157[239:30]-4177[239:50]",
      "!doc": "h,s,l ranges are in 0.0 - 1.0"
    },
    "THREE.Color.prototype.toArray.!0": "[number]",
    "THREE.Euler.prototype.toArray.!0": "[number|string]",
    "THREE.Frustum.prototype.set.!ret": "+THREE.Frustum",
    "THREE.Line3.prototype.set.!ret": "+THREE.Line3",
    "THREE.Line3.prototype.equals.!0": {
      "start": {
        "!type": "number",
        "!span": "1584[73:56]-1589[73:61]"
      },
      "end": {
        "!type": "number",
        "!span": "1601[73:73]-1604[73:76]"
      },
      "!span": "1582[73:54]-1618[73:90]"
    },
    "THREE.Matrix3.prototype.toArray.!ret": "[?]",
    "THREE.Matrix4.prototype.copy.!0": "+THREE.Matrix4",
    "THREE.Matrix4.prototype.lookAt.!2": {
      "!type": "+THREE.Vector3",
      "!doc": "reflect incident vector off plane orthogonal to normal normal is assumed to have unit length"
    },
    "THREE.Matrix4.prototype.toArray.!ret": {
      "!type": "[?]",
      "!span": "12753[707:8]-12759[707:14]"
    },
    "THREE.Quaternion.prototype.multiplyQuaternions.!0": "+THREE.Quaternion",
    "THREE.Quaternion.prototype.toArray.!0": "[number]",
    "THREE.Triangle.prototype.set.!ret": "+THREE.Triangle",
    "THREE.Vector2.prototype.toArray.!0": "[number]",
    "THREE.Vector3.prototype.project.!0": "+THREE.PerspectiveCamera",
    "THREE.Vector3.prototype.toArray.!0": "[number]",
    "THREE.Vector4.prototype.clamp.!0": "+THREE.Vector4",
    "THREE.Vector4.prototype.toArray.!0": "[number]",
    "THREE.LOD.prototype.raycast.!0": "+THREE.Raycaster",
    "THREE.LOD.prototype.clone.!0": "+THREE.LOD",
    "THREE.Line.prototype.clone.!0": "+THREE.Line",
    "THREE.MorphAnimMesh.prototype.clone.!0": "+THREE.MorphAnimMesh",
    "THREE.ParticleSystem.!ret": "+THREE.PointCloud",
    "THREE.Sprite.prototype.clone.!0": "+THREE.Sprite",
    "THREE.WebGLRenderTarget.prototype.clone.!ret": "+THREE.WebGLRenderTarget",
    "THREE.WebGLRenderTarget.!2": {
      "minFilter": {
        "!type": "number",
        "!span": "3523[164:17]-3532[164:26]"
      },
      "magFilter": {
        "!type": "number",
        "!span": "3548[164:42]-3557[164:51]"
      },
      "format": {
        "!type": "number",
        "!span": "3573[164:67]-3579[164:73]"
      },
      "!span": "3521[164:15]-3599[164:93]"
    },
    "THREE.WebGLRenderTargetCube.!2": {
      "format": {
        "!type": "number",
        "!span": "1432[45:88]-1438[45:94]"
      },
      "magFilter": {
        "!type": "number",
        "!span": "1457[45:113]-1466[45:122]"
      },
      "minFilter": {
        "!type": "number",
        "!span": "1488[45:144]-1497[45:153]"
      },
      "!span": "1430[45:86]-1519[45:175]"
    },
    "THREE.UniformsUtils.merge.!0": "[?]",
    "THREE.WebGLProgram.!3": {
      "precision": {
        "!type": "string",
        "!span": "94601[4133:3]-94610[4133:12]"
      },
      "supportsVertexTextures": {
        "!type": "bool",
        "!span": "94627[4134:3]-94649[4134:25]"
      },
      "map": {
        "!type": "bool",
        "!span": "94680[4136:3]-94683[4136:6]"
      },
      "envMap": {
        "!type": "bool",
        "!span": "94705[4137:3]-94711[4137:9]"
      },
      "lightMap": {
        "!type": "bool",
        "!span": "94795[4139:3]-94803[4139:11]"
      },
      "bumpMap": {
        "!type": "bool",
        "!span": "94830[4140:3]-94837[4140:10]"
      },
      "normalMap": {
        "!type": "bool",
        "!span": "94863[4141:3]-94872[4141:12]"
      },
      "specularMap": {
        "!type": "bool",
        "!span": "94900[4142:3]-94911[4142:14]"
      },
      "alphaMap": {
        "!type": "bool",
        "!span": "94941[4143:3]-94949[4143:11]"
      },
      "fogExp": {
        "!type": "bool",
        "!span": "95087[4151:3]-95093[4151:9]"
      },
      "flatShading": {
        "!type": "bool",
        "!span": "95129[4153:3]-95140[4153:14]"
      },
      "logarithmicDepthBuffer": {
        "!type": "bool",
        "!span": "95232[4156:3]-95254[4156:25]"
      },
      "maxBones": {
        "!type": "number",
        "!span": "95317[4159:3]-95325[4159:11]"
      },
      "useVertexTexture": {
        "!type": "bool",
        "!span": "95340[4160:3]-95356[4160:19]"
      },
      "maxDirLights": {
        "!type": "number",
        "!span": "95617[4167:3]-95629[4167:15]"
      },
      "maxPointLights": {
        "!type": "number",
        "!span": "95661[4168:3]-95675[4168:17]"
      },
      "maxSpotLights": {
        "!type": "number",
        "!span": "95701[4169:3]-95714[4169:16]"
      },
      "maxHemiLights": {
        "!type": "number",
        "!span": "95739[4170:3]-95752[4170:16]"
      },
      "maxShadows": {
        "!type": "number",
        "!span": "95778[4172:3]-95788[4172:13]"
      },
      "shadowMapEnabled": {
        "!type": "bool",
        "!span": "95805[4173:3]-95821[4173:19]",
        "!doc": "shadow map"
      },
      "doubleSided": {
        "!type": "bool",
        "!span": "96114[4181:3]-96125[4181:14]"
      },
      "flipSided": {
        "!type": "bool",
        "!span": "96166[4182:3]-96175[4182:12]"
      },
      "!span": "94595[4131:19]-96214[4184:3]"
    },
    "THREE.WebGLProgram.!ret": "+THREE.WebGLProgram",
    "THREE.WebGLState.!1": {
      "!type": "fn(p: ?) -> number",
      "!span": "140258[6020:1]-144088[6112:2]",
      "!doc": "Map three.js constants to WebGL constants"
    },
    "THREE.LensFlarePlugin.!1": "[?]",
    "THREE.ShadowMapPlugin.!1": "[?]",
    "THREE.ShadowMapPlugin.!2": {
      "<i>": {
        "!type": "[THREE.ShadowMapPlugin.!2.<i>.<i>]",
        "!span": "88027[3868:10]-88029[3868:12]"
      },
      "!span": "4111[191:19]-4113[191:21]"
    },
    "THREE.ShadowMapPlugin.!2.<i>.<i>": {
      "buffer": {
        "id": {
          "!type": "number",
          "!span": "86254[3784:6]-86256[3784:8]"
        },
        "faces3": {
          "!type": "[number]",
          "!span": "86289[3785:6]-86295[3785:12]"
        },
        "materialIndex": {
          "!type": "number",
          "!span": "86307[3786:6]-86320[3786:19]"
        },
        "vertices": {
          "!type": "number",
          "!span": "86343[3787:6]-86351[3787:14]"
        },
        "__webglMorphTargetsBuffers": {
          "!type": "[?]",
          "!span": "13007[626:17]-13033[626:43]"
        },
        "__webglMorphNormalsBuffers": {
          "!type": "[?]",
          "!span": "13287[640:17]-13313[640:43]"
        },
        "__morphTargetsArrays": {
          "!type": "[?]",
          "!span": "22388[1084:17]-22408[1084:37]"
        },
        "__morphNormalsArrays": {
          "!type": "[?]",
          "!span": "22671[1098:17]-22691[1098:37]"
        },
        "__webglFaceCount": {
          "!type": "number",
          "!span": "22869[1108:16]-22885[1108:32]"
        },
        "__webglLineCount": {
          "!type": "number",
          "!span": "22915[1109:16]-22931[1109:32]"
        },
        "__webglCustomAttributesList": {
          "!type": "[THREE.ShadowMapPlugin.!2.<i>.<i>.buffer.__webglCustomAttributesList.<i>]",
          "!span": "23091[1118:18]-23118[1118:45]"
        },
        "__inittedArrays": {
          "!type": "bool",
          "!span": "24294[1166:16]-24309[1166:31]"
        },
        "!span": "88093[3872:4]-88099[3872:10]"
      },
      "z": {
        "!type": "number",
        "!span": "88153[3875:4]-88154[3875:5]"
      },
      "render": {
        "!type": "bool",
        "!span": "79537[3447:18]-79543[3447:24]"
      },
      "!span": "88075[3870:3]-88162[3876:4]"
    },
    "THREE.ShadowMapPlugin.!2.<i>.<i>.buffer.__webglCustomAttributesList.<i>": {
      "__webglInitialized": {
        "!type": "bool",
        "!span": "23653[1139:15]-23671[1139:33]"
      },
      "size": {
        "!type": "number",
        "!span": "23933[1148:15]-23937[1148:19]"
      },
      "!span": "23438[1129:20]-23440[1129:22]"
    },
    "THREE.ShadowMapPlugin.!3": "[THREE.ShadowMapPlugin.!3.<i>]",
    "THREE.ShadowMapPlugin.!3.<i>": {
      "z": {
        "!type": "number",
        "!span": "88325[3889:4]-88326[3889:5]"
      },
      "!span": "88244[3884:3]-88334[3890:4]"
    },
    "THREE.SpritePlugin.!1": "[?]",
    "THREE.Fog.prototype.clone.!ret": "+THREE.Fog",
    "THREE.FogExp2.prototype.clone.!ret": "+THREE.FogExp2",
    "THREE.CompressedTexture.prototype.clone.!ret": "+THREE.CompressedTexture",
    "THREE.CubeTexture.clone.!0": "+THREE.CubeTexture",
    "THREE.DataTexture.prototype.clone.!ret": "+THREE.DataTexture",
    "THREE.HemisphereLight.children.<i>": "+THREE.Object3D",
    "THREE.ShapeGeometry.faces.<i>": "+THREE.Face3",
    "THREE.ShapeGeometry.faceVertexUvs.<i>": "[[+THREE.Vector2]]",
    "THREE.ShapeGeometry.faceVertexUvs.<i>.<i>": "[+THREE.Vector2]",
    "THREE.ShapeGeometry.morphTargets.<i>": {
      "!span": "10800[486:33]-10802[486:35]",
      "vertices": {
        "<i>": "+THREE.Vector3"
      }
    },
    "THREE.ShapeGeometry.morphColors.<i>": {
      "colors": {
        "!type": "[+THREE.Color]",
        "!span": "11630[516:30]-11636[516:36]"
      },
      "!span": "11529[514:32]-11531[514:34]"
    },
    "THREE.ShapeGeometry.morphNormals.<i>": {
      "faceNormals": {
        "!type": "[+THREE.Vector3]",
        "!span": "7900[372:27]-7911[372:38]"
      },
      "vertexNormals": {
        "!type": "[THREE.ShapeGeometry.morphNormals.<i>.vertexNormals.<i>]",
        "!span": "7945[373:27]-7958[373:40]"
      },
      "!span": "7869[371:29]-7871[371:31]"
    },
    "THREE.ShapeGeometry.morphNormals.<i>.vertexNormals.<i>": {
      "!span": "8248[383:21]-8322[383:95]",
      "a": "+THREE.Vector3",
      "b": "+THREE.Vector3",
      "c": "+THREE.Vector3"
    },
    "THREE.ShapeGeometry.skinWeights.<i>": {
      "!type": "+THREE.Vector4",
      "!span": "267[12:33]-272[12:38]"
    },
    "THREE.BufferGeometry.offsets.<i>": {
      "start": {
        "!type": "number",
        "!span": "1132[56:3]-1137[56:8]"
      },
      "index": {
        "!type": "number",
        "!span": "1166[58:3]-1171[58:8]"
      },
      "!span": "1126[54:23]-1221[60:3]"
    },
    "THREE.Path.actions.<i>": {
      "action": {
        "!type": "string",
        "!span": "4792[177:22]-4798[177:28]"
      },
      "args": {
        "!type": "[?]",
        "!span": "4827[177:57]-4831[177:61]"
      },
      "!span": "4790[177:20]-4839[177:69]"
    },
    "THREE.Path.curves.<i>": "+THREE.SplineCurve",
    "THREE.Shape.holes.<i>": "+THREE.Path",
    "THREE.LensFlare.lensFlares.<i>": {
      "size": {
        "!type": "number",
        "!span": "1062[42:2]-1066[42:6]"
      },
      "distance": {
        "!type": "number",
        "!span": "1123[43:2]-1131[43:10]"
      },
      "x": {
        "!type": "number",
        "!span": "1203[44:2]-1204[44:3]"
      },
      "y": {
        "!type": "number",
        "!span": "1209[44:8]-1210[44:9]"
      },
      "z": {
        "!type": "number",
        "!span": "1215[44:14]-1216[44:15]"
      },
      "scale": {
        "!type": "number",
        "!span": "1283[45:2]-1288[45:7]"
      },
      "rotation": {
        "!type": "number",
        "!span": "1309[46:2]-1317[46:10]"
      },
      "opacity": {
        "!type": "number",
        "!span": "1340[47:2]-1347[47:9]"
      },
      "blending": {
        "!type": "number",
        "!span": "1401[49:2]-1409[49:10]"
      },
      "wantedRotation": {
        "!type": "number",
        "!span": "2009[73:8]-2023[73:22]"
      },
      "!span": "1018[40:23]-1436[50:2]",
      "color": "+THREE.Color"
    },
    "THREE.Frustum.planes.<i>": "+THREE.Plane",
    "THREE.FontUtils.Triangulate.area.!0": {
      "<i>": "+THREE.Vector2"
    },
    "THREE.Curve.create.!0": {
      "prototype": {
        "constructor": "THREE.SplineCurve3",
        "getPoint": "THREE.SplineCurve3.prototype.getPoint"
      }
    },
    "THREE.SplineCurve.!0": {
      "<i>": "+THREE.Vector2"
    },
    "THREE.SceneUtils.attach.!1": {
      "files": "THREE.Cache.files",
      "add": "THREE.Cache.add",
      "get": "THREE.Cache.get",
      "remove": "THREE.Cache.remove",
      "clear": "THREE.Cache.clear"
    },
    "THREE.Box3.prototype.setFromPoints.!0": {
      "<i>": "+THREE.Vector3"
    },
    "THREE.Face3.!4": {
      "<i>": "+THREE.Color"
    },
    "THREE.Skeleton.!0": {
      "<i>": "+THREE.Bone"
    }
  },
  "Math": {
    "sign": {
      "!type": "fn(x: number) -> number",
      "!span": "320[20:6]-324[20:10]"
    }
  },
  "THREE": {
    "REVISION": {
      "!type": "string",
      "!span": "62[4:14]-70[4:22]"
    },
    "DirectionalLight": {
      "prototype": {
        "clone": {
          "!type": "fn()",
          "!span": "1443[65:33]-1448[65:38]"
        },
        "!span": "1286[62:23]-1295[62:32]",
        "constructor": "THREE.DirectionalLight"
      },
      "!type": "fn(color: ?, intensity: ?)",
      "!span": "102[5:6]-118[5:22]"
    },
    "log": {
      "!type": "fn()",
      "!span": "440[30:6]-443[30:9]",
      "!doc": "set the default log handlers"
    },
    "warn": {
      "!type": "fn()",
      "!span": "508[31:6]-512[31:10]"
    },
    "error": {
      "!type": "fn()",
      "!span": "578[32:6]-583[32:11]"
    },
    "MOUSE": {
      "LEFT": {
        "!type": "number",
        "!span": "733[37:16]-737[37:20]"
      },
      "MIDDLE": {
        "!type": "number",
        "!span": "742[37:25]-748[37:31]"
      },
      "RIGHT": {
        "!type": "number",
        "!span": "753[37:36]-758[37:41]"
      },
      "!span": "723[37:6]-728[37:11]"
    },
    "CullFaceNone": {
      "!type": "number",
      "!span": "795[41:6]-807[41:18]",
      "!doc": "GL STATE CONSTANTS"
    },
    "CullFaceBack": {
      "!type": "number",
      "!span": "819[42:6]-831[42:18]"
    },
    "CullFaceFront": {
      "!type": "number",
      "!span": "843[43:6]-856[43:19]"
    },
    "CullFaceFrontBack": {
      "!type": "number",
      "!span": "868[44:6]-885[44:23]"
    },
    "FrontFaceDirectionCW": {
      "!type": "number",
      "!span": "898[46:6]-918[46:26]"
    },
    "FrontFaceDirectionCCW": {
      "!type": "number",
      "!span": "930[47:6]-951[47:27]"
    },
    "BasicShadowMap": {
      "!type": "number",
      "!span": "984[51:6]-998[51:20]",
      "!doc": "SHADOWING TYPES"
    },
    "PCFShadowMap": {
      "!type": "number",
      "!span": "1010[52:6]-1022[52:18]"
    },
    "PCFSoftShadowMap": {
      "!type": "number",
      "!span": "1034[53:6]-1050[53:22]"
    },
    "FrontSide": {
      "!type": "number",
      "!span": "1095[59:6]-1104[59:15]",
      "!doc": "side"
    },
    "BackSide": {
      "!type": "number",
      "!span": "1116[60:6]-1124[60:14]"
    },
    "DoubleSide": {
      "!type": "number",
      "!span": "1136[61:6]-1146[61:16]"
    },
    "NoShading": {
      "!type": "number",
      "!span": "1171[65:6]-1180[65:15]",
      "!doc": "shading"
    },
    "FlatShading": {
      "!type": "number",
      "!span": "1192[66:6]-1203[66:17]"
    },
    "SmoothShading": {
      "!type": "number",
      "!span": "1215[67:6]-1228[67:19]"
    },
    "NoColors": {
      "!type": "number",
      "!span": "1252[71:6]-1260[71:14]",
      "!doc": "colors"
    },
    "FaceColors": {
      "!type": "number",
      "!span": "1272[72:6]-1282[72:16]"
    },
    "VertexColors": {
      "!type": "number",
      "!span": "1294[73:6]-1306[73:18]"
    },
    "NoBlending": {
      "!type": "number",
      "!span": "1338[77:6]-1348[77:16]",
      "!doc": "blending modes"
    },
    "NormalBlending": {
      "!type": "number",
      "!span": "1360[78:6]-1374[78:20]"
    },
    "AdditiveBlending": {
      "!type": "number",
      "!span": "1386[79:6]-1402[79:22]"
    },
    "SubtractiveBlending": {
      "!type": "number",
      "!span": "1414[80:6]-1433[80:25]"
    },
    "MultiplyBlending": {
      "!type": "number",
      "!span": "1445[81:6]-1461[81:22]"
    },
    "CustomBlending": {
      "!type": "number",
      "!span": "1473[82:6]-1487[82:20]"
    },
    "AddEquation": {
      "!type": "number",
      "!span": "1637[88:6]-1648[88:17]",
      "!doc": "custom blending equations (numbers start from 100 not to clash with other mappings to OpenGL constants defined in Texture.js)"
    },
    "SubtractEquation": {
      "!type": "number",
      "!span": "1662[89:6]-1678[89:22]"
    },
    "ReverseSubtractEquation": {
      "!type": "number",
      "!span": "1692[90:6]-1715[90:29]"
    },
    "MinEquation": {
      "!type": "number",
      "!span": "1729[91:6]-1740[91:17]"
    },
    "MaxEquation": {
      "!type": "number",
      "!span": "1754[92:6]-1765[92:17]"
    },
    "ZeroFactor": {
      "!type": "number",
      "!span": "1820[96:6]-1830[96:16]",
      "!doc": "custom blending destination factors"
    },
    "OneFactor": {
      "!type": "number",
      "!span": "1844[97:6]-1853[97:15]"
    },
    "SrcColorFactor": {
      "!type": "number",
      "!span": "1867[98:6]-1881[98:20]"
    },
    "OneMinusSrcColorFactor": {
      "!type": "number",
      "!span": "1895[99:6]-1917[99:28]"
    },
    "SrcAlphaFactor": {
      "!type": "number",
      "!span": "1931[100:6]-1945[100:20]"
    },
    "OneMinusSrcAlphaFactor": {
      "!type": "number",
      "!span": "1959[101:6]-1981[101:28]"
    },
    "DstAlphaFactor": {
      "!type": "number",
      "!span": "1995[102:6]-2009[102:20]"
    },
    "OneMinusDstAlphaFactor": {
      "!type": "number",
      "!span": "2023[103:6]-2045[103:28]"
    },
    "DstColorFactor": {
      "!type": "number",
      "!span": "2282[113:6]-2296[113:20]",
      "!doc": "THREE.ZeroFactor = 200; THREE.OneFactor = 201; THREE.SrcAlphaFactor = 204; THREE.OneMinusSrcAlphaFactor = 205; THREE.DstAlphaFactor = 206; THREE.OneMinusDstAlphaFactor = 207;"
    },
    "OneMinusDstColorFactor": {
      "!type": "number",
      "!span": "2310[114:6]-2332[114:28]"
    },
    "SrcAlphaSaturateFactor": {
      "!type": "number",
      "!span": "2346[115:6]-2368[115:28]"
    },
    "MultiplyOperation": {
      "!type": "number",
      "!span": "2406[120:6]-2423[120:23]",
      "!doc": "TEXTURE CONSTANTS"
    },
    "MixOperation": {
      "!type": "number",
      "!span": "2435[121:6]-2447[121:18]"
    },
    "AddOperation": {
      "!type": "number",
      "!span": "2459[122:6]-2471[122:18]"
    },
    "UVMapping": {
      "!type": "number",
      "!span": "2502[126:6]-2511[126:15]",
      "!doc": "Mapping modes"
    },
    "CubeReflectionMapping": {
      "!type": "number",
      "!span": "2526[128:6]-2547[128:27]"
    },
    "CubeRefractionMapping": {
      "!type": "number",
      "!span": "2561[129:6]-2582[129:27]"
    },
    "EquirectangularReflectionMapping": {
      "!type": "number",
      "!span": "2597[131:6]-2629[131:38]"
    },
    "EquirectangularRefractionMapping": {
      "!type": "number",
      "!span": "2643[132:6]-2675[132:38]"
    },
    "SphericalReflectionMapping": {
      "!type": "number",
      "!span": "2690[134:6]-2716[134:32]"
    },
    "RepeatWrapping": {
      "!type": "number",
      "!span": "2750[138:6]-2764[138:20]",
      "!doc": "Wrapping modes"
    },
    "ClampToEdgeWrapping": {
      "!type": "number",
      "!span": "2779[139:6]-2798[139:25]"
    },
    "MirroredRepeatWrapping": {
      "!type": "number",
      "!span": "2813[140:6]-2835[140:28]"
    },
    "NearestFilter": {
      "!type": "number",
      "!span": "2863[144:6]-2876[144:19]",
      "!doc": "Filters"
    },
    "NearestMipMapNearestFilter": {
      "!type": "number",
      "!span": "2891[145:6]-2917[145:32]"
    },
    "NearestMipMapLinearFilter": {
      "!type": "number",
      "!span": "2932[146:6]-2957[146:31]"
    },
    "LinearFilter": {
      "!type": "number",
      "!span": "2972[147:6]-2984[147:18]"
    },
    "LinearMipMapNearestFilter": {
      "!type": "number",
      "!span": "2999[148:6]-3024[148:31]"
    },
    "LinearMipMapLinearFilter": {
      "!type": "number",
      "!span": "3039[149:6]-3063[149:30]"
    },
    "UnsignedByteType": {
      "!type": "number",
      "!span": "3094[153:6]-3110[153:22]",
      "!doc": "Data types"
    },
    "ByteType": {
      "!type": "number",
      "!span": "3125[154:6]-3133[154:14]"
    },
    "ShortType": {
      "!type": "number",
      "!span": "3148[155:6]-3157[155:15]"
    },
    "UnsignedShortType": {
      "!type": "number",
      "!span": "3172[156:6]-3189[156:23]"
    },
    "IntType": {
      "!type": "number",
      "!span": "3204[157:6]-3211[157:13]"
    },
    "UnsignedIntType": {
      "!type": "number",
      "!span": "3226[158:6]-3241[158:21]"
    },
    "FloatType": {
      "!type": "number",
      "!span": "3256[159:6]-3265[159:15]"
    },
    "HalfFloatType": {
      "!type": "number",
      "!span": "3280[160:6]-3293[160:19]"
    },
    "UnsignedShort4444Type": {
      "!type": "number",
      "!span": "3358[165:6]-3379[165:27]",
      "!doc": "THREE.UnsignedByteType = 1009;"
    },
    "UnsignedShort5551Type": {
      "!type": "number",
      "!span": "3394[166:6]-3415[166:27]"
    },
    "UnsignedShort565Type": {
      "!type": "number",
      "!span": "3430[167:6]-3450[167:26]"
    },
    "AlphaFormat": {
      "!type": "number",
      "!span": "3484[171:6]-3495[171:17]",
      "!doc": "Pixel formats"
    },
    "RGBFormat": {
      "!type": "number",
      "!span": "3510[172:6]-3519[172:15]"
    },
    "RGBAFormat": {
      "!type": "number",
      "!span": "3534[173:6]-3544[173:16]"
    },
    "LuminanceFormat": {
      "!type": "number",
      "!span": "3559[174:6]-3574[174:21]"
    },
    "LuminanceAlphaFormat": {
      "!type": "number",
      "!span": "3589[175:6]-3609[175:26]"
    },
    "RGBEFormat": {
      "!type": "number",
      "!span": "3683[177:6]-3693[177:16]",
      "!doc": "THREE.RGBEFormat handled as THREE.RGBAFormat in shaders"
    },
    "RGB_S3TC_DXT1_Format": {
      "!type": "number",
      "!span": "3771[181:6]-3791[181:26]",
      "!doc": "DDS / ST3C Compressed texture formats"
    },
    "RGBA_S3TC_DXT1_Format": {
      "!type": "number",
      "!span": "3806[182:6]-3827[182:27]"
    },
    "RGBA_S3TC_DXT3_Format": {
      "!type": "number",
      "!span": "3842[183:6]-3863[183:27]"
    },
    "RGBA_S3TC_DXT5_Format": {
      "!type": "number",
      "!span": "3878[184:6]-3899[184:27]"
    },
    "RGB_PVRTC_4BPPV1_Format": {
      "!type": "number",
      "!span": "3953[189:6]-3976[189:29]",
      "!doc": "PVRTC compressed texture formats"
    },
    "RGB_PVRTC_2BPPV1_Format": {
      "!type": "number",
      "!span": "3991[190:6]-4014[190:29]"
    },
    "RGBA_PVRTC_4BPPV1_Format": {
      "!type": "number",
      "!span": "4029[191:6]-4053[191:30]"
    },
    "RGBA_PVRTC_2BPPV1_Format": {
      "!type": "number",
      "!span": "4068[192:6]-4092[192:30]"
    },
    "Projector": {
      "!type": "fn()",
      "!span": "4124[197:6]-4133[197:15]",
      "!doc": "DEPRECATED"
    },
    "CanvasRenderer": {
      "!type": "fn()",
      "!span": "4731[223:6]-4745[223:20]"
    },
    "CubeCamera": {
      "prototype": {
        "!span": "2319[78:17]-2328[78:26]",
        "constructor": "THREE.CubeCamera"
      },
      "!type": "fn(near: ?, far: ?, cubeResolution: ?)",
      "!span": "142[7:6]-152[7:16]",
      "!doc": "Camera for rendering cube maps - renders scene into axis-aligned cube * @author alteredq / http://alteredqualia.com/"
    },
    "OrthographicCamera": {
      "prototype": {
        "updateProjectionMatrix": {
          "!type": "fn()",
          "!span": "624[27:35]-646[27:57]"
        },
        "clone": {
          "!type": "fn() -> +THREE.OrthographicCamera",
          "!span": "1005[38:35]-1010[38:40]"
        },
        "!span": "460[24:25]-469[24:34]",
        "constructor": "THREE.OrthographicCamera"
      },
      "!type": "fn(left: number, right: number, top: number, bottom: number, near: number, far: number)",
      "!span": "63[4:6]-81[4:24]",
      "!doc": "@author alteredq / http://alteredqualia.com/",
      "zoom": {
        "!type": "number",
        "!span": "1136[44:8]-1140[44:12]"
      },
      "left": {
        "!type": "number",
        "!span": "1163[45:8]-1167[45:12]"
      },
      "right": {
        "!type": "number",
        "!span": "1189[45:34]-1194[45:39]"
      },
      "top": {
        "!type": "number",
        "!span": "1217[46:7]-1220[46:10]"
      },
      "bottom": {
        "!type": "number",
        "!span": "1241[47:4]-1247[47:10]"
      },
      "near": {
        "!type": "number",
        "!span": "1272[51:8]-1276[51:12]"
      },
      "far": {
        "!type": "number",
        "!span": "1298[52:8]-1301[52:11]"
      },
      "type": {
        "!type": "string",
        "!span": "171[4:35]-175[4:39]"
      },
      "name": {
        "!type": "string",
        "!span": "13239[540:2855]-13243[540:2859]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "13419[744:9]-13437[744:27]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "13560[749:9]-13576[749:25]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "13611[750:9]-13633[750:31]"
      },
      "visible": {
        "!type": "bool",
        "!span": "13675[540:3291]-13682[540:3298]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "13709[754:9]-13719[754:19]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "13748[755:9]-13761[755:22]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "13794[757:9]-13807[757:22]"
      },
      "id": {
        "!type": "number",
        "!span": "258[9:30]-262[9:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "310[15:36]-314[15:40]"
      },
      "renderOrder": {
        "!type": "number",
        "!span": "1490[70:6]-1501[70:17]"
      }
    },
    "PerspectiveCamera": {
      "prototype": {
        "setLens": {
          "!type": "fn(focalLength: ?, frameHeight: number)",
          "!span": "917[33:34]-924[33:41]",
          "!doc": "Uses Focal Length (in mm) to estimate and set FOV 35mm (fullframe) camera is used if frame size is not specified; Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html"
        },
        "setViewOffset": {
          "!type": "fn(fullWidth: ?, fullHeight: ?, x: ?, y: ?, width: ?, height: ?)",
          "!span": "2226[79:34]-2239[79:47]",
          "!doc": "Sets an offset in a larger frustum."
        },
        "updateProjectionMatrix": {
          "!type": "fn()",
          "!span": "2504[93:34]-2526[93:56]"
        },
        "clone": {
          "!type": "fn() -> +THREE.PerspectiveCamera",
          "!span": "3380[124:34]-3385[124:39]"
        },
        "constructor": "THREE.PerspectiveCamera"
      },
      "!type": "fn(fov: number, aspect: number, near: number, far: number)",
      "!span": "156[6:6]-173[6:23]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author greggman / http://games.greggman.com/ @author zz85 / http://www.lab4games.net/zz85/blog",
      "type": {
        "!type": "string",
        "!span": "250[9:22]-254[9:26]"
      },
      "zoom": {
        "!type": "number",
        "!span": "285[12:6]-289[12:10]"
      },
      "fov": {
        "!type": "number",
        "!span": "302[14:6]-305[14:9]"
      },
      "aspect": {
        "!type": "number",
        "!span": "344[15:6]-350[15:12]"
      },
      "near": {
        "!type": "number",
        "!span": "394[16:6]-398[16:10]"
      },
      "far": {
        "!type": "number",
        "!span": "440[17:6]-443[17:9]"
      },
      "id": {
        "!type": "number",
        "!span": "258[9:30]-262[9:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "310[15:36]-314[15:40]"
      },
      "name": {
        "!type": "string",
        "!span": "13239[540:2855]-13243[540:2859]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "13419[744:9]-13437[744:27]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "13560[749:9]-13576[749:25]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "13611[750:9]-13633[750:31]"
      },
      "visible": {
        "!type": "bool",
        "!span": "13675[540:3291]-13682[540:3298]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "13709[754:9]-13719[754:19]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "13748[755:9]-13761[755:22]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "13794[757:9]-13807[757:22]"
      },
      "renderOrder": {
        "!type": "number",
        "!span": "1490[70:6]-1501[70:17]"
      },
      "left": {
        "!type": "number",
        "!span": "12507[497:15]-12511[497:19]"
      },
      "right": {
        "!type": "number",
        "!span": "12537[498:15]-12542[498:20]"
      },
      "top": {
        "!type": "number",
        "!span": "12568[499:15]-12571[499:18]"
      },
      "bottom": {
        "!type": "number",
        "!span": "12597[500:15]-12603[500:21]"
      }
    },
    "BufferAttribute": {
      "prototype": {
        "copyAt": {
          "!type": "fn(index1: number, attribute: ?, index2: number) -> !this",
          "!span": "313[23:1]-319[23:7]"
        },
        "set": {
          "!type": "fn(value: ?, offset: number) -> !this",
          "!span": "567[38:1]-570[38:4]"
        },
        "setX": {
          "!type": "fn(index: ?, x: ?) -> !this",
          "!span": "703[48:1]-707[48:5]"
        },
        "setY": {
          "!type": "fn(index: ?, y: ?) -> !this",
          "!span": "800[56:1]-804[56:5]"
        },
        "setZ": {
          "!type": "fn(index: ?, z: ?) -> !this",
          "!span": "901[64:1]-905[64:5]"
        },
        "setXY": {
          "!type": "fn(index: number, x: ?, y: ?) -> !this",
          "!span": "1002[72:1]-1007[72:6]"
        },
        "setXYZ": {
          "!type": "fn(index: number, x: ?, y: ?, z: ?) -> !this",
          "!span": "1149[83:1]-1155[83:7]"
        },
        "setXYZW": {
          "!type": "fn(index: number, x: ?, y: ?, z: ?, w: ?) -> !this",
          "!span": "1331[95:1]-1338[95:8]"
        },
        "clone": {
          "!type": "fn() -> +THREE.BufferAttribute",
          "!span": "1548[108:1]-1553[108:6]"
        },
        "!span": "219[13:34]-1671[114:1]",
        "constructor": "THREE.BufferAttribute"
      },
      "!type": "fn(array: number, itemSize: number)",
      "!span": "54[4:6]-69[4:21]",
      "!doc": "@author mrdoob / http://mrdoob.com/",
      "array": {
        "!type": "number",
        "!span": "110[5:14]-115[5:19]",
        "!doc": "Carry the new sorted buffers locally"
      },
      "itemSize": {
        "!type": "number",
        "!span": "131[7:6]-139[7:14]"
      },
      "needsUpdate": {
        "!type": "bool",
        "!span": "159[9:6]-170[9:17]"
      },
      "numItems": {
        "!type": "number",
        "!span": "20408[872:27]-20416[872:35]"
      }
    },
    "Int8Attribute": {
      "!type": "fn(data: ?, itemSize: ?) -> +THREE.BufferAttribute",
      "!span": "1684[118:6]-1697[118:19]"
    },
    "Uint8Attribute": {
      "!type": "fn(data: ?, itemSize: ?) -> +THREE.BufferAttribute",
      "!span": "1905[125:6]-1919[125:20]"
    },
    "Uint8ClampedAttribute": {
      "!type": "fn(data: ?, itemSize: ?) -> +THREE.BufferAttribute",
      "!span": "2128[132:6]-2149[132:27]"
    },
    "Int16Attribute": {
      "!type": "fn(data: ?, itemSize: ?) -> +THREE.BufferAttribute",
      "!span": "2366[140:6]-2380[140:20]"
    },
    "Uint16Attribute": {
      "!type": "fn(data: ?, itemSize: ?) -> +THREE.BufferAttribute",
      "!span": "2589[147:6]-2604[147:21]"
    },
    "Int32Attribute": {
      "!type": "fn(data: ?, itemSize: ?) -> +THREE.BufferAttribute",
      "!span": "2814[154:6]-2828[154:20]"
    },
    "Uint32Attribute": {
      "!type": "fn(data: ?, itemSize: ?) -> +THREE.BufferAttribute",
      "!span": "3037[161:6]-3052[161:21]"
    },
    "Float32Attribute": {
      "!type": "fn(data: ?, itemSize: ?) -> +THREE.BufferAttribute",
      "!span": "3262[168:6]-3278[168:22]"
    },
    "Float64Attribute": {
      "!type": "fn(data: ?, itemSize: ?) -> +THREE.BufferAttribute",
      "!span": "3489[175:6]-3505[175:22]"
    },
    "BufferGeometry": {
      "prototype": {
        "addAttribute": {
          "!type": "fn(name: string, attribute: +THREE.BufferAttribute)",
          "!span": "567[29:1]-579[29:13]"
        },
        "getAttribute": {
          "!type": "fn(name: ?) -> !this.attributes.<i>",
          "!span": "972[46:1]-984[46:13]"
        },
        "addDrawCall": {
          "!type": "fn(start: number, count: ?, indexOffset: number)",
          "!span": "1048[52:1]-1059[52:12]"
        },
        "applyMatrix": {
          "!type": "fn(matrix: +THREE.Matrix4)",
          "!span": "1232[64:1]-1243[64:12]"
        },
        "center": {
          "!type": "fn() -> +THREE.Vector3",
          "!span": "1826[100:1]-1832[100:7]"
        },
        "fromGeometry": {
          "!type": "fn(geometry: ?, settings: THREE.BufferGeometry.prototype.fromGeometry.!1) -> !this",
          "!span": "2021[112:1]-2033[112:13]"
        },
        "computeBoundingBox": {
          "!type": "fn()",
          "!span": "5432[260:1]-5450[260:19]"
        },
        "computeBoundingSphere": {
          "!type": "fn()",
          "!span": "6367[305:1]-6388[305:22]"
        },
        "computeFaceNormals": {
          "!type": "fn()",
          "!span": "7627[361:1]-7645[361:19]"
        },
        "computeVertexNormals": {
          "!type": "fn()",
          "!span": "7698[367:1]-7718[367:21]"
        },
        "computeTangents": {
          "!type": "fn()",
          "!span": "10201[486:1]-10216[486:16]"
        },
        "computeOffsets": {
          "!type": "fn(size: number) -> [?]",
          "!span": "14407[674:1]-14421[674:15]",
          "!doc": "Compute the draw offset for large models by chunking the index buffer into chunks of 65k addressable vertices."
        },
        "merge": {
          "!type": "fn(geometry: ?, offset: number) -> !this",
          "!span": "17680[775:1]-17685[775:6]"
        },
        "normalizeNormals": {
          "!type": "fn()",
          "!span": "18483[812:1]-18499[812:17]"
        },
        "reorderBuffers": {
          "!type": "fn(indexBuffer: ?, indexMap: ?, vertexCount: number)",
          "!span": "19227[841:1]-19241[841:15]",
          "!doc": "reoderBuffers: Reorder attributes based on a new indexBuffer and indexMap."
        },
        "toJSON": {
          "!type": "fn() -> THREE.BufferGeometry.prototype.toJSON.!ret",
          "!span": "20477[876:1]-20483[876:7]"
        },
        "clone": {
          "!type": "fn() -> +THREE.BufferGeometry",
          "!span": "21383[928:1]-21388[928:6]"
        },
        "dispose": {
          "!type": "fn()",
          "!span": "21840[957:1]-21847[957:8]"
        },
        "addEventListener": {
          "!type": "fn(type: ?, listener: ?)",
          "!span": "213[12:9]-229[12:25]"
        },
        "hasEventListener": {
          "!type": "fn(type: ?, listener: ?) -> bool",
          "!span": "291[13:9]-307[13:25]"
        },
        "removeEventListener": {
          "!type": "fn(type: ?, listener: ?)",
          "!span": "369[14:9]-388[14:28]"
        },
        "dispatchEvent": {
          "!type": "fn(event: ?)",
          "!span": "453[15:9]-466[15:22]"
        },
        "!span": "526[25:33]-21915[963:1]",
        "constructor": "THREE.BufferGeometry"
      },
      "!type": "fn()",
      "!span": "102[5:6]-116[5:20]",
      "!doc": "@author alteredq / http://alteredqualia.com/ @author mrdoob / http://mrdoob.com/",
      "attributesKeys": {
        "!type": "[?]",
        "!span": "916[42:7]-930[42:21]"
      },
      "boundingBox": {
        "!type": "+THREE.Box3",
        "!span": "5576[268:9]-5587[268:20]"
      },
      "boundingSphere": {
        "!type": "+THREE.Sphere",
        "!span": "6547[78:4981]-6561[78:4995]"
      },
      "offsets": {
        "!type": "[?]",
        "!span": "17324[78:15758]-17331[78:15765]"
      },
      "id": {
        "!type": "number",
        "!span": "164[7:30]-168[7:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "216[9:6]-220[9:10]"
      },
      "name": {
        "!type": "string",
        "!span": "257[11:6]-261[11:10]"
      },
      "type": {
        "!type": "string",
        "!span": "274[12:6]-278[12:10]"
      },
      "attributes": {
        "<i>": {
          "!type": "+THREE.BufferAttribute",
          "!span": "790[35:20]-794[35:24]"
        },
        "!span": "306[14:6]-316[14:16]"
      },
      "verticesNeedUpdate": {
        "!type": "bool",
        "!span": "2170[105:56]-2188[106:4]"
      },
      "colorsNeedUpdate": {
        "!type": "bool",
        "!span": "1557[53:28]-1573[53:44]"
      }
    },
    "Clock": {
      "prototype": {
        "start": {
          "!type": "fn()",
          "!span": "312[20:1]-317[20:6]"
        },
        "stop": {
          "!type": "fn()",
          "!span": "536[30:1]-540[30:5]"
        },
        "getElapsedTime": {
          "!type": "fn() -> !this.elapsedTime",
          "!span": "613[37:1]-627[37:15]"
        },
        "getDelta": {
          "!type": "fn() -> number",
          "!span": "697[44:1]-705[44:9]"
        },
        "!span": "268[16:12]-277[16:21]",
        "constructor": "THREE.Clock"
      },
      "!type": "fn(autoStart: ?)",
      "!span": "63[4:6]-68[4:11]",
      "!doc": "@author alteredq / http://alteredqualia.com/"
    },
    "DynamicBufferAttribute": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.DynamicBufferAttribute",
          "!span": "486[16:39]-491[16:44]"
        },
        "!proto": "THREE.BufferAttribute.prototype",
        "!span": "301[13:29]-310[13:38]",
        "constructor": "THREE.DynamicBufferAttribute"
      },
      "!type": "fn(array: ?, itemSize: ?)",
      "!span": "109[5:6]-131[5:28]",
      "!doc": "@author benaadams / https://twitter.com/ben_a_adams @author mrdoob / http://mrdoob.com/",
      "updateRange": {
        "offset": {
          "!type": "number",
          "!span": "243[9:22]-249[9:28]"
        },
        "count": {
          "!type": "number",
          "!span": "254[9:33]-259[9:38]"
        },
        "!span": "227[9:6]-238[9:17]"
      }
    },
    "EventDispatcher": {
      "prototype": {
        "apply": {
          "!type": "fn(object: ?)",
          "!span": "174[10:1]-179[10:6]"
        },
        "!span": "132[6:34]-1956[106:1]",
        "constructor": "THREE.EventDispatcher",
        "addEventListener": "THREE.BufferGeometry.prototype.addEventListener",
        "hasEventListener": "THREE.BufferGeometry.prototype.hasEventListener",
        "removeEventListener": "THREE.BufferGeometry.prototype.removeEventListener",
        "dispatchEvent": "THREE.BufferGeometry.prototype.dispatchEvent"
      },
      "!type": "fn()",
      "!span": "64[4:6]-79[4:21]",
      "!doc": "https://github.com/mrdoob/eventdispatcher.js/"
    },
    "Face3": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.Face3",
          "!span": "636[27:1]-641[27:6]"
        },
        "!span": "604[23:24]-1260[58:1]",
        "constructor": "THREE.Face3"
      },
      "!type": "fn(a: number|+THREE.Vector3, b: number|+THREE.Vector3, c: number|+THREE.Vector3, normal: [+THREE.Vector3]|+THREE.Vector3, color: [+THREE.Color], materialIndex: ?)",
      "!span": "102[5:6]-107[5:11]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/",
      "vertexColors": {
        "!type": "[+THREE.Color]",
        "!span": "423[15:6]-435[15:18]"
      },
      "vertexTangents": {
        "!type": "[+THREE.Vector4]",
        "!span": "482[17:6]-496[17:20]"
      },
      "materialIndex": {
        "!type": "number",
        "!span": "791[27:89]-804[27:102]"
      },
      "__originalVertexNormals": {
        "!type": "[+THREE.Vector3]",
        "!span": "7240[342:46]-7263[342:69]"
      }
    },
    "Face4": {
      "!type": "fn(a: ?, b: ?, c: ?, d: ?, normal: ?, color: ?, materialIndex: ?) -> +THREE.Face3",
      "!span": "54[4:6]-59[4:11]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "Geometry": {
      "prototype": {
        "applyMatrix": {
          "!type": "fn(matrix: +THREE.Matrix4)",
          "!span": "1299[59:1]-1310[59:12]"
        },
        "fromBufferGeometry": {
          "!type": "fn(geometry: +THREE.PlaneBufferGeometry) -> !this",
          "!span": "2074[100:1]-2092[100:19]"
        },
        "center": {
          "!type": "fn() -> +THREE.Vector3",
          "!span": "4680[214:1]-4686[214:7]"
        },
        "computeFaceNormals": {
          "!type": "fn()",
          "!span": "4875[226:1]-4893[226:19]"
        },
        "computeVertexNormals": {
          "!type": "fn(areaWeighted: ?)",
          "!span": "5309[250:1]-5329[250:21]"
        },
        "computeMorphNormals": {
          "!type": "fn()",
          "!span": "6752[320:1]-6771[320:20]"
        },
        "computeTangents": {
          "!type": "fn()",
          "!span": "9343[437:1]-9358[437:16]"
        },
        "computeLineDistances": {
          "!type": "fn()",
          "!span": "11694[542:1]-11714[542:21]"
        },
        "computeBoundingBox": {
          "!type": "fn()",
          "!span": "11962[561:1]-11980[561:19]"
        },
        "computeBoundingSphere": {
          "!type": "fn()",
          "!span": "12139[573:1]-12160[573:22]"
        },
        "merge": {
          "!type": "fn(geometry: ?, matrix: ?, materialIndexOffset: number)",
          "!span": "12330[585:1]-12335[585:6]"
        },
        "mergeMesh": {
          "!type": "fn(mesh: ?)",
          "!span": "14539[695:1]-14548[695:10]"
        },
        "mergeVertices": {
          "!type": "fn() -> number",
          "!span": "14959[716:1]-14972[716:14]",
          "!doc": "Checks for duplicate vertices with hashmap."
        },
        "toJSON": {
          "!type": "fn() -> THREE.Geometry.prototype.toJSON.!ret",
          "!span": "16916[799:1]-16922[799:7]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Geometry",
          "!span": "20981[1000:1]-20986[1000:6]"
        },
        "dispose": {
          "!type": "fn()",
          "!span": "21869[1052:1]-21876[1052:8]"
        },
        "!span": "1264[55:27]-21944[1058:1]",
        "constructor": "THREE.Geometry",
        "addEventListener": "THREE.BufferGeometry.prototype.addEventListener",
        "hasEventListener": "THREE.BufferGeometry.prototype.hasEventListener",
        "removeEventListener": "THREE.BufferGeometry.prototype.removeEventListener",
        "dispatchEvent": "THREE.BufferGeometry.prototype.dispatchEvent"
      },
      "!type": "fn()",
      "!span": "290[9:6]-298[9:14]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author kile / http://kile.stravaganza.org/ @author alteredq / http://alteredqualia.com/ @author mikael emtinger / http://gomo.se/ @author zz85 / http://www.lab4games.net/zz85/blog @author bhouston / http://exocortex.com",
      "verticesNeedUpdate": {
        "!type": "bool",
        "!span": "970[43:6]-988[43:24]"
      },
      "normalsNeedUpdate": {
        "!type": "bool",
        "!span": "1067[46:6]-1084[46:23]"
      },
      "hasTangents": {
        "!type": "bool",
        "!span": "834[37:6]-845[37:17]"
      },
      "vertices": {
        "!type": "[+THREE.Vector3]",
        "!span": "482[18:6]-490[18:14]"
      },
      "id": {
        "!type": "number",
        "!span": "346[11:30]-350[11:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "398[13:6]-402[13:10]"
      },
      "name": {
        "!type": "string",
        "!span": "439[15:6]-443[15:10]"
      },
      "type": {
        "!type": "string",
        "!span": "456[16:6]-460[16:10]"
      },
      "dynamic": {
        "!type": "bool",
        "!span": "862[39:6]-869[39:13]"
      },
      "elementsNeedUpdate": {
        "!type": "bool",
        "!span": "1004[44:6]-1022[44:24]"
      },
      "uvsNeedUpdate": {
        "!type": "bool",
        "!span": "1038[45:6]-1051[45:19]"
      },
      "tangentsNeedUpdate": {
        "!type": "bool",
        "!span": "1100[47:6]-1118[47:24]"
      },
      "colorsNeedUpdate": {
        "!type": "bool",
        "!span": "1134[48:6]-1150[48:22]"
      },
      "lineDistancesNeedUpdate": {
        "!type": "bool",
        "!span": "1166[49:6]-1189[49:29]"
      },
      "groupsNeedUpdate": {
        "!type": "bool",
        "!span": "1206[51:6]-1222[51:22]"
      }
    },
    "GeometryIdCount": {
      "!type": "number",
      "!span": "22021[1062:6]-22036[1062:21]"
    },
    "Object3D": {
      "prototype": {
        "applyMatrix": {
          "!type": "fn(matrix: ?)",
          "!span": "2239[110:1]-2250[110:12]"
        },
        "setRotationFromAxisAngle": {
          "!type": "fn(axis: ?, angle: ?)",
          "!span": "2409[118:1]-2433[118:25]"
        },
        "setRotationFromEuler": {
          "!type": "fn(euler: ?)",
          "!span": "2554[126:1]-2574[126:21]"
        },
        "setRotationFromMatrix": {
          "!type": "fn(m: ?)",
          "!span": "2652[132:1]-2673[132:22]"
        },
        "setRotationFromQuaternion": {
          "!type": "fn(q: ?)",
          "!span": "2821[140:1]-2846[140:26]"
        },
        "rotateOnAxis": {
          "!type": "fn(axis: +THREE.Vector3, angle: ?) -> !this",
          "!span": "2932[148:1]-2944[148:13]"
        },
        "rotateX": {
          "!type": "fn(angle: ?) -> +THREE.Object3D",
          "!span": "3222[167:1]-3229[167:8]"
        },
        "rotateY": {
          "!type": "fn(angle: ?) -> +THREE.Object3D",
          "!span": "3376[179:1]-3383[179:8]"
        },
        "rotateZ": {
          "!type": "fn(angle: ?) -> +THREE.Object3D",
          "!span": "3530[191:1]-3537[191:8]"
        },
        "translateOnAxis": {
          "!type": "fn(axis: +THREE.Vector3, distance: ?) -> !this",
          "!span": "3684[203:1]-3699[203:16]"
        },
        "translate": {
          "!type": "fn(distance: ?, axis: ?) -> +THREE.Object3D",
          "!span": "4031[222:1]-4040[222:10]"
        },
        "translateX": {
          "!type": "fn(distance: ?) -> +THREE.Object3D",
          "!span": "4243[229:1]-4253[229:11]"
        },
        "translateY": {
          "!type": "fn(distance: ?) -> +THREE.Object3D",
          "!span": "4409[241:1]-4419[241:11]"
        },
        "translateZ": {
          "!type": "fn(distance: ?) -> +THREE.Object3D",
          "!span": "4575[253:1]-4585[253:11]"
        },
        "localToWorld": {
          "!type": "fn(vector: ?)",
          "!span": "4741[265:1]-4753[265:13]"
        },
        "worldToLocal": {
          "!type": "fn(vector: ?)",
          "!span": "4835[271:1]-4847[271:13]"
        },
        "lookAt": {
          "!type": "fn(vector: +THREE.Vector3)",
          "!span": "5012[283:1]-5018[283:7]"
        },
        "add": {
          "!type": "fn(object: ?) -> !this",
          "!span": "5297[299:1]-5300[299:4]"
        },
        "remove": {
          "!type": "fn(object: ?)",
          "!span": "5981[343:1]-5987[343:7]"
        },
        "getChildByName": {
          "!type": "fn(name: ?) -> +THREE.Object3D",
          "!span": "6348[369:1]-6362[369:15]"
        },
        "getObjectById": {
          "!type": "fn(id: ?) -> +THREE.Object3D",
          "!span": "6524[376:1]-6537[376:14]"
        },
        "getObjectByName": {
          "!type": "fn(name: ?) -> +THREE.Object3D",
          "!span": "6612[382:1]-6627[382:16]"
        },
        "getObjectByProperty": {
          "!type": "fn(name: string, value: ?) -> !this",
          "!span": "6708[388:1]-6727[388:20]"
        },
        "getWorldPosition": {
          "!type": "fn(optionalTarget: ?) -> +THREE.Vector3",
          "!span": "7051[409:1]-7067[409:17]"
        },
        "getWorldQuaternion": {
          "!type": "fn(optionalTarget: +THREE.Quaternion) -> !0",
          "!span": "7256[419:1]-7274[419:19]"
        },
        "getWorldRotation": {
          "!type": "fn(optionalTarget: ?) -> +THREE.Euler",
          "!span": "7591[438:1]-7607[438:17]"
        },
        "getWorldScale": {
          "!type": "fn(optionalTarget: ?) -> !0",
          "!span": "7897[454:1]-7910[454:14]"
        },
        "getWorldDirection": {
          "!type": "fn(optionalTarget: ?) -> +THREE.Vector3",
          "!span": "8237[473:1]-8254[473:18]"
        },
        "raycast": {
          "!type": "fn()",
          "!span": "8531[489:1]-8538[489:8]"
        },
        "traverse": {
          "!type": "fn(callback: ?)",
          "!span": "8558[491:1]-8566[491:9]"
        },
        "traverseVisible": {
          "!type": "fn(callback: ?)",
          "!span": "8732[503:1]-8747[503:16]"
        },
        "traverseAncestors": {
          "!type": "fn(callback: ?)",
          "!span": "8961[517:1]-8978[517:18]"
        },
        "updateMatrix": {
          "!type": "fn()",
          "!span": "9116[529:1]-9128[529:13]"
        },
        "updateMatrixWorld": {
          "!type": "fn(force: bool)",
          "!span": "9260[537:1]-9277[537:18]"
        },
        "toJSON": {
          "!type": "fn() -> THREE.Object3D.prototype.toJSON.!ret",
          "!span": "9821[569:1]-9827[569:7]"
        },
        "clone": {
          "!type": "fn(object: ?, recursive: bool) -> !0",
          "!span": "13076[731:1]-13081[731:6]"
        },
        "!span": "1619[78:27]-14090[776:1]",
        "constructor": "THREE.Object3D",
        "addEventListener": "THREE.BufferGeometry.prototype.addEventListener",
        "hasEventListener": "THREE.BufferGeometry.prototype.hasEventListener",
        "removeEventListener": "THREE.BufferGeometry.prototype.removeEventListener",
        "dispatchEvent": "THREE.BufferGeometry.prototype.dispatchEvent"
      },
      "DefaultUp": {
        "!type": "+THREE.Vector3",
        "!span": "1549[76:15]-1558[76:24]"
      },
      "!type": "fn()",
      "!span": "202[7:6]-210[7:14]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author mikael emtinger / http://gomo.se/ @author alteredq / http://alteredqualia.com/ @author WestLangley / http://github.com/WestLangley",
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "1344[62:6]-1366[62:28]"
      },
      "id": {
        "!type": "number",
        "!span": "258[9:30]-262[9:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "310[11:6]-314[11:10]"
      },
      "name": {
        "!type": "string",
        "!span": "351[13:6]-355[13:10]"
      },
      "type": {
        "!type": "string",
        "!span": "368[14:6]-372[14:10]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "1201[56:6]-1219[56:24]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "1313[61:6]-1329[61:22]"
      },
      "visible": {
        "!type": "bool",
        "!span": "1383[64:6]-1390[64:13]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "1406[66:6]-1416[66:16]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "1432[67:6]-1445[67:19]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "1462[69:6]-1475[69:19]"
      },
      "renderOrder": {
        "!type": "number",
        "!span": "1490[70:6]-1501[70:17]"
      }
    },
    "Object3DIdCount": {
      "!type": "number",
      "!span": "14167[780:6]-14182[780:21]"
    },
    "Raycaster": {
      "prototype": {
        "precision": {
          "!type": "number",
          "!span": "1011[56:2]-1020[56:11]"
        },
        "linePrecision": {
          "!type": "number",
          "!span": "1032[57:2]-1045[57:15]"
        },
        "set": {
          "!type": "fn(origin: ?, direction: ?)",
          "!span": "1053[59:2]-1056[59:5]"
        },
        "setFromCamera": {
          "!type": "fn(coords: ?, camera: ?)",
          "!span": "1221[67:2]-1234[67:15]"
        },
        "intersectObject": {
          "!type": "fn(object: ?, recursive: ?) -> [?]",
          "!span": "1857[89:2]-1872[89:17]"
        },
        "intersectObjects": {
          "!type": "fn(objects: ?, recursive: ?) -> [?]",
          "!span": "2057[101:2]-2073[101:18]"
        },
        "!span": "961[52:17]-970[52:26]",
        "constructor": "THREE.Raycaster"
      },
      "!type": "fn(origin: ?, direction: ?, near: ?, far: ?)",
      "!span": "172[8:7]-181[8:16]",
      "ray": {
        "!type": "+THREE.Ray",
        "!span": "236[10:7]-239[10:10]"
      },
      "near": {
        "!type": "number",
        "!span": "366[13:7]-370[13:11]",
        "!doc": "direction is assumed to be normalized (for accurate distance calculations)"
      },
      "far": {
        "!type": "number",
        "!span": "391[14:7]-394[14:10]"
      },
      "params": {
        "PointCloud": {
          "threshold": {
            "!type": "number",
            "!span": "478[19:17]-487[19:26]"
          },
          "!span": "464[19:3]-474[19:13]"
        },
        "!span": "422[16:7]-428[16:13]"
      }
    },
    "FontUtils": {
      "face": {
        "!type": "string",
        "!span": "647[27:1]-651[27:5]",
        "!doc": "Just for now."
      },
      "weight": {
        "!type": "string",
        "!span": "668[28:1]-674[28:7]"
      },
      "style": {
        "!type": "string",
        "!span": "687[29:1]-692[29:6]"
      },
      "size": {
        "!type": "number",
        "!span": "705[30:1]-709[30:5]"
      },
      "divisions": {
        "!type": "number",
        "!span": "717[31:1]-726[31:10]"
      },
      "getFace": {
        "!type": "fn()",
        "!span": "734[33:1]-741[33:8]"
      },
      "loadFace": {
        "!type": "fn(data: ?) -> !0",
        "!span": "973[47:1]-981[47:9]"
      },
      "drawText": {
        "!type": "fn(text: ?) -> THREE.FontUtils.drawText.!ret",
        "!span": "1429[64:1]-1437[64:9]"
      },
      "extractGlyphPoints": {
        "!type": "fn(c: string, face: ?, scale: number, offset: number, path: +THREE.Path) -> THREE.FontUtils.extractGlyphPoints.!ret",
        "!span": "2221[111:1]-2239[111:19]"
      },
      "generateShapes": {
        "!type": "fn(text: ?, parameters: THREE.ExtrudeGeometry.!1) -> [?]",
        "!span": "4534[233:16]-4548[233:30]"
      },
      "Triangulate": {
        "area": {
          "!type": "fn(contour: [+THREE.Vector2]) -> number",
          "!span": "9411[459:23]-9415[459:27]",
          "!doc": "calculate area of the contour polygon"
        },
        "!type": "fn(contour: [?], indices: bool) -> [[number]]",
        "!span": "9365[458:11]-9376[458:22]",
        "!doc": "takes in an contour array and returns"
      },
      "!span": "579[21:6]-588[21:15]",
      "!doc": "@author zz85 / http://www.lab4games.net/zz85/blog @author alteredq / http://alteredqualia.com/ * For Text operations in three.js (See TextGeometry) * It uses techniques used in: * typeface.js and canvastext For converting fonts and rendering with javascript http://typeface.neocracy.org * Triangulation ported from AS3 Simple Polygon Triangulation http://actionsnippet.com/?p=1462 * A Method to triangulate shapes with holes http://www.sakri.net/blog/2009/06/12/an-approach-to-triangulating-polygons-with-holes/ "
    },
    "GeometryUtils": {
      "merge": {
        "!type": "fn(geometry1: ?, geometry2: ?, materialIndexOffset: ?)",
        "!span": "74[6:1]-79[6:6]"
      },
      "center": {
        "!type": "fn(geometry: ?)",
        "!span": "545[25:1]-551[25:7]"
      },
      "!span": "54[4:6]-67[4:19]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "ImageUtils": {
      "loadTexture": {
        "!type": "fn(url: ?, mapping: ?, onLoad: ?, onError: ?) -> ?",
        "!span": "201[10:1]-212[10:12]"
      },
      "loadTextureCube": {
        "!type": "fn(array: ?, mapping: ?, onLoad: ?, onError: ?) -> +THREE.CubeTexture",
        "!span": "674[36:1]-689[36:16]"
      },
      "loadCompressedTexture": {
        "!type": "fn()",
        "!span": "1377[81:1]-1398[81:22]"
      },
      "loadCompressedTextureCube": {
        "!type": "fn()",
        "!span": "1527[87:1]-1552[87:26]"
      },
      "getNormalMap": {
        "!type": "fn(image: ?, depth: number)",
        "!span": "1685[93:1]-1697[93:13]"
      },
      "generateDataTexture": {
        "!type": "fn(width: ?, height: ?, color: ?) -> +THREE.DataTexture",
        "!span": "4566[196:1]-4585[196:20]"
      },
      "!span": "158[6:6]-168[6:16]",
      "!doc": "@author alteredq / http://alteredqualia.com/ @author mrdoob / http://mrdoob.com/ @author Daosheng Mu / https://github.com/DaoshengMu/"
    },
    "SceneUtils": {
      "createMultiMaterialObject": {
        "!type": "fn(geometry: ?, materials: ?) -> +THREE.Object3D",
        "!span": "80[6:1]-105[6:26]"
      },
      "detach": {
        "!type": "fn(child: ?, parent: ?, scene: ?)",
        "!span": "327[20:1]-333[20:7]"
      },
      "attach": {
        "!type": "fn(child: ?, scene: ?, parent: ?)",
        "!span": "470[28:1]-476[28:7]"
      },
      "!span": "63[4:6]-73[4:16]",
      "!doc": "@author alteredq / http://alteredqualia.com/"
    },
    "Animation": {
      "prototype": {
        "keyTypes": {
          "!type": "[string]",
          "!span": "546[27:1]-554[27:9]"
        },
        "play": {
          "!type": "fn(startTime: ?, weight: ?)",
          "!span": "584[29:1]-588[29:5]"
        },
        "stop": {
          "!type": "fn()",
          "!span": "827[42:1]-831[42:5]"
        },
        "reset": {
          "!type": "fn()",
          "!span": "920[50:1]-925[50:6]"
        },
        "resetBlendWeights": {
          "!type": "fn()",
          "!span": "2143[109:1]-2160[109:18]"
        },
        "update": {
          "!type": "fn(delta: ?) -> bool",
          "!span": "2536[130:1]-2542[130:7]"
        },
        "getNextKeyWith": {
          "!type": "fn(type: string, h: number, key: number)",
          "!span": "8562[346:1]-8576[346:15]"
        },
        "getPrevKeyWith": {
          "!type": "fn(type: string, h: number, key: number)",
          "!span": "9080[375:1]-9094[375:15]"
        },
        "!span": "498[23:16]-507[23:25]",
        "constructor": "THREE.Animation"
      },
      "!type": "fn(root: ?, data: ?)",
      "!span": "147[6:6]-156[6:15]",
      "!doc": "@author mikael emtinger / http://gomo.se/ @author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/",
      "hierarchy": {
        "!type": "[?]",
        "!span": "261[10:6]-270[10:15]"
      },
      "currentTime": {
        "!type": "number",
        "!span": "318[12:6]-329[12:17]"
      },
      "timeScale": {
        "!type": "number",
        "!span": "341[13:6]-350[13:15]"
      },
      "isPlaying": {
        "!type": "bool",
        "!span": "363[15:6]-372[15:15]"
      },
      "loop": {
        "!type": "bool",
        "!span": "388[16:6]-392[16:10]"
      },
      "weight": {
        "!type": "number",
        "!span": "407[17:6]-413[17:12]"
      },
      "interpolationType": {
        "!type": "number",
        "!span": "426[19:6]-443[19:23]"
      }
    },
    "AnimationHandler": {
      "LINEAR": {
        "!type": "number",
        "!span": "83[6:1]-89[6:7]"
      },
      "CATMULLROM": {
        "!type": "number",
        "!span": "95[7:1]-105[7:11]"
      },
      "CATMULLROM_FORWARD": {
        "!type": "number",
        "!span": "111[8:1]-129[8:19]"
      },
      "add": {
        "!type": "fn()",
        "!span": "141[12:1]-144[12:4]"
      },
      "get": {
        "!type": "fn()",
        "!span": "231[13:1]-234[13:4]"
      },
      "remove": {
        "!type": "fn()",
        "!span": "321[14:1]-327[14:7]"
      },
      "animations": {
        "!type": "[+THREE.Animation]",
        "!span": "423[18:1]-433[18:11]"
      },
      "init": {
        "!type": "fn(data: ?) -> !0",
        "!span": "441[20:1]-445[20:5]"
      },
      "parse": {
        "!type": "fn(root: ?) -> [!0]",
        "!span": "2850[136:1]-2855[136:6]"
      },
      "play": {
        "!type": "fn(animation: +THREE.Animation)",
        "!span": "3386[169:1]-3390[169:5]"
      },
      "stop": {
        "!type": "fn(animation: +THREE.Animation)",
        "!span": "3525[179:1]-3529[179:5]"
      },
      "update": {
        "!type": "fn(deltaTimeMS: ?)",
        "!span": "3687[191:1]-3693[191:7]"
      },
      "!span": "60[4:6]-76[4:22]",
      "!doc": "@author mikael emtinger / http://gomo.se/"
    },
    "KeyFrameAnimation": {
      "prototype": {
        "play": {
          "!type": "fn(startTime: ?)",
          "!span": "1114[56:1]-1118[56:5]"
        },
        "stop": {
          "!type": "fn()",
          "!span": "2102[108:1]-2106[108:5]"
        },
        "update": {
          "!type": "fn(delta: number)",
          "!span": "2606[137:1]-2612[137:7]"
        },
        "getNextKeyWith": {
          "!type": "fn(sid: ?, h: number, key: number)",
          "!span": "3832[202:1]-3846[202:15]"
        },
        "getPrevKeyWith": {
          "!type": "fn(sid: ?, h: ?, key: ?)",
          "!span": "4094[221:1]-4108[221:15]"
        },
        "!span": "1058[52:24]-1067[52:33]",
        "constructor": "THREE.KeyFrameAnimation"
      },
      "!type": "fn(data: ?)",
      "!span": "193[8:6]-210[8:23]",
      "!doc": "@author mikael emtinger / http://gomo.se/ @author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/ @author khang duong @author erik kitson"
    },
    "MorphAnimation": {
      "prototype": {
        "play": {
          "!type": "fn()",
          "!span": "425[23:1]-429[23:5]"
        },
        "pause": {
          "!type": "fn()",
          "!span": "478[29:1]-483[29:6]"
        },
        "update": {
          "!type": "fn(delta: ?)",
          "!span": "533[35:1]-539[35:7]"
        },
        "!span": "372[19:21]-381[19:30]",
        "constructor": "THREE.MorphAnimation"
      },
      "!type": "fn(mesh: ?)",
      "!span": "103[5:6]-117[5:20]",
      "!doc": "@author mrdoob / http://mrdoob.com @author willy-vvu / http://willy-vvu.github.io"
    },
    "Audio": {
      "prototype": {
        "load": {
          "!type": "fn(file: ?) -> !this",
          "!span": "658[30:22]-662[30:26]"
        },
        "play": {
          "!type": "fn()",
          "!span": "1069[54:22]-1073[54:26]"
        },
        "pause": {
          "!type": "fn()",
          "!span": "1502[77:22]-1507[77:27]"
        },
        "stop": {
          "!type": "fn()",
          "!span": "1617[84:22]-1621[84:26]"
        },
        "onEnded": {
          "!type": "fn()",
          "!span": "1708[91:22]-1715[91:29]"
        },
        "setLoop": {
          "!type": "fn(value: ?)",
          "!span": "1784[97:22]-1791[97:29]"
        },
        "setRefDistance": {
          "!type": "fn(value: ?)",
          "!span": "1870[103:22]-1884[103:36]"
        },
        "setRolloffFactor": {
          "!type": "fn(value: ?)",
          "!span": "1970[109:22]-1986[109:38]"
        },
        "setVolume": {
          "!type": "fn(value: ?)",
          "!span": "2074[115:22]-2083[115:31]"
        },
        "updateMatrixWorld": {
          "!type": "fn(force: ?)",
          "!span": "2166[121:22]-2183[121:39]"
        },
        "!proto": "THREE.Object3D.prototype",
        "!span": "531[27:12]-540[27:21]",
        "constructor": "THREE.Audio"
      },
      "!type": "fn(listener: ?)",
      "!span": "54[4:6]-59[4:11]",
      "!doc": "@author mrdoob / http://mrdoob.com/",
      "type": {
        "!type": "string",
        "!span": "124[8:6]-128[8:10]"
      },
      "autoplay": {
        "!type": "bool",
        "!span": "449[20:6]-457[20:14]"
      },
      "startTime": {
        "!type": "number",
        "!span": "474[22:6]-483[22:15]"
      },
      "isPlaying": {
        "!type": "bool",
        "!span": "495[23:6]-504[23:15]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "9619[553:8]-9641[553:30]"
      }
    },
    "AudioListener": {
      "prototype": {
        "updateMatrixWorld": {
          "!type": "fn(force: ?)",
          "!span": "399[17:30]-416[17:47]"
        },
        "!proto": "THREE.Object3D.prototype",
        "!span": "248[14:20]-257[14:29]",
        "constructor": "THREE.AudioListener"
      },
      "!type": "fn()",
      "!span": "54[4:6]-67[4:19]",
      "!doc": "@author mrdoob / http://mrdoob.com/",
      "type": {
        "!type": "string",
        "!span": "122[8:6]-126[8:10]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "9619[553:8]-9641[553:30]"
      }
    },
    "Curve": {
      "prototype": {
        "getPoint": {
          "!type": "fn(t: number)",
          "!span": "997[43:22]-1005[43:30]",
          "!doc": "Virtual base class method to overwrite and implement in subclasses - t [0 .."
        },
        "getPointAt": {
          "!type": "fn(u: number)",
          "!span": "1219[53:22]-1229[53:32]",
          "!doc": "Get point at relative position in curve according to arc length - u [0 .."
        },
        "getPoints": {
          "!type": "fn(divisions: number) -> [?]",
          "!span": "1387[62:22]-1396[62:31]",
          "!doc": "Get sequence of points using getPoint( t )"
        },
        "getSpacedPoints": {
          "!type": "fn(divisions: number) -> [?]",
          "!span": "1660[80:22]-1675[80:37]",
          "!doc": "Get sequence of points using getPointAt( u )"
        },
        "getLength": {
          "!type": "fn() -> number",
          "!span": "1923[98:22]-1932[98:31]",
          "!doc": "approximate length by summing linear segments"
        },
        "getLengths": {
          "!type": "fn(divisions: number) -> [number]",
          "!span": "2093[107:22]-2103[107:32]",
          "!doc": "Get list of cumulative segment lengths"
        },
        "updateArcLengths": {
          "!type": "fn()",
          "!span": "2847[144:22]-2863[144:38]"
        },
        "getUtoTmapping": {
          "!type": "fn(u: number, distance: ?) -> number",
          "!span": "3040[151:22]-3054[151:36]",
          "!doc": "Given u ( 0 .."
        },
        "getTangent": {
          "!type": "fn(t: number)",
          "!span": "4752[235:22]-4762[235:32]",
          "!doc": "Returns a unit vector tangent at t In case any sub curve does not implement its tangent derivation, 2 points a small delta apart will be used to find its gradient which seems to give a reasonable approximation"
        },
        "getTangentAt": {
          "!type": "fn(u: ?)",
          "!span": "5075[255:22]-5087[255:34]"
        }
      },
      "Utils": {
        "tangentQuadraticBezier": {
          "!type": "fn(t: ?, p0: number, p1: number, p2: number) -> number",
          "!span": "5345[272:1]-5367[272:23]"
        },
        "tangentCubicBezier": {
          "!type": "fn(t: ?, p0: number, p1: number, p2: number, p3: number) -> number",
          "!span": "5523[280:1]-5541[280:19]",
          "!doc": "Puay Bing, thanks for helping with this derivative!"
        },
        "tangentSpline": {
          "!type": "fn(t: ?, p0: ?, p1: ?, p2: ?, p3: ?) -> number",
          "!span": "5742[289:1]-5755[289:14]"
        },
        "interpolate": {
          "!type": "fn(p0: number, p1: number, p2: number, p3: number, t: number) -> number",
          "!span": "6098[304:1]-6109[304:12]",
          "!doc": "Catmull-Rom"
        },
        "!span": "5333[270:12]-5338[270:17]",
        "!doc": "Utils ************************************************************"
      },
      "create": {
        "!type": "fn(constructor: ?, getPointFunc: fn(t: ?) -> +THREE.Vector3|fn(t: ?) -> +THREE.Vector3)",
        "!span": "6600[325:12]-6606[325:18]",
        "!doc": "A Factory method for creating new curve subclasses"
      },
      "!type": "fn()",
      "!span": "861[36:6]-866[36:11]",
      "!doc": "Abstract Curve base class ************************************************************",
      "needsUpdate": {
        "!type": "bool",
        "!span": "2432[120:6]-2443[120:17]"
      }
    },
    "CurvePath": {
      "prototype": {
        "add": {
          "!type": "fn(curve: ?)",
          "!span": "586[21:26]-589[21:29]"
        },
        "checkConnection": {
          "!type": "fn()",
          "!span": "673[27:26]-688[27:41]"
        },
        "closePath": {
          "!type": "fn()",
          "!span": "856[33:26]-865[33:35]"
        },
        "getPoint": {
          "!type": "fn(t: number)",
          "!span": "1522[55:26]-1530[55:34]",
          "!doc": "1. Length of each sub path have to be known 2. Locate and identify type of curve 3. Get t for the curve 4. Return curve.getPointAt(t')"
        },
        "getLength": {
          "!type": "fn() -> number",
          "!span": "2264[95:26]-2273[95:35]",
          "!doc": "We cannot use the default THREE.Curve getPoint() with getLength() because in THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath getPoint() depends on getLength"
        },
        "getCurveLengths": {
          "!type": "fn() -> [number]",
          "!span": "2491[105:26]-2506[105:41]",
          "!doc": "Compute lengths and cache them We cannot overwrite getLengths() because UtoT mapping uses it."
        },
        "getBoundingBox": {
          "!type": "fn() -> THREE.CurvePath.prototype.getBoundingBox.!ret",
          "!span": "3044[138:26]-3058[138:40]",
          "!doc": "Returns min and max coordinates"
        },
        "createPointsGeometry": {
          "!type": "fn(divisions: ?) -> +THREE.Geometry",
          "!span": "4092[201:26]-4112[201:46]"
        },
        "createSpacedPointsGeometry": {
          "!type": "fn(divisions: ?) -> +THREE.Geometry",
          "!span": "4317[210:26]-4343[210:52]",
          "!doc": "Generate geometry from equidistance sampling along the path"
        },
        "createGeometry": {
          "!type": "fn(points: [?]) -> +THREE.Geometry",
          "!span": "4490[217:26]-4504[217:40]"
        },
        "addWrapPath": {
          "!type": "fn(bendpath: ?)",
          "!span": "4960[238:26]-4971[238:37]",
          "!doc": "Wrap path / Bend modifiers?"
        },
        "getTransformedPoints": {
          "!type": "fn(segments: number, bends: [?]) -> [?]",
          "!span": "5060[244:26]-5080[244:46]"
        },
        "getTransformedSpacedPoints": {
          "!type": "fn(segments: number, bends: [?]) -> [?]",
          "!span": "5400[265:26]-5426[265:52]"
        },
        "getWrapPoints": {
          "!type": "fn(oldPts: [?], path: ?) -> !0",
          "!span": "5866[290:26]-5879[290:39]"
        },
        "!proto": "THREE.Curve.prototype",
        "!span": "450[18:16]-459[18:25]",
        "constructor": "THREE.CurvePath"
      },
      "!type": "fn()",
      "!span": "306[10:6]-315[10:15]",
      "!doc": "Curved Path - a curve path is simply a array of connected curves, but retains the api of a curve ************************************************************"
    },
    "Gyroscope": {
      "prototype": {
        "updateMatrixWorld": {
          "!type": "fn(force: bool)",
          "!span": "292[13:26]-309[13:43]"
        },
        "!proto": "THREE.Object3D.prototype",
        "!span": "151[10:16]-160[10:25]",
        "constructor": "THREE.Gyroscope"
      },
      "!type": "fn()",
      "!span": "67[4:6]-76[4:15]",
      "!doc": "@author alteredq / http://alteredqualia.com/"
    },
    "Path": {
      "prototype": {
        "fromPoints": {
          "!type": "fn(vectors: ?)",
          "!span": "829[39:21]-839[39:31]",
          "!doc": "Create path using straight lines to connect all points - vectors: array of Vector2"
        },
        "moveTo": {
          "!type": "fn(x: number, y: number)",
          "!span": "1083[53:21]-1089[53:27]",
          "!doc": "startPath() endPath()?"
        },
        "lineTo": {
          "!type": "fn(x: number, y: number)",
          "!span": "1265[60:21]-1271[60:27]"
        },
        "quadraticCurveTo": {
          "!type": "fn(aCPx: number, aCPy: number, aX: number, aY: number)",
          "!span": "1719[76:21]-1735[76:37]"
        },
        "bezierCurveTo": {
          "!type": "fn(aCP1x: number, aCP1y: number, aCP2x: number, aCP2y: number, aX: number, aY: number)",
          "!span": "2277[94:21]-2290[94:34]"
        },
        "splineThru": {
          "!type": "fn(pts: ?)",
          "!span": "2915[115:21]-2925[115:31]"
        },
        "arc": {
          "!type": "fn(aX: ?, aY: ?, aRadius: ?, aStartAngle: ?, aEndAngle: ?, aClockwise: ?)",
          "!span": "3489[135:21]-3492[135:24]",
          "!doc": "FUTURE: Change the API or follow canvas API?"
        },
        "absarc": {
          "!type": "fn(aX: ?, aY: ?, aRadius: ?, aStartAngle: ?, aEndAngle: ?, aClockwise: ?)",
          "!span": "3830[147:22]-3836[147:28]"
        },
        "ellipse": {
          "!type": "fn(aX: ?, aY: ?, xRadius: ?, yRadius: ?, aStartAngle: ?, aEndAngle: ?, aClockwise: ?)",
          "!span": "4023[152:21]-4030[152:28]"
        },
        "absellipse": {
          "!type": "fn(aX: ?, aY: ?, xRadius: ?, yRadius: ?, aStartAngle: ?, aEndAngle: ?, aClockwise: ?)",
          "!span": "4390[165:21]-4400[165:31]"
        },
        "getSpacedPoints": {
          "!type": "fn(divisions: number, closedPath: ?) -> [?]",
          "!span": "4870[181:21]-4885[181:36]"
        },
        "getPoints": {
          "!type": "fn(divisions: number, closedPath: ?) -> [+THREE.Vector2]",
          "!span": "5312[207:21]-5321[207:30]",
          "!doc": "Return an array of vectors based on contour of the path"
        },
        "toShapes": {
          "!type": "fn(isCCW: ?, noHoles: ?) -> [?]",
          "!span": "9836[451:21]-9844[451:29]",
          "!doc": "Breaks path into shapes Assumptions (if parameter isCCW==true the opposite holds): - solid shapes are defined clockwise (CW) - holes are defined counterclockwise (CCW) If parameter noHoles==true: - all subPaths are regarded as solid shapes - definition order CW/CCW has no relevance"
        },
        "!proto": "THREE.CurvePath.prototype",
        "constructor": "THREE.Path"
      },
      "!type": "fn(points: ?)",
      "!span": "142[6:6]-146[6:10]",
      "!doc": "@author zz85 / http://www.lab4games.net/zz85/blog Creates free form 2d path using series of points, lines or curves.",
      "actions": {
        "!type": "[?]",
        "!span": "208[10:6]-215[10:13]"
      },
      "curves": {
        "!type": "[?]",
        "!span": "339[12:6]-345[12:12]"
      },
      "bends": {
        "!type": "[?]",
        "!span": "358[13:6]-363[13:11]"
      },
      "autoClose": {
        "!type": "bool",
        "!span": "378[15:6]-387[15:15]"
      },
      "cacheLengths": {
        "!type": "[number]",
        "!span": "2933[128:6]-2945[128:18]",
        "!doc": "Get length of subsurve Push sums into cached array"
      }
    },
    "PathActions": {
      "MOVE_TO": {
        "!type": "string",
        "!span": "418[25:1]-425[25:8]"
      },
      "LINE_TO": {
        "!type": "string",
        "!span": "438[26:1]-445[26:8]"
      },
      "QUADRATIC_CURVE_TO": {
        "!type": "string",
        "!span": "458[27:1]-476[27:19]"
      },
      "BEZIER_CURVE_TO": {
        "!type": "string",
        "!span": "525[28:1]-540[28:16]"
      },
      "CSPLINE_THRU": {
        "!type": "string",
        "!span": "584[29:1]-596[29:13]"
      },
      "ARC": {
        "!type": "string",
        "!span": "638[30:1]-641[30:4]"
      },
      "ELLIPSE": {
        "!type": "string",
        "!span": "668[31:1]-675[31:8]"
      },
      "!span": "400[23:6]-411[23:17]"
    },
    "Shape": {
      "prototype": {
        "extrude": {
          "!type": "fn(options: ?) -> ?|+THREE.ExtrudeGeometry",
          "!span": "594[23:22]-601[23:29]",
          "!doc": "Convenience method to return ExtrudeGeometry"
        },
        "makeGeometry": {
          "!type": "fn(options: ?) -> ?|+THREE.ShapeGeometry",
          "!span": "780[32:22]-792[32:34]",
          "!doc": "Convenience method to return ShapeGeometry"
        },
        "getPointsHoles": {
          "!type": "fn(divisions: number) -> [[?]]",
          "!span": "946[41:22]-960[41:36]",
          "!doc": "Get points of holes"
        },
        "getSpacedPointsHoles": {
          "!type": "fn(divisions: number) -> [[?]]",
          "!span": "1253[57:22]-1273[57:42]",
          "!doc": "Get points of holes (spaced by regular distance)"
        },
        "extractAllPoints": {
          "!type": "fn(divisions: number) -> THREE.Shape.prototype.extractAllPoints.!ret",
          "!span": "1594[74:22]-1610[74:38]",
          "!doc": "Get points of shape and holes (keypoints based on segments parameter)"
        },
        "extractPoints": {
          "!type": "fn(divisions: number) -> THREE.Shape.prototype.extractAllPoints.!ret",
          "!span": "1773[85:22]-1786[85:35]"
        },
        "extractAllSpacedPoints": {
          "!type": "fn(divisions: number) -> THREE.Shape.prototype.extractPoints.!ret",
          "!span": "2252[109:22]-2274[109:44]",
          "!doc": "Get points of shape and holes (spaced by regular distance)"
        },
        "!proto": "THREE.Path.prototype",
        "constructor": "THREE.Shape"
      },
      "Utils": {
        "triangulateShape": {
          "!type": "fn(contour: [?], holes: [[?]]) -> [[number]]",
          "!span": "2590[126:1]-2606[126:17]"
        },
        "isClockWise": {
          "!type": "fn(pts: [+THREE.Vector2]) -> bool",
          "!span": "15196[504:1]-15207[504:12]"
        },
        "b2p0": {
          "!type": "fn(t: number, p: number) -> number",
          "!span": "15410[515:1]-15414[515:5]",
          "!doc": "Quad Bezier Functions"
        },
        "b2p1": {
          "!type": "fn(t: number, p: number) -> number",
          "!span": "15481[522:1]-15485[522:5]"
        },
        "b2p2": {
          "!type": "fn(t: number, p: number) -> number",
          "!span": "15547[528:1]-15551[528:5]"
        },
        "b2": {
          "!type": "fn(t: number, p0: number, p1: number, p2: number) -> number",
          "!span": "15601[534:1]-15603[534:3]"
        },
        "b3p0": {
          "!type": "fn(t: number, p: number) -> number",
          "!span": "15741[542:1]-15745[542:5]",
          "!doc": "Cubic Bezier Functions"
        },
        "b3p1": {
          "!type": "fn(t: number, p: number) -> number",
          "!span": "15816[549:1]-15820[549:5]"
        },
        "b3p2": {
          "!type": "fn(t: number, p: number) -> number",
          "!span": "15895[556:1]-15899[556:5]"
        },
        "b3p3": {
          "!type": "fn(t: number, p: number) -> number",
          "!span": "15974[563:1]-15978[563:5]"
        },
        "b3": {
          "!type": "fn(t: number, p0: number, p1: number, p2: number, p3: number) -> number",
          "!span": "16032[569:1]-16034[569:3]"
        },
        "!span": "2578[124:12]-2583[124:17]",
        "!doc": "Utils ************************************************************"
      },
      "!type": "fn()",
      "!span": "326[11:6]-331[11:11]",
      "!doc": "STEP 1 Create a path.",
      "holes": {
        "!type": "[+THREE.Path]",
        "!span": "393[14:6]-398[14:11]"
      },
      "autoClose": {
        "!type": "bool",
        "!span": "378[15:6]-387[15:15]"
      }
    },
    "ArcCurve": {
      "prototype": {
        "!span": "343[9:15]-352[9:24]",
        "constructor": "THREE.ArcCurve"
      },
      "!type": "fn(aX: ?, aY: ?, aRadius: ?, aStartAngle: ?, aEndAngle: ?, aClockwise: ?)",
      "!span": "149[4:6]-157[4:14]",
      "!doc": "Arc curve ************************************************************"
    },
    "ClosedSplineCurve3": {
      "prototype": {
        "getPoint": {
          "!type": "fn(t: ?) -> +THREE.Vector3",
          "!span": "6789[329:23]-6797[329:31]"
        },
        "!proto": "THREE.Curve.prototype",
        "!span": "6664[327:13]-6673[327:22]",
        "constructor": "THREE.ClosedSplineCurve3"
      },
      "!type": "fn(points: ?)",
      "!span": "163[5:6]-181[5:24]"
    },
    "CubicBezierCurve": {
      "prototype": {
        "getPoint": {
          "!type": "fn(t: ?) -> +THREE.Vector2",
          "!span": "453[16:33]-461[16:41]"
        },
        "getTangent": {
          "!type": "fn(t: ?) -> +THREE.Vector2",
          "!span": "726[27:33]-736[27:43]"
        },
        "!proto": "THREE.Curve.prototype",
        "constructor": "THREE.CubicBezierCurve"
      },
      "!type": "fn(v0: +THREE.Vector2, v1: +THREE.Vector2, v2: +THREE.Vector2, v3: +THREE.Vector2)",
      "!span": "158[4:6]-174[4:22]",
      "!doc": "Cubic Bezier curve ************************************************************"
    },
    "CubicBezierCurve3": {
      "prototype": {
        "getPoint": {
          "!type": "fn(t: ?) -> +THREE.Vector3",
          "!span": "6789[329:23]-6797[329:31]"
        },
        "!proto": "THREE.Curve.prototype",
        "!span": "6664[327:13]-6673[327:22]",
        "constructor": "THREE.CubicBezierCurve3"
      },
      "!type": "fn(v0: ?, v1: ?, v2: ?, v3: ?)",
      "!span": "161[4:6]-178[4:23]",
      "!doc": "Cubic Bezier 3D curve ************************************************************"
    },
    "EllipseCurve": {
      "prototype": {
        "getPoint": {
          "!type": "fn(t: ?) -> +THREE.Vector2",
          "!span": "590[22:29]-598[22:37]"
        },
        "!proto": "THREE.Curve.prototype",
        "constructor": "THREE.EllipseCurve"
      },
      "!type": "fn(aX: ?, aY: ?, xRadius: ?, yRadius: ?, aStartAngle: ?, aEndAngle: ?, aClockwise: ?)",
      "!span": "153[4:6]-165[4:18]",
      "!doc": "Ellipse curve ************************************************************"
    },
    "LineCurve": {
      "prototype": {
        "getPoint": {
          "!type": "fn(t: ?) -> +THREE.Vector2",
          "!span": "366[14:26]-374[14:34]"
        },
        "getPointAt": {
          "!type": "fn(u: ?) -> +THREE.Vector2",
          "!span": "593[25:26]-603[25:36]",
          "!doc": "Line curve is linear, so we can overwrite default getPointAt"
        },
        "getTangent": {
          "!type": "fn(t: ?) -> +THREE.Vector2",
          "!span": "683[31:26]-693[31:36]"
        },
        "!proto": "THREE.Curve.prototype",
        "constructor": "THREE.LineCurve"
      },
      "!type": "fn(v1: +THREE.Vector2, v2: +THREE.Vector2)",
      "!span": "144[4:6]-153[4:15]",
      "!doc": "Line ************************************************************",
      "needsUpdate": {
        "!type": "bool",
        "!span": "2432[120:6]-2443[120:17]"
      }
    },
    "LineCurve3": {
      "prototype": {
        "getPoint": {
          "!type": "fn(t: ?) -> +THREE.Vector3",
          "!span": "6789[329:23]-6797[329:31]"
        },
        "!proto": "THREE.Curve.prototype",
        "!span": "6664[327:13]-6673[327:22]",
        "constructor": "THREE.LineCurve3"
      },
      "!type": "fn(v1: ?, v2: ?)",
      "!span": "146[4:6]-156[4:16]",
      "!doc": "Line3D ************************************************************"
    },
    "QuadraticBezierCurve": {
      "prototype": {
        "getPoint": {
          "!type": "fn(t: ?) -> +THREE.Vector2",
          "!span": "460[17:37]-468[17:45]"
        },
        "getTangent": {
          "!type": "fn(t: ?) -> +THREE.Vector2",
          "!span": "729[29:37]-739[29:47]"
        },
        "!proto": "THREE.Curve.prototype",
        "constructor": "THREE.QuadraticBezierCurve"
      },
      "!type": "fn(v0: +THREE.Vector2, v1: +THREE.Vector2, v2: +THREE.Vector2)",
      "!span": "163[5:6]-183[5:26]",
      "needsUpdate": {
        "!type": "bool",
        "!span": "2432[120:6]-2443[120:17]"
      }
    },
    "QuadraticBezierCurve3": {
      "prototype": {
        "getPoint": {
          "!type": "fn(t: ?) -> +THREE.Vector3",
          "!span": "6789[329:23]-6797[329:31]"
        },
        "!proto": "THREE.Curve.prototype",
        "!span": "6664[327:13]-6673[327:22]",
        "constructor": "THREE.QuadraticBezierCurve3"
      },
      "!type": "fn(v0: ?, v1: ?, v2: ?)",
      "!span": "165[4:6]-186[4:27]",
      "!doc": "Quadratic Bezier 3D curve ************************************************************"
    },
    "SplineCurve": {
      "prototype": {
        "getPoint": {
          "!type": "fn(t: ?) -> +THREE.Vector2",
          "!span": "431[13:28]-439[13:36]"
        },
        "!proto": "THREE.Curve.prototype",
        "constructor": "THREE.SplineCurve"
      },
      "!type": "fn(points: [+THREE.Vector2])",
      "!span": "152[4:6]-163[4:17]",
      "!doc": "Spline curve ************************************************************",
      "points": {
        "!type": "[+THREE.Vector2]",
        "!span": "218[6:6]-224[6:12]"
      },
      "needsUpdate": {
        "!type": "bool",
        "!span": "2432[120:6]-2443[120:17]"
      },
      "cacheArcLengths": {
        "!type": "[number]",
        "!span": "2721[137:6]-2736[137:21]"
      }
    },
    "SplineCurve3": {
      "prototype": {
        "getPoint": {
          "!type": "fn(t: ?) -> +THREE.Vector3",
          "!span": "6789[329:23]-6797[329:31]"
        },
        "!proto": "THREE.Curve.prototype",
        "!span": "6664[327:13]-6673[327:22]",
        "constructor": "THREE.SplineCurve3"
      },
      "!type": "fn(points: ?)",
      "!span": "156[5:6]-168[5:18]"
    },
    "BoxGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "3465[125:18]-3474[125:27]",
        "constructor": "THREE.BoxGeometry"
      },
      "!type": "fn(width: number, height: number, depth: number, widthSegments: ?, heightSegments: ?, depthSegments: ?)",
      "!span": "171[5:6]-182[5:17]",
      "!doc": "@author mrdoob / http://mrdoob.com/ based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as",
      "type": {
        "!type": "string",
        "!span": "305[9:6]-309[9:10]"
      },
      "parameters": {
        "width": {
          "!type": "number",
          "!span": "351[12:2]-356[12:7]"
        },
        "height": {
          "!type": "number",
          "!span": "367[13:2]-373[13:8]"
        },
        "depth": {
          "!type": "number",
          "!span": "385[14:2]-390[14:7]"
        },
        "!span": "334[11:6]-344[11:16]"
      },
      "widthSegments": {
        "!type": "number",
        "!span": "507[20:6]-520[20:19]"
      },
      "heightSegments": {
        "!type": "number",
        "!span": "549[21:6]-563[21:20]"
      },
      "depthSegments": {
        "!type": "number",
        "!span": "593[22:6]-606[22:19]"
      },
      "verticesNeedUpdate": {
        "!type": "bool",
        "!span": "2170[105:56]-2188[106:4]"
      },
      "colorsNeedUpdate": {
        "!type": "bool",
        "!span": "1557[53:28]-1573[53:44]"
      }
    },
    "CircleGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "1405[57:21]-1414[57:30]",
        "constructor": "THREE.CircleGeometry"
      },
      "!type": "fn(radius: number, segments: number, thetaStart: number, thetaLength: number)",
      "!span": "33[4:6]-47[4:20]",
      "!doc": "@author hughes"
    },
    "CubeGeometry": {
      "!type": "fn(width: ?, height: ?, depth: ?, widthSegments: ?, heightSegments: ?, depthSegments: ?) -> +THREE.BoxGeometry",
      "!span": "55[5:6]-67[5:18]"
    },
    "CylinderGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "4370[170:23]-4379[170:32]",
        "constructor": "THREE.CylinderGeometry"
      },
      "!type": "fn(radiusTop: number, radiusBottom: number, height: number, radialSegments: number, heightSegments: number, openEnded: bool, thetaStart: number, thetaLength: number)",
      "!span": "54[4:6]-70[4:22]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "DodecahedronGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "1297[54:27]-1306[54:36]",
        "constructor": "THREE.DodecahedronGeometry"
      },
      "!type": "fn(radius: ?, detail: ?)",
      "!span": "57[4:6]-77[4:26]",
      "!doc": "@author Abe Pazos / https://hamoid.com"
    },
    "ExtrudeGeometry": {
      "prototype": {
        "addShapeList": {
          "!type": "fn(shapes: [?]|+THREE.Shape, options: THREE.ExtrudeGeometry.!1)",
          "!span": "1780[56:32]-1792[56:44]"
        },
        "addShape": {
          "!type": "fn(shape: [?]|+THREE.Shape, options: THREE.ExtrudeGeometry.!1)",
          "!span": "1988[65:32]-1996[65:40]"
        },
        "!proto": "THREE.Geometry.prototype",
        "constructor": "THREE.ExtrudeGeometry"
      },
      "WorldUVGenerator": {
        "generateTopUV": {
          "!type": "fn(geometry: +THREE.ExtrudeGeometry, indexA: number, indexB: number, indexC: number) -> [+THREE.Vector2]",
          "!span": "14863[624:1]-14876[624:14]"
        },
        "generateSideWallUV": {
          "!type": "fn(geometry: +THREE.ExtrudeGeometry, indexA: number, indexB: number, indexC: number, indexD: number) -> [+THREE.Vector2]",
          "!span": "15179[640:1]-15197[640:19]"
        },
        "!span": "14840[622:22]-14856[622:38]",
        "!doc": "Use default WorldUVGenerator if no UV generators are specified."
      },
      "!type": "fn(shapes: [?]|+THREE.Shape, options: THREE.ExtrudeGeometry.!1)",
      "!span": "1051[26:6]-1066[26:21]",
      "!doc": "@author zz85 / http://www.lab4games.net/zz85/blog * Creates extruded geometry from a path shape.",
      "type": {
        "!type": "string",
        "!span": "1210[51:10]-1214[51:14]"
      },
      "id": {
        "!type": "number",
        "!span": "346[11:30]-350[11:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "398[13:6]-402[13:10]"
      },
      "name": {
        "!type": "string",
        "!span": "439[15:6]-443[15:10]"
      },
      "hasTangents": {
        "!type": "bool",
        "!span": "834[37:6]-845[37:17]"
      },
      "dynamic": {
        "!type": "bool",
        "!span": "862[39:6]-869[39:13]"
      },
      "verticesNeedUpdate": {
        "!type": "bool",
        "!span": "970[43:6]-988[43:24]"
      },
      "elementsNeedUpdate": {
        "!type": "bool",
        "!span": "1004[44:6]-1022[44:24]"
      },
      "uvsNeedUpdate": {
        "!type": "bool",
        "!span": "1038[45:6]-1051[45:19]"
      },
      "normalsNeedUpdate": {
        "!type": "bool",
        "!span": "1067[46:6]-1084[46:23]"
      },
      "tangentsNeedUpdate": {
        "!type": "bool",
        "!span": "1100[47:6]-1118[47:24]"
      },
      "colorsNeedUpdate": {
        "!type": "bool",
        "!span": "1134[48:6]-1150[48:22]"
      },
      "lineDistancesNeedUpdate": {
        "!type": "bool",
        "!span": "1166[49:6]-1189[49:29]"
      },
      "groupsNeedUpdate": {
        "!type": "bool",
        "!span": "1206[51:6]-1222[51:22]"
      }
    },
    "IcosahedronGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "874[31:26]-883[31:35]",
        "constructor": "THREE.IcosahedronGeometry"
      },
      "!type": "fn(radius: ?, detail: ?)",
      "!span": "77[4:6]-96[4:25]",
      "!doc": "@author timothypratley / https://github.com/timothypratley"
    },
    "LatheGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "2251[104:20]-2260[104:29]",
        "constructor": "THREE.LatheGeometry"
      },
      "!type": "fn(points: ?, segments: number, phiStart: number, phiLength: number)",
      "!span": "504[13:6]-517[13:19]",
      "!doc": "points - to create a closed torus, one must use a set of points like so: [ a, b, c, d, a ], see first is the same as last."
    },
    "OctahedronGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "603[29:25]-612[29:34]",
        "constructor": "THREE.OctahedronGeometry"
      },
      "!type": "fn(radius: ?, detail: ?)",
      "!span": "77[4:6]-95[4:24]",
      "!doc": "@author timothypratley / https://github.com/timothypratley"
    },
    "ParametricGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "1667[82:25]-1676[82:34]",
        "constructor": "THREE.ParametricGeometry"
      },
      "!type": "fn(func: ?, slices: ?, stacks: ?)",
      "!span": "251[9:6]-269[9:24]",
      "!doc": "@author zz85 / https://github.com/zz85 Parametric Surfaces Geometry based on the brilliant article by @prideout http://prideout.net/blog/?p=44 * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements ); "
    },
    "PlaneBufferGeometry": {
      "prototype": {
        "!proto": "THREE.BufferGeometry.prototype",
        "!span": "2188[94:26]-2197[94:35]",
        "constructor": "THREE.PlaneBufferGeometry"
      },
      "!type": "fn(width: ?, height: ?, widthSegments: ?, heightSegments: ?)",
      "!span": "172[5:6]-191[5:25]",
      "!doc": "@author mrdoob / http://mrdoob.com/ based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as",
      "type": {
        "!type": "string",
        "!span": "298[9:6]-302[9:10]"
      },
      "parameters": {
        "!span": "335[11:6]-345[11:16]"
      }
    },
    "PlaneGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "679[24:20]-688[24:29]",
        "constructor": "THREE.PlaneGeometry"
      },
      "!type": "fn(width: ?, height: ?, widthSegments: ?, heightSegments: ?)",
      "!span": "172[5:6]-185[5:19]",
      "!doc": "@author mrdoob / http://mrdoob.com/ based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as"
    },
    "PolyhedronGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "4621[233:25]-4630[233:34]",
        "constructor": "THREE.PolyhedronGeometry"
      },
      "!type": "fn(vertices: [number], indices: [number], radius: number, detail: number)",
      "!span": "191[6:6]-209[6:24]",
      "!doc": "@author clockworkgeek / https://github.com/clockworkgeek @author timothypratley / https://github.com/timothypratley @author WestLangley / http://github.com/WestLangley"
    },
    "RingGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "2348[80:19]-2357[80:28]",
        "constructor": "THREE.RingGeometry"
      },
      "!type": "fn(innerRadius: number, outerRadius: number, thetaSegments: number, phiSegments: number, thetaStart: number, thetaLength: number)",
      "!span": "39[4:6]-51[4:18]",
      "!doc": "@author Kaleb Murphy"
    },
    "ShapeGeometry": {
      "prototype": {
        "addShapeList": {
          "!type": "fn(shapes: [?|+THREE.Shape]|+THREE.Shape, options: ?) -> !this",
          "!span": "880[36:30]-892[36:42]",
          "!doc": "Add an array of shapes to THREE.ShapeGeometry."
        },
        "addShape": {
          "!type": "fn(shape: [?|+THREE.Shape]|+THREE.Shape, options: ?)",
          "!span": "1156[51:30]-1164[51:38]",
          "!doc": "Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry."
        },
        "!proto": "THREE.Geometry.prototype",
        "constructor": "THREE.ShapeGeometry"
      },
      "!type": "fn(shapes: [?|+THREE.Shape]|+THREE.Shape, options: ?)",
      "!span": "404[16:6]-417[16:19]",
      "!doc": "@author jonobr1 / http://jonobr1.com * Creates a one-sided polygonal geometry from a path shape.",
      "type": {
        "!type": "string",
        "!span": "489[18:13]-493[18:17]"
      },
      "id": {
        "!type": "number",
        "!span": "346[11:30]-350[11:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "398[13:6]-402[13:10]"
      },
      "name": {
        "!type": "string",
        "!span": "439[15:6]-443[15:10]"
      },
      "vertices": {
        "!type": "[+THREE.Vector3]",
        "!span": "482[18:6]-490[18:14]",
        "!doc": "set vertices to morph target"
      },
      "colors": {
        "!type": "[+THREE.Color]",
        "!span": "503[19:6]-509[19:12]"
      },
      "faces": {
        "!type": "[+THREE.Face3]",
        "!span": "577[21:6]-582[21:11]"
      },
      "faceVertexUvs": {
        "!type": "[[[+THREE.Vector2]]]",
        "!span": "596[23:6]-609[23:19]"
      },
      "morphTargets": {
        "!type": "[THREE.ShapeGeometry.morphTargets.<i>]",
        "!span": "627[25:6]-639[25:18]"
      },
      "morphColors": {
        "!type": "[THREE.ShapeGeometry.morphColors.<i>]",
        "!span": "652[26:6]-663[26:17]"
      },
      "morphNormals": {
        "!type": "[THREE.ShapeGeometry.morphNormals.<i>]",
        "!span": "676[27:6]-688[27:18]"
      },
      "skinWeights": {
        "!type": "[+THREE.Vector4]",
        "!span": "702[29:6]-713[29:17]"
      },
      "skinIndices": {
        "!type": "[+THREE.Vector4]",
        "!span": "726[30:6]-737[30:17]"
      },
      "lineDistances": {
        "!type": "[number]",
        "!span": "751[32:6]-764[32:19]"
      },
      "hasTangents": {
        "!type": "bool",
        "!span": "834[37:6]-845[37:17]"
      },
      "dynamic": {
        "!type": "bool",
        "!span": "862[39:6]-869[39:13]"
      },
      "verticesNeedUpdate": {
        "!type": "bool",
        "!span": "970[43:6]-988[43:24]"
      },
      "elementsNeedUpdate": {
        "!type": "bool",
        "!span": "1004[44:6]-1022[44:24]"
      },
      "uvsNeedUpdate": {
        "!type": "bool",
        "!span": "1038[45:6]-1051[45:19]"
      },
      "normalsNeedUpdate": {
        "!type": "bool",
        "!span": "1067[46:6]-1084[46:23]"
      },
      "tangentsNeedUpdate": {
        "!type": "bool",
        "!span": "1100[47:6]-1118[47:24]"
      },
      "colorsNeedUpdate": {
        "!type": "bool",
        "!span": "1134[48:6]-1150[48:22]"
      },
      "lineDistancesNeedUpdate": {
        "!type": "bool",
        "!span": "1166[49:6]-1189[49:29]"
      },
      "groupsNeedUpdate": {
        "!type": "bool",
        "!span": "1206[51:6]-1222[51:22]"
      }
    },
    "SphereGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "3078[111:21]-3087[111:30]",
        "constructor": "THREE.SphereGeometry"
      },
      "!type": "fn(radius: number, widthSegments: number, heightSegments: number, phiStart: number, phiLength: number, thetaStart: number, thetaLength: number)",
      "!span": "54[4:6]-68[4:20]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "TetrahedronGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "495[25:26]-504[25:35]",
        "constructor": "THREE.TetrahedronGeometry"
      },
      "!type": "fn(radius: ?, detail: ?)",
      "!span": "77[4:6]-96[4:25]",
      "!doc": "@author timothypratley / https://github.com/timothypratley"
    },
    "TextGeometry": {
      "prototype": {
        "!proto": "THREE.ExtrudeGeometry.prototype",
        "!span": "1589[60:19]-1598[60:28]",
        "constructor": "THREE.TextGeometry"
      },
      "!type": "fn(text: ?, parameters: THREE.ExtrudeGeometry.!1)",
      "!span": "950[38:6]-962[38:18]"
    },
    "TorusGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "2171[77:20]-2180[77:29]",
        "constructor": "THREE.TorusGeometry"
      },
      "!type": "fn(radius: number, tube: number, radialSegments: number, tubularSegments: number, arc: number)",
      "!span": "200[6:6]-213[6:19]",
      "!doc": "@author oosmoxiecode @author mrdoob / http://mrdoob.com/ based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888"
    },
    "TorusKnotGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "3002[111:24]-3011[111:33]",
        "constructor": "THREE.TorusKnotGeometry"
      },
      "!type": "fn(radius: number, tube: number, radialSegments: number, tubularSegments: number, p: number, q: number, heightScale: number)",
      "!span": "170[5:6]-187[5:23]",
      "!doc": "@author oosmoxiecode based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473"
    },
    "TubeGeometry": {
      "prototype": {
        "!proto": "THREE.Geometry.prototype",
        "!span": "3053[136:19]-3062[136:28]",
        "constructor": "THREE.TubeGeometry"
      },
      "NoTaper": {
        "!type": "fn(u: number) -> number",
        "!span": "3191[139:19]-3198[139:26]"
      },
      "SinusoidalTaper": {
        "!type": "fn(u: ?) -> number",
        "!span": "3254[145:19]-3269[145:34]"
      },
      "FrenetFrames": {
        "!type": "fn(path: ?, segments: number, closed: bool)",
        "!span": "3438[152:19]-3450[152:31]",
        "!doc": "For computing of Frenet frames, exposing the tangents, normals and binormals the spline"
      },
      "!type": "fn(path: ?, segments: number, radius: number, radialSegments: number, closed: bool, taper: fn(u: number) -> number)",
      "!span": "434[14:6]-446[14:18]",
      "!doc": "@author WestLangley / https://github.com/WestLangley @author zz85 / https://github.com/zz85 @author miningold / https://github.com/miningold @author jonobr1 / https://github.com/jonobr1 * Modified from the TorusKnotGeometry by @oosmoxiecode * Creates a tube which extrudes along a 3d spline * Uses parallel transport frames as described in http://www.cs.indiana.edu/pub/techreports/TR425.pdf"
    },
    "ArrowHelper": {
      "prototype": {
        "setDirection": {
          "!type": "fn(dir: ?)",
          "!span": "1637[55:28]-1649[55:40]"
        },
        "setLength": {
          "!type": "fn(length: number, headLength: number, headWidth: number)",
          "!span": "2120[86:28]-2129[86:37]"
        },
        "setColor": {
          "!type": "fn(color: ?)",
          "!span": "2530[100:28]-2538[100:36]"
        },
        "!proto": "THREE.Object3D.prototype",
        "!span": "1492[52:18]-1501[52:27]",
        "constructor": "THREE.ArrowHelper"
      },
      "!type": "fn(dir: ?, origin: ?, length: number, color: number, headLength: number, headWidth: number)",
      "!span": "359[16:6]-370[16:17]",
      "!doc": "@author WestLangley / http://github.com/WestLangley @author zz85 / http://github.com/zz85 @author bhouston / http://exocortex.com * Creates an arrow for visualizing directions * Parameters: dir - Vector3 origin - Vector3 length - Number color - color in hex value headLength - Number headWidth - Number"
    },
    "AxisHelper": {
      "prototype": {
        "!span": "750[31:17]-759[31:26]",
        "constructor": "THREE.AxisHelper"
      },
      "!type": "fn(size: number)",
      "!span": "101[5:6]-111[5:16]",
      "!doc": "@author sroucheray / http://sroucheray.org/ @author mrdoob / http://mrdoob.com/"
    },
    "BoundingBoxHelper": {
      "prototype": {
        "update": {
          "!type": "fn()",
          "!span": "612[21:34]-618[21:40]"
        },
        "!span": "453[18:24]-462[18:33]",
        "constructor": "THREE.BoundingBoxHelper"
      },
      "!type": "fn(object: ?, hex: ?)",
      "!span": "141[6:6]-158[6:23]",
      "!doc": "a helper to show the world-axis-aligned bounding box for an object"
    },
    "BoxHelper": {
      "prototype": {
        "update": {
          "!type": "fn(object: ?)",
          "!span": "552[22:26]-558[22:32]"
        },
        "!span": "417[19:16]-426[19:25]",
        "constructor": "THREE.BoxHelper"
      },
      "!type": "fn(object: ?)",
      "!span": "54[4:6]-63[4:15]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "CameraHelper": {
      "prototype": {
        "update": {
          "!type": "fn()",
          "!span": "2277[108:29]-2283[108:35]"
        },
        "!span": "2133[105:19]-2142[105:28]",
        "constructor": "THREE.CameraHelper"
      },
      "!type": "fn(camera: ?)",
      "!span": "281[9:6]-293[9:18]",
      "!doc": "@author alteredq / http://alteredqualia.com/ * - shows frustum, line of sight and up of the camera - suitable for fast updates - based on frustum visualization in lightgl.js shadowmap example http://evanw.github.com/lightgl.js/tests/shadowmap.html",
      "camera": {
        "!type": "+THREE.OrthographicCamera",
        "!span": "1980[95:6]-1986[95:12]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "2038[100:70]-2054[100:86]"
      },
      "pointMap": {
        "<i>": {
          "!type": "[number]",
          "!span": "1832[85:13]-1834[85:15]"
        },
        "!span": "2071[99:6]-2079[99:14]"
      },
      "type": {
        "!type": "string",
        "!span": "139[4:3]-143[4:7]"
      },
      "geometry": {
        "!type": "+THREE.BufferGeometry",
        "!span": "161[10:6]-169[10:14]"
      },
      "material": {
        "!type": "+THREE.LineBasicMaterial",
        "!span": "236[11:6]-244[11:14]"
      },
      "mode": {
        "!type": "number",
        "!span": "358[13:6]-362[13:10]"
      },
      "id": {
        "!type": "number",
        "!span": "258[9:30]-262[9:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "310[11:6]-314[11:10]"
      },
      "name": {
        "!type": "string",
        "!span": "351[13:6]-355[13:10]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "1201[56:6]-1219[56:24]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "1344[62:6]-1366[62:28]"
      },
      "visible": {
        "!type": "bool",
        "!span": "1383[53:12]-1390[53:19]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "1406[66:6]-1416[66:16]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "1432[67:6]-1445[67:19]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "1462[69:6]-1475[69:19]"
      },
      "renderOrder": {
        "!type": "number",
        "!span": "1490[70:6]-1501[70:17]"
      }
    },
    "DirectionalLightHelper": {
      "prototype": {
        "dispose": {
          "!type": "fn()",
          "!span": "1459[52:39]-1466[52:46]"
        },
        "update": {
          "!type": "fn()",
          "!span": "1675[60:39]-1681[60:45]"
        },
        "!proto": "THREE.Object3D.prototype",
        "!span": "1281[49:29]-1290[49:38]",
        "constructor": "THREE.DirectionalLightHelper"
      },
      "!type": "fn(light: ?, size: number)",
      "!span": "157[6:6]-179[6:28]",
      "!doc": "@author alteredq / http://alteredqualia.com/ @author mrdoob / http://mrdoob.com/ @author WestLangley / http://github.com/WestLangley"
    },
    "EdgesHelper": {
      "prototype": {
        "!span": "2413[103:18]-2422[103:27]",
        "constructor": "THREE.EdgesHelper"
      },
      "!type": "fn(object: ?, hex: ?, thresholdAngle: number)",
      "!span": "379[10:6]-390[10:17]",
      "!doc": "@author WestLangley / http://github.com/WestLangley @param object THREE.Mesh whose geometry will be used @param hex line color @param thresholdAngle the minimim angle (in degrees), between the face normals of adjacent faces, that is required to render an edge."
    },
    "FaceNormalsHelper": {
      "prototype": {
        "update": {
          "!type": "fn() -> !this",
          "!span": "970[38:34]-976[38:40]"
        },
        "!span": "811[35:24]-820[35:33]",
        "constructor": "THREE.FaceNormalsHelper"
      },
      "!type": "fn(object: ?, size: ?, hex: ?, linewidth: ?)",
      "!span": "108[5:6]-125[5:23]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author WestLangley / http://github.com/WestLangley",
      "size": {
        "!type": "number",
        "!span": "203[9:6]-207[9:10]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "696[27:6]-712[27:22]"
      },
      "normalMatrix": {
        "!type": "+THREE.Matrix3",
        "!span": "729[29:6]-741[29:18]"
      }
    },
    "GridHelper": {
      "prototype": {
        "setColors": {
          "!type": "fn(colorCenterLine: ?, colorGrid: ?)",
          "!span": "864[32:27]-873[32:36]"
        },
        "!span": "726[29:17]-735[29:26]",
        "constructor": "THREE.GridHelper"
      },
      "!type": "fn(size: ?, step: ?)",
      "!span": "54[4:6]-64[4:16]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "HemisphereLightHelper": {
      "prototype": {
        "dispose": {
          "!type": "fn()",
          "!span": "1035[38:38]-1042[38:45]"
        },
        "update": {
          "!type": "fn()",
          "!span": "1177[43:38]-1183[43:44]"
        },
        "!proto": "THREE.Object3D.prototype",
        "!span": "860[35:28]-869[35:37]",
        "constructor": "THREE.HemisphereLightHelper"
      },
      "!type": "fn(light: ?, sphereSize: ?)",
      "!span": "102[5:6]-123[5:27]",
      "!doc": "@author alteredq / http://alteredqualia.com/ @author mrdoob / http://mrdoob.com/"
    },
    "PointLightHelper": {
      "prototype": {
        "dispose": {
          "!type": "fn()",
          "!span": "1268[46:33]-1275[46:40]"
        },
        "update": {
          "!type": "fn()",
          "!span": "1382[52:33]-1388[52:39]"
        },
        "!span": "1112[43:23]-1121[43:32]",
        "constructor": "THREE.PointLightHelper"
      },
      "!type": "fn(light: ?, sphereSize: ?)",
      "!span": "102[5:6]-118[5:22]",
      "!doc": "@author alteredq / http://alteredqualia.com/ @author mrdoob / http://mrdoob.com/"
    },
    "SkeletonHelper": {
      "prototype": {
        "getBoneList": {
          "!type": "fn(object: ?) -> [!0]",
          "!span": "1159[45:31]-1170[45:42]"
        },
        "update": {
          "!type": "fn()",
          "!span": "1480[65:31]-1486[65:37]"
        },
        "!span": "1009[42:21]-1018[42:30]",
        "constructor": "THREE.SkeletonHelper"
      },
      "!type": "fn(object: ?)",
      "!span": "199[7:6]-213[7:20]",
      "!doc": "@author Sean Griffin / http://twitter.com/sgrif @author Michael Guerrero / http://realitymeltdown.com @author mrdoob / http://mrdoob.com/ @author ikerr / http://verold.com"
    },
    "SpotLightHelper": {
      "prototype": {
        "dispose": {
          "!type": "fn()",
          "!span": "929[33:32]-936[33:39]"
        },
        "update": {
          "!type": "fn()",
          "!span": "1051[38:32]-1057[38:38]"
        },
        "!proto": "THREE.Object3D.prototype",
        "!span": "772[30:22]-781[30:31]",
        "constructor": "THREE.SpotLightHelper"
      },
      "!type": "fn(light: ?)",
      "!span": "156[6:6]-171[6:21]",
      "!doc": "@author alteredq / http://alteredqualia.com/ @author mrdoob / http://mrdoob.com/ @author WestLangley / http://github.com/WestLangley"
    },
    "VertexNormalsHelper": {
      "prototype": {
        "update": {
          "!type": "fn(object: ?) -> !this",
          "!span": "1076[44:36]-1082[44:42]"
        },
        "!span": "911[41:26]-920[41:35]",
        "constructor": "THREE.VertexNormalsHelper"
      },
      "!type": "fn(object: ?, size: ?, hex: ?, linewidth: ?)",
      "!span": "108[5:6]-127[5:25]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author WestLangley / http://github.com/WestLangley",
      "size": {
        "!type": "number",
        "!span": "205[9:6]-209[9:10]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "794[33:6]-810[33:22]"
      }
    },
    "VertexTangentsHelper": {
      "prototype": {
        "update": {
          "!type": "fn(object: ?) -> !this",
          "!span": "1068[43:37]-1074[43:43]"
        },
        "!span": "900[40:27]-909[40:36]",
        "constructor": "THREE.VertexTangentsHelper"
      },
      "!type": "fn(object: ?, size: ?, hex: ?, linewidth: ?)",
      "!span": "108[5:6]-128[5:26]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author WestLangley / http://github.com/WestLangley",
      "size": {
        "!type": "number",
        "!span": "206[9:6]-210[9:10]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "825[34:6]-841[34:22]"
      }
    },
    "WireframeHelper": {
      "prototype": {
        "!span": "4109[175:22]-4118[175:31]",
        "constructor": "THREE.WireframeHelper"
      },
      "!type": "fn(object: ?, hex: ?)",
      "!span": "54[4:6]-69[4:21]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "ImmediateRenderObject": {
      "prototype": {
        "!proto": "THREE.Object3D.prototype",
        "!span": "213[12:28]-222[12:37]",
        "constructor": "THREE.ImmediateRenderObject"
      },
      "!type": "fn()",
      "!span": "63[4:6]-84[4:27]",
      "!doc": "@author alteredq / http://alteredqualia.com/"
    },
    "MorphBlendMesh": {
      "prototype": {
        "createAnimation": {
          "!type": "fn(name: string, start: number, end: number, fps: number)",
          "!span": "752[31:31]-767[31:46]"
        },
        "autoCreateAnimations": {
          "!type": "fn(fps: ?)",
          "!span": "1243[62:31]-1263[62:51]"
        },
        "setAnimationDirectionForward": {
          "!type": "fn(name: ?)",
          "!span": "2145[103:31]-2173[103:59]"
        },
        "setAnimationDirectionBackward": {
          "!type": "fn(name: ?)",
          "!span": "2384[116:31]-2413[116:60]"
        },
        "setAnimationFPS": {
          "!type": "fn(name: ?, fps: ?)",
          "!span": "2625[129:31]-2640[129:46]"
        },
        "setAnimationDuration": {
          "!type": "fn(name: ?, duration: ?)",
          "!span": "2888[142:31]-2908[142:51]"
        },
        "setAnimationWeight": {
          "!type": "fn(name: string, weight: number)",
          "!span": "3171[155:31]-3189[155:49]"
        },
        "setAnimationTime": {
          "!type": "fn(name: ?, time: ?)",
          "!span": "3369[167:31]-3385[167:47]"
        },
        "getAnimationTime": {
          "!type": "fn(name: ?) -> number",
          "!span": "3559[179:31]-3575[179:47]"
        },
        "getAnimationDuration": {
          "!type": "fn(name: ?) -> number",
          "!span": "3778[195:31]-3798[195:51]"
        },
        "playAnimation": {
          "!type": "fn(name: ?)",
          "!span": "4019[211:31]-4032[211:44]"
        },
        "stopAnimation": {
          "!type": "fn(name: ?)",
          "!span": "4336[228:31]-4349[228:44]"
        },
        "update": {
          "!type": "fn(delta: ?)",
          "!span": "4520[240:31]-4526[240:37]"
        },
        "!span": "599[28:21]-608[28:30]",
        "constructor": "THREE.MorphBlendMesh"
      },
      "!type": "fn(geometry: ?, material: ?)",
      "!span": "67[4:6]-81[4:20]",
      "!doc": "@author alteredq / http://alteredqualia.com/"
    },
    "AmbientLight": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.AmbientLight",
          "!span": "324[15:29]-329[15:34]"
        },
        "!span": "179[12:19]-188[12:28]",
        "constructor": "THREE.AmbientLight"
      },
      "!type": "fn(color: ?)",
      "!span": "54[4:6]-66[4:18]",
      "!doc": "@author mrdoob / http://mrdoob.com/",
      "type": {
        "!type": "string",
        "!span": "132[3:44]-136[4:0]"
      },
      "name": {
        "!type": "string",
        "!span": "13239[540:2855]-13243[540:2859]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "13419[744:9]-13437[744:27]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "13560[749:9]-13576[749:25]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "13611[750:9]-13633[750:31]"
      },
      "visible": {
        "!type": "bool",
        "!span": "13675[540:3291]-13682[540:3298]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "13709[754:9]-13719[754:19]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "13748[755:9]-13761[755:22]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "13794[757:9]-13807[757:22]"
      },
      "id": {
        "!type": "number",
        "!span": "258[9:30]-262[9:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "310[15:36]-314[15:40]"
      },
      "renderOrder": {
        "!type": "number",
        "!span": "1490[70:6]-1501[70:17]"
      }
    },
    "AreaLight": {
      "prototype": {
        "!span": "531[25:16]-540[25:25]",
        "constructor": "THREE.AreaLight"
      },
      "!type": "fn(color: ?, intensity: ?)",
      "!span": "109[5:6]-118[5:15]",
      "!doc": "@author MPanknin / http://www.redplant.de/ @author alteredq / http://alteredqualia.com/"
    },
    "Camera": {
      "prototype": {
        "getWorldDirection": {
          "!type": "fn(optionalTarget: ?) -> +THREE.Vector3",
          "!span": "474[20:23]-491[20:40]"
        },
        "lookAt": {
          "!type": "fn(vector: +THREE.Vector3)",
          "!span": "786[36:23]-792[36:29]"
        },
        "clone": {
          "!type": "fn(camera: +THREE.Camera) -> !0",
          "!span": "1087[52:23]-1092[52:28]"
        },
        "!proto": "THREE.Object3D.prototype",
        "constructor": "THREE.Camera"
      },
      "!type": "fn()",
      "!span": "153[6:6]-159[6:12]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author mikael emtinger / http://gomo.se/ @author WestLangley / http://github.com/WestLangley",
      "type": {
        "!type": "string",
        "!span": "214[7:18]-218[7:22]"
      },
      "id": {
        "!type": "number",
        "!span": "258[9:30]-262[9:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "310[11:6]-314[11:10]"
      },
      "name": {
        "!type": "string",
        "!span": "351[13:6]-355[13:10]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "1201[56:6]-1219[56:24]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "1313[61:6]-1329[61:22]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "1344[62:6]-1366[62:28]"
      },
      "visible": {
        "!type": "bool",
        "!span": "1383[64:6]-1390[64:13]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "1406[66:6]-1416[66:16]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "1432[67:6]-1445[67:19]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "1462[69:6]-1475[69:19]"
      },
      "renderOrder": {
        "!type": "number",
        "!span": "1490[70:6]-1501[70:17]"
      }
    },
    "HemisphereLight": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.HemisphereLight",
          "!span": "531[20:32]-536[20:37]"
        },
        "!span": "377[17:22]-386[17:31]",
        "constructor": "THREE.HemisphereLight"
      },
      "!type": "fn(skyColor: ?, groundColor: ?, intensity: ?)",
      "!span": "63[4:6]-78[4:21]",
      "!doc": "@author alteredq / http://alteredqualia.com/",
      "intensity": {
        "!type": "number",
        "!span": "700[27:7]-709[27:16]"
      },
      "type": {
        "!type": "string",
        "!span": "174[4:38]-178[4:42]"
      },
      "groundColor": {
        "!type": "+THREE.Color",
        "!span": "241[12:6]-252[12:17]"
      },
      "name": {
        "!type": "string",
        "!span": "13239[540:2855]-13243[540:2859]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "13419[744:9]-13437[744:27]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "13560[749:9]-13576[749:25]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "13611[750:9]-13633[750:31]"
      },
      "visible": {
        "!type": "bool",
        "!span": "13675[540:3291]-13682[540:3298]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "13709[754:9]-13719[754:19]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "13748[755:9]-13761[755:22]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "13794[757:9]-13807[757:22]"
      },
      "id": {
        "!type": "number",
        "!span": "258[9:30]-262[9:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "310[15:36]-314[15:40]"
      },
      "parent": {
        "!type": "+THREE.Scene",
        "!span": "394[16:6]-400[16:12]"
      },
      "children": {
        "!type": "[?]",
        "!span": "420[17:6]-428[17:14]"
      },
      "rotation": {
        "!type": "+THREE.Euler",
        "!span": "953[37:32]-1190[54:2]"
      },
      "quaternion": {
        "!type": "+THREE.Quaternion",
        "!span": "953[37:32]-1190[54:2]"
      },
      "matrix": {
        "!type": "+THREE.Matrix4",
        "!span": "1235[58:6]-1241[58:12]"
      },
      "renderOrder": {
        "!type": "number",
        "!span": "1490[70:6]-1501[70:17]"
      }
    },
    "Light": {
      "prototype": {
        "clone": {
          "!type": "fn(light: ?|+THREE.SpotLight) -> !0",
          "!span": "371[18:22]-376[18:27]"
        },
        "!proto": "THREE.Object3D.prototype",
        "constructor": "THREE.Light"
      },
      "!type": "fn(color: ?)",
      "!span": "102[5:6]-107[5:11]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/"
    },
    "PointLight": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.PointLight",
          "!span": "562[19:27]-567[19:32]"
        },
        "!proto": "THREE.Light.prototype",
        "!span": "423[16:17]-432[16:26]",
        "constructor": "THREE.PointLight"
      },
      "!type": "fn(color: ?, intensity: ?, distance: ?, decay: ?)",
      "!span": "54[4:6]-64[4:16]",
      "!doc": "@author mrdoob / http://mrdoob.com/",
      "type": {
        "!type": "string",
        "!span": "158[8:6]-162[8:10]"
      },
      "intensity": {
        "!type": "number",
        "!span": "186[10:6]-195[10:15]"
      },
      "distance": {
        "!type": "number",
        "!span": "249[11:6]-257[11:14]"
      },
      "decay": {
        "!type": "number",
        "!span": "309[12:6]-314[12:11]"
      },
      "name": {
        "!type": "string",
        "!span": "13239[540:2855]-13243[540:2859]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "13419[744:9]-13437[744:27]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "13560[749:9]-13576[749:25]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "13611[750:9]-13633[750:31]"
      },
      "visible": {
        "!type": "bool",
        "!span": "13675[540:3291]-13682[540:3298]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "13709[754:9]-13719[754:19]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "13748[755:9]-13761[755:22]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "13794[757:9]-13807[757:22]"
      }
    },
    "SpotLight": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.SpotLight",
          "!span": "1176[48:26]-1181[48:31]"
        },
        "!proto": "THREE.Light.prototype",
        "!span": "1040[45:16]-1049[45:25]",
        "constructor": "THREE.SpotLight"
      },
      "!type": "fn(color: ?, intensity: ?, distance: ?, angle: ?, exponent: ?, decay: ?)",
      "!span": "63[4:6]-72[4:15]",
      "!doc": "@author alteredq / http://alteredqualia.com/",
      "type": {
        "!type": "string",
        "!span": "183[8:6]-187[8:10]"
      },
      "target": {
        "!type": "+THREE.Object3D",
        "!span": "241[11:6]-247[11:12]"
      },
      "intensity": {
        "!type": "number",
        "!span": "279[13:6]-288[13:15]"
      },
      "distance": {
        "!type": "number",
        "!span": "342[14:6]-350[14:14]"
      },
      "angle": {
        "!type": "number",
        "!span": "402[15:6]-407[15:11]"
      },
      "exponent": {
        "!type": "number",
        "!span": "463[16:6]-471[16:14]"
      },
      "decay": {
        "!type": "number",
        "!span": "524[17:6]-529[17:11]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "623[19:6]-633[19:16]"
      },
      "onlyShadow": {
        "!type": "bool",
        "!span": "649[20:6]-659[20:16]"
      },
      "shadowCameraNear": {
        "!type": "number",
        "!span": "681[24:6]-697[24:22]"
      },
      "shadowCameraFar": {
        "!type": "number",
        "!span": "710[25:6]-725[25:21]"
      },
      "shadowCameraFov": {
        "!type": "number",
        "!span": "740[26:6]-755[26:21]"
      },
      "shadowCameraVisible": {
        "!type": "bool",
        "!span": "769[28:6]-788[28:25]"
      },
      "shadowBias": {
        "!type": "number",
        "!span": "805[30:6]-815[30:16]"
      },
      "shadowDarkness": {
        "!type": "number",
        "!span": "827[31:6]-841[31:20]"
      },
      "shadowMapWidth": {
        "!type": "number",
        "!span": "856[33:6]-870[33:20]"
      },
      "shadowMapHeight": {
        "!type": "number",
        "!span": "884[34:6]-899[34:21]"
      },
      "name": {
        "!type": "string",
        "!span": "13239[540:2855]-13243[540:2859]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "13419[744:9]-13437[744:27]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "13560[749:9]-13576[749:25]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "13611[750:9]-13633[750:31]"
      },
      "visible": {
        "!type": "bool",
        "!span": "13675[540:3291]-13682[540:3298]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "13748[755:9]-13761[755:22]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "13794[757:9]-13807[757:22]"
      }
    },
    "BinaryTextureLoader": {
      "prototype": {
        "load": {
          "!type": "fn(url: ?, onLoad: ?, onProgress: ?, onError: ?) -> +THREE.DataTexture",
          "!span": "349[17:1]-353[17:5]"
        },
        "!span": "291[13:26]-300[13:35]",
        "constructor": "THREE.BinaryTextureLoader"
      },
      "!type": "fn()",
      "!span": "173[6:32]-192[6:51]",
      "!doc": "@author Nikos M."
    },
    "BufferGeometryLoader": {
      "prototype": {
        "load": {
          "!type": "fn(url: ?, onLoad: ?, onProgress: ?, onError: ?)",
          "!span": "289[14:1]-293[14:5]"
        },
        "setCrossOrigin": {
          "!type": "fn(value: ?)",
          "!span": "602[28:1]-616[28:15]"
        },
        "parse": {
          "!type": "fn(json: ?) -> +THREE.BufferGeometry",
          "!span": "681[34:1]-686[34:6]"
        },
        "!span": "226[10:27]-235[10:36]",
        "constructor": "THREE.BufferGeometryLoader"
      },
      "!type": "fn(manager: ?)",
      "!span": "58[4:6]-78[4:26]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "Cache": {
      "files": {
        "!span": "72[6:1]-77[6:6]"
      },
      "add": {
        "!type": "fn(key: string, file: ?)",
        "!span": "87[8:1]-90[8:4]"
      },
      "get": {
        "!type": "fn(key: string) -> !this.files.<i>",
        "!span": "217[16:1]-220[16:4]"
      },
      "remove": {
        "!type": "fn(key: ?)",
        "!span": "343[24:1]-349[24:7]"
      },
      "clear": {
        "!type": "fn()",
        "!span": "412[30:1]-417[30:6]"
      },
      "!span": "58[4:6]-63[4:11]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "CompressedTextureLoader": {
      "prototype": {
        "load": {
          "!type": "fn(url: ?, onLoad: ?, onError: ?) -> +THREE.CompressedTexture",
          "!span": "316[18:1]-320[18:5]"
        },
        "!span": "254[14:30]-263[14:39]",
        "constructor": "THREE.CompressedTextureLoader"
      },
      "!type": "fn()",
      "!span": "127[6:6]-150[6:29]",
      "!doc": "@author mrdoob / http://mrdoob.com/ * Abstract Base class to block based textures loader (dds, pvr, ...)"
    },
    "GeometryLoader": {
      "prototype": {
        "load": {
          "!type": "fn(url: ?, onLoad: ?, onProgress: ?, onError: ?)",
          "!span": "271[14:1]-275[14:5]"
        },
        "setCrossOrigin": {
          "!type": "fn(value: ?)",
          "!span": "569[28:1]-583[28:15]"
        },
        "parse": {
          "!type": "fn(json: ?) -> +THREE.Geometry",
          "!span": "648[34:1]-653[34:6]"
        },
        "!span": "214[10:21]-223[10:30]",
        "constructor": "THREE.GeometryLoader"
      },
      "!type": "fn(manager: ?)",
      "!span": "58[4:6]-72[4:20]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "ImageLoader": {
      "prototype": {
        "load": {
          "!type": "fn(url: string, onLoad: fn(image: ?)|fn(), onProgress: ?, onError: fn(event: ?))",
          "!span": "248[14:1]-252[14:5]"
        },
        "setCrossOrigin": {
          "!type": "fn(value: ?)",
          "!span": "1097[69:1]-1111[69:15]"
        },
        "!span": "210[10:30]-1169[75:1]",
        "constructor": "THREE.ImageLoader"
      },
      "!type": "fn(manager: +THREE.LoadingManager)",
      "!span": "54[4:6]-65[4:17]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "JSONLoader": {
      "prototype": {
        "load": {
          "!type": "fn(url: ?, callback: ?, texturePath: ?)",
          "!span": "392[16:27]-396[16:31]"
        },
        "loadAjaxJSON": {
          "!type": "fn(context: +THREE.JSONLoader, url: ?, callback: ?, texturePath: ?, callbackProgress: ?)",
          "!span": "729[27:27]-741[27:39]"
        },
        "parse": {
          "!type": "fn(json: ?, texturePath: ?) -> THREE.JSONLoader.prototype.parse.!ret",
          "!span": "2664[115:27]-2669[115:32]"
        },
        "!span": "249[13:17]-258[13:26]",
        "constructor": "THREE.JSONLoader"
      },
      "!type": "fn(showStatus: ?)",
      "!span": "107[5:6]-117[5:16]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/",
      "withCredentials": {
        "!type": "bool",
        "!span": "198[9:6]-213[9:21]"
      },
      "imageLoader": {
        "!type": "+THREE.ImageLoader",
        "!span": "234[9:6]-245[9:17]"
      },
      "onLoadStart": {
        "!type": "fn()",
        "!span": "282[11:6]-293[11:17]"
      },
      "onLoadProgress": {
        "!type": "fn()",
        "!span": "319[12:6]-333[12:20]"
      },
      "onLoadComplete": {
        "!type": "fn()",
        "!span": "359[13:6]-373[13:20]"
      }
    },
    "Loader": {
      "prototype": {
        "addStatusElement": {
          "!type": "fn()",
          "!span": "491[23:1]-507[23:17]"
        },
        "updateProgress": {
          "!type": "fn(progress: ?)",
          "!span": "950[44:1]-964[44:15]"
        },
        "extractUrlBase": {
          "!type": "fn(url: ?) -> string",
          "!span": "1277[63:1]-1291[63:15]"
        },
        "initMaterials": {
          "!type": "fn(materials: ?, texturePath: ?) -> [?]",
          "!span": "1457[75:1]-1470[75:14]"
        },
        "needsTangents": {
          "!type": "fn(materials: [?]) -> bool",
          "!span": "1692[89:1]-1705[89:14]"
        },
        "createMaterial": {
          "!type": "fn(m: ?, texturePath: ?)",
          "!span": "1921[103:1]-1935[103:15]"
        },
        "!span": "426[17:25]-7668[395:1]",
        "constructor": "THREE.Loader"
      },
      "Handlers": {
        "handlers": {
          "!type": "[?]",
          "!span": "7703[399:1]-7711[399:9]"
        },
        "add": {
          "!type": "fn(regex: ?, loader: ?)",
          "!span": "7721[401:1]-7724[401:4]"
        },
        "get": {
          "!type": "fn(file: ?)",
          "!span": "7808[407:1]-7811[407:4]"
        },
        "!span": "7686[397:13]-7694[397:21]"
      },
      "!type": "fn(showStatus: ?)",
      "!span": "67[4:6]-73[4:12]",
      "!doc": "@author alteredq / http://alteredqualia.com/"
    },
    "LoadingManager": {
      "!type": "fn(onLoad: fn(), onProgress: ?, onError: ?)",
      "!span": "54[4:6]-68[4:20]",
      "!doc": "@author mrdoob / http://mrdoob.com/",
      "onLoad": {
        "!type": "fn()",
        "!span": "170[10:6]-176[10:12]"
      },
      "itemStart": {
        "!type": "fn(url: string)",
        "!span": "250[14:6]-259[14:15]"
      },
      "itemEnd": {
        "!type": "fn(url: string)",
        "!span": "306[20:6]-313[20:13]"
      }
    },
    "DefaultLoadingManager": {
      "!type": "+THREE.LoadingManager",
      "!span": "541[40:6]-562[40:27]"
    },
    "MaterialLoader": {
      "prototype": {
        "load": {
          "!type": "fn(url: ?, onLoad: ?, onProgress: ?, onError: ?)",
          "!span": "271[14:1]-275[14:5]"
        },
        "setCrossOrigin": {
          "!type": "fn(value: ?)",
          "!span": "584[28:1]-598[28:15]"
        },
        "parse": {
          "!type": "fn(json: ?)",
          "!span": "663[34:1]-668[34:6]"
        },
        "!span": "214[10:21]-223[10:30]",
        "constructor": "THREE.MaterialLoader"
      },
      "!type": "fn(manager: ?)",
      "!span": "58[4:6]-72[4:20]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "ObjectLoader": {
      "prototype": {
        "load": {
          "!type": "fn(url: ?, onLoad: ?, onProgress: ?, onError: ?)",
          "!span": "275[15:1]-279[15:5]"
        },
        "setTexturePath": {
          "!type": "fn(value: ?)",
          "!span": "684[35:1]-698[35:15]"
        },
        "setCrossOrigin": {
          "!type": "fn(value: ?)",
          "!span": "757[41:1]-771[41:15]"
        },
        "parse": {
          "!type": "fn(json: ?, onLoad: ?)",
          "!span": "830[47:1]-835[47:6]"
        },
        "parseGeometries": {
          "!type": "fn(json: ?) -> THREE.ObjectLoader.prototype.parseGeometries.!ret",
          "!span": "1392[70:1]-1407[70:16]"
        },
        "parseMaterials": {
          "!type": "fn(json: ?, textures: THREE.ObjectLoader.prototype.parseMaterials.!1) -> THREE.ObjectLoader.prototype.parseMaterials.!ret",
          "!span": "3850[211:1]-3864[211:15]"
        },
        "parseImages": {
          "!type": "fn(json: ?, onLoad: fn()) -> THREE.ObjectLoader.prototype.parseImages.!ret",
          "!span": "5444[298:1]-5455[298:12]"
        },
        "parseTextures": {
          "!type": "fn(json: ?, images: THREE.ObjectLoader.prototype.parseImages.!ret) -> THREE.ObjectLoader.prototype.parseMaterials.!1",
          "!span": "6170[337:1]-6183[337:14]"
        },
        "parseObject": {
          "!type": "fn(data: ?, geometries: THREE.ObjectLoader.prototype.parseGeometries.!ret, materials: THREE.ObjectLoader.prototype.parseMaterials.!ret) -> ?",
          "!span": "7362[386:1]-7373[386:12]"
        },
        "!span": "224[11:19]-233[11:28]",
        "constructor": "THREE.ObjectLoader"
      },
      "!type": "fn(manager: ?)",
      "!span": "54[4:6]-66[4:18]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "TextureLoader": {
      "prototype": {
        "load": {
          "!type": "fn(url: ?, onLoad: ?, onProgress: ?, onError: ?)",
          "!span": "254[14:1]-258[14:5]"
        },
        "setCrossOrigin": {
          "!type": "fn(value: ?)",
          "!span": "648[35:1]-662[35:15]"
        },
        "!span": "202[10:20]-211[10:29]",
        "constructor": "THREE.TextureLoader"
      },
      "!type": "fn(manager: ?)",
      "!span": "54[4:6]-67[4:19]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "XHRLoader": {
      "prototype": {
        "load": {
          "!type": "fn(url: ?, onLoad: fn(text: ?), onProgress: ?, onError: ?)",
          "!span": "242[14:1]-246[14:5]"
        },
        "setResponseType": {
          "!type": "fn(value: string)",
          "!span": "1226[69:1]-1241[69:16]"
        },
        "setCrossOrigin": {
          "!type": "fn(value: ?)",
          "!span": "1301[75:1]-1315[75:15]"
        },
        "!span": "206[10:28]-1373[81:1]",
        "constructor": "THREE.XHRLoader"
      },
      "!type": "fn(manager: +THREE.LoadingManager)",
      "!span": "54[4:6]-63[4:15]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "LineBasicMaterial": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.LineBasicMaterial",
          "!span": "883[45:34]-888[45:39]"
        },
        "constructor": "THREE.LineBasicMaterial"
      },
      "!type": "fn(parameters: ?)",
      "!span": "373[22:6]-390[22:23]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/ * parameters = { color: <hex>, opacity: <float>, * blending: THREE.NormalBlending, depthTest: <bool>, depthWrite: <bool>, * linewidth: <float>, linecap: \"round\", linejoin: \"round\", * vertexColors: <bool> * fog: <bool> }",
      "type": {
        "!type": "string",
        "!span": "457[22:12]-461[22:16]"
      },
      "linewidth": {
        "!type": "number",
        "!span": "536[24:3]-545[24:12]"
      },
      "linecap": {
        "!type": "string",
        "!span": "557[31:6]-564[31:13]"
      },
      "linejoin": {
        "!type": "string",
        "!span": "582[32:6]-590[32:14]"
      },
      "vertexColors": {
        "!type": "number",
        "!span": "609[26:20]-621[26:32]"
      },
      "fog": {
        "!type": "bool",
        "!span": "647[29:0]-650[29:3]"
      },
      "id": {
        "!type": "number",
        "!span": "158[7:30]-162[7:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "210[9:6]-214[9:10]"
      },
      "name": {
        "!type": "string",
        "!span": "251[11:6]-255[11:10]"
      },
      "side": {
        "!type": "number",
        "!span": "294[14:6]-298[14:10]"
      },
      "opacity": {
        "!type": "number",
        "!span": "325[16:6]-332[16:13]"
      },
      "transparent": {
        "!type": "bool",
        "!span": "344[17:6]-355[17:17]"
      },
      "blending": {
        "!type": "number",
        "!span": "372[19:6]-380[19:14]"
      },
      "blendSrc": {
        "!type": "number",
        "!span": "412[21:6]-420[21:14]"
      },
      "blendDst": {
        "!type": "number",
        "!span": "451[22:6]-459[22:14]"
      },
      "blendEquation": {
        "!type": "number",
        "!span": "498[23:6]-511[23:19]"
      },
      "depthTest": {
        "!type": "bool",
        "!span": "629[28:6]-638[28:15]"
      },
      "depthWrite": {
        "!type": "bool",
        "!span": "653[29:6]-663[29:16]"
      },
      "colorWrite": {
        "!type": "bool",
        "!span": "679[31:6]-689[31:16]"
      },
      "polygonOffset": {
        "!type": "bool",
        "!span": "705[33:6]-718[33:19]"
      },
      "polygonOffsetFactor": {
        "!type": "number",
        "!span": "734[34:6]-753[34:25]"
      },
      "polygonOffsetUnits": {
        "!type": "number",
        "!span": "765[35:6]-783[35:24]"
      },
      "alphaTest": {
        "!type": "number",
        "!span": "796[37:6]-805[37:15]"
      },
      "overdraw": {
        "!type": "number",
        "!span": "818[39:6]-826[39:14]"
      },
      "visible": {
        "!type": "bool",
        "!span": "934[41:6]-941[41:13]"
      },
      "_needsUpdate": {
        "!type": "bool",
        "!span": "957[43:6]-969[43:18]"
      }
    },
    "LineDashedMaterial": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.LineDashedMaterial",
          "!span": "870[48:35]-875[48:40]"
        },
        "!span": "704[45:25]-713[45:34]",
        "constructor": "THREE.LineDashedMaterial"
      },
      "!type": "fn(parameters: ?)",
      "!span": "357[23:6]-375[23:24]",
      "!doc": "@author alteredq / http://alteredqualia.com/ * parameters = { color: <hex>, opacity: <float>, * blending: THREE.NormalBlending, depthTest: <bool>, depthWrite: <bool>, * linewidth: <float>, * scale: <float>, dashSize: <float>, gapSize: <float>, * vertexColors: <bool> * fog: <bool> }",
      "linewidth": {
        "!type": "number",
        "!span": "1046[56:10]-1055[56:19]"
      },
      "scale": {
        "!type": "number",
        "!span": "1085[58:10]-1090[58:15]"
      },
      "dashSize": {
        "!type": "number",
        "!span": "1115[59:10]-1123[59:18]"
      },
      "gapSize": {
        "!type": "number",
        "!span": "1151[60:10]-1158[60:17]"
      },
      "vertexColors": {
        "!type": "bool",
        "!span": "1186[62:10]-1198[62:22]"
      },
      "fog": {
        "!type": "bool",
        "!span": "1231[64:10]-1234[64:13]"
      },
      "type": {
        "!type": "string",
        "!span": "442[21:36]-446[22:1]"
      },
      "id": {
        "!type": "number",
        "!span": "158[7:30]-162[7:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "210[9:6]-214[9:10]"
      },
      "name": {
        "!type": "string",
        "!span": "251[11:6]-255[11:10]"
      },
      "side": {
        "!type": "number",
        "!span": "294[14:6]-298[14:10]"
      },
      "opacity": {
        "!type": "number",
        "!span": "325[16:6]-332[16:13]"
      },
      "transparent": {
        "!type": "bool",
        "!span": "344[17:6]-355[17:17]"
      },
      "blending": {
        "!type": "number",
        "!span": "372[19:6]-380[19:14]"
      },
      "blendSrc": {
        "!type": "number",
        "!span": "412[21:6]-420[21:14]"
      },
      "blendDst": {
        "!type": "number",
        "!span": "451[22:6]-459[22:14]"
      },
      "blendEquation": {
        "!type": "number",
        "!span": "498[23:6]-511[23:19]"
      },
      "depthTest": {
        "!type": "bool",
        "!span": "629[28:6]-638[28:15]"
      },
      "depthWrite": {
        "!type": "bool",
        "!span": "653[29:6]-663[29:16]"
      },
      "colorWrite": {
        "!type": "bool",
        "!span": "679[31:6]-689[31:16]"
      },
      "polygonOffset": {
        "!type": "bool",
        "!span": "705[33:6]-718[33:19]"
      },
      "polygonOffsetFactor": {
        "!type": "number",
        "!span": "734[34:6]-753[34:25]"
      },
      "polygonOffsetUnits": {
        "!type": "number",
        "!span": "765[35:6]-783[35:24]"
      },
      "alphaTest": {
        "!type": "number",
        "!span": "796[37:6]-805[37:15]"
      },
      "overdraw": {
        "!type": "number",
        "!span": "818[39:6]-826[39:14]"
      },
      "visible": {
        "!type": "bool",
        "!span": "934[41:6]-941[41:13]"
      },
      "_needsUpdate": {
        "!type": "bool",
        "!span": "957[43:6]-969[43:18]"
      }
    },
    "Material": {
      "prototype": {
        "setValues": {
          "!type": "fn(values: ?)",
          "!span": "1207[65:1]-1216[65:10]"
        },
        "toJSON": {
          "!type": "fn() -> THREE.Material.prototype.toJSON.!ret",
          "!span": "1978[109:1]-1984[109:7]"
        },
        "clone": {
          "!type": "fn(material: +THREE.MeshPhongMaterial|+THREE.PointCloudMaterial) -> !0",
          "!span": "4813[189:1]-4818[189:6]"
        },
        "update": {
          "!type": "fn()",
          "!span": "5746[226:1]-5752[226:7]"
        },
        "dispose": {
          "!type": "fn()",
          "!span": "5820[232:1]-5827[232:8]"
        },
        "!span": "1010[47:27]-5895[238:1]",
        "constructor": "THREE.Material",
        "addEventListener": "THREE.BufferGeometry.prototype.addEventListener",
        "hasEventListener": "THREE.BufferGeometry.prototype.hasEventListener",
        "removeEventListener": "THREE.BufferGeometry.prototype.removeEventListener",
        "dispatchEvent": "THREE.BufferGeometry.prototype.dispatchEvent"
      },
      "!type": "fn()",
      "!span": "102[5:6]-110[5:14]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/"
    },
    "MaterialIdCount": {
      "!type": "number",
      "!span": "5972[242:6]-5987[242:21]"
    },
    "MeshBasicMaterial": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.MeshBasicMaterial",
          "!span": "1720[79:34]-1725[79:39]"
        },
        "!proto": "THREE.Material.prototype",
        "constructor": "THREE.MeshBasicMaterial"
      },
      "!type": "fn(parameters: ?)",
      "!span": "844[37:6]-861[37:23]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/ * parameters = { color: <hex>, opacity: <float>, map: new THREE.Texture( <Image> ), * lightMap: new THREE.Texture( <Image> ), * specularMap: new THREE.Texture( <Image> ), * alphaMap: new THREE.Texture( <Image> ), * envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ), combine: THREE.Multiply, reflectivity: <float>, refractionRatio: <float>, * shading: THREE.SmoothShading, blending: THREE.NormalBlending, depthTest: <bool>, depthWrite: <bool>, * wireframe: <boolean>, wireframeLinewidth: <float>, * vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors, * skinning: <bool>, morphTargets: <bool>, * fog: <bool> }",
      "type": {
        "!type": "string",
        "!span": "928[41:0]-932[41:4]"
      },
      "combine": {
        "!type": "number",
        "!span": "1134[54:6]-1141[54:13]"
      },
      "reflectivity": {
        "!type": "number",
        "!span": "1175[55:6]-1187[55:18]"
      },
      "refractionRatio": {
        "!type": "number",
        "!span": "1199[56:6]-1214[56:21]"
      },
      "fog": {
        "!type": "bool",
        "!span": "1230[58:6]-1233[58:9]"
      },
      "shading": {
        "!type": "number",
        "!span": "1249[60:6]-1256[60:13]"
      },
      "wireframe": {
        "!type": "bool",
        "!span": "1287[62:6]-1296[62:15]"
      },
      "wireframeLinewidth": {
        "!type": "number",
        "!span": "1312[63:6]-1330[63:24]"
      },
      "wireframeLinecap": {
        "!type": "string",
        "!span": "1342[64:6]-1358[64:22]"
      },
      "wireframeLinejoin": {
        "!type": "string",
        "!span": "1376[65:6]-1393[65:23]"
      },
      "vertexColors": {
        "!type": "number",
        "!span": "1412[67:6]-1424[67:18]"
      },
      "skinning": {
        "!type": "bool",
        "!span": "1450[69:6]-1458[69:14]"
      },
      "morphTargets": {
        "!type": "bool",
        "!span": "1474[70:6]-1486[70:18]"
      },
      "id": {
        "!type": "number",
        "!span": "158[7:30]-162[7:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "210[9:6]-214[9:10]"
      },
      "name": {
        "!type": "string",
        "!span": "251[11:6]-255[11:10]"
      },
      "side": {
        "!type": "number",
        "!span": "294[14:6]-298[14:10]"
      },
      "opacity": {
        "!type": "number",
        "!span": "325[16:6]-332[16:13]"
      },
      "transparent": {
        "!type": "bool",
        "!span": "344[17:6]-355[17:17]"
      },
      "blending": {
        "!type": "number",
        "!span": "372[19:6]-380[19:14]"
      },
      "blendSrc": {
        "!type": "number",
        "!span": "412[21:6]-420[21:14]"
      },
      "blendDst": {
        "!type": "number",
        "!span": "451[22:6]-459[22:14]"
      },
      "blendEquation": {
        "!type": "number",
        "!span": "498[23:6]-511[23:19]"
      },
      "depthTest": {
        "!type": "bool",
        "!span": "629[28:6]-638[28:15]"
      },
      "depthWrite": {
        "!type": "bool",
        "!span": "653[29:6]-663[29:16]"
      },
      "colorWrite": {
        "!type": "bool",
        "!span": "679[31:6]-689[31:16]"
      },
      "polygonOffset": {
        "!type": "bool",
        "!span": "705[33:6]-718[33:19]"
      },
      "polygonOffsetFactor": {
        "!type": "number",
        "!span": "734[34:6]-753[34:25]"
      },
      "polygonOffsetUnits": {
        "!type": "number",
        "!span": "765[35:6]-783[35:24]"
      },
      "alphaTest": {
        "!type": "number",
        "!span": "796[37:6]-805[37:15]"
      },
      "overdraw": {
        "!type": "number",
        "!span": "818[39:6]-826[39:14]"
      },
      "visible": {
        "!type": "bool",
        "!span": "934[41:6]-941[41:13]"
      },
      "_needsUpdate": {
        "!type": "bool",
        "!span": "957[43:6]-969[43:18]"
      }
    },
    "MeshDepthMaterial": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.MeshDepthMaterial",
          "!span": "717[33:34]-722[33:39]"
        },
        "!proto": "THREE.Material.prototype",
        "!span": "554[30:24]-563[30:33]",
        "constructor": "THREE.MeshDepthMaterial"
      },
      "!type": "fn(parameters: ?)",
      "!span": "297[16:6]-314[16:23]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/ * parameters = { opacity: <float>, * blending: THREE.NormalBlending, depthTest: <bool>, depthWrite: <bool>, * wireframe: <boolean>, wireframeLinewidth: <float> }",
      "type": {
        "!type": "string",
        "!span": "381[20:6]-385[20:10]"
      },
      "morphTargets": {
        "!type": "bool",
        "!span": "416[22:6]-428[22:18]"
      },
      "wireframe": {
        "!type": "bool",
        "!span": "444[23:6]-453[23:15]"
      },
      "wireframeLinewidth": {
        "!type": "number",
        "!span": "469[24:6]-487[24:24]"
      },
      "name": {
        "!type": "string",
        "!span": "4922[193:11]-4926[193:15]"
      },
      "side": {
        "!type": "number",
        "!span": "4952[195:11]-4956[195:15]"
      },
      "opacity": {
        "!type": "number",
        "!span": "4982[197:11]-4989[197:18]"
      },
      "transparent": {
        "!type": "bool",
        "!span": "5017[198:11]-5028[198:22]"
      },
      "blending": {
        "!type": "number",
        "!span": "5061[200:11]-5069[200:19]"
      },
      "blendSrc": {
        "!type": "number",
        "!span": "5099[202:11]-5107[202:19]"
      },
      "blendDst": {
        "!type": "number",
        "!span": "5136[203:11]-5144[203:19]"
      },
      "blendEquation": {
        "!type": "number",
        "!span": "5173[204:11]-5186[204:24]"
      },
      "depthTest": {
        "!type": "bool",
        "!span": "5372[209:11]-5381[209:20]"
      },
      "depthWrite": {
        "!type": "bool",
        "!span": "5411[210:11]-5421[210:21]"
      },
      "polygonOffset": {
        "!type": "bool",
        "!span": "5453[212:11]-5466[212:24]"
      },
      "polygonOffsetFactor": {
        "!type": "number",
        "!span": "5500[213:11]-5519[213:30]"
      },
      "polygonOffsetUnits": {
        "!type": "number",
        "!span": "5559[214:11]-5577[214:29]"
      },
      "alphaTest": {
        "!type": "number",
        "!span": "5617[216:11]-5626[216:20]"
      },
      "overdraw": {
        "!type": "number",
        "!span": "5657[218:11]-5665[218:19]"
      },
      "visible": {
        "!type": "bool",
        "!span": "5695[220:11]-5702[220:18]"
      }
    },
    "MeshFaceMaterial": {
      "prototype": {
        "toJSON": {
          "!type": "fn() -> THREE.MeshFaceMaterial.prototype.toJSON.!ret",
          "!span": "321[18:1]-327[18:7]"
        },
        "clone": {
          "!type": "fn() -> +THREE.MeshFaceMaterial",
          "!span": "670[41:1]-675[41:6]"
        },
        "!span": "278[14:35]-886[55:1]",
        "constructor": "THREE.MeshFaceMaterial"
      },
      "!type": "fn(materials: ?)",
      "!span": "54[4:6]-70[4:22]",
      "!doc": "@author mrdoob / http://mrdoob.com/",
      "uuid": {
        "!type": "string",
        "!span": "105[6:6]-109[6:10]"
      },
      "type": {
        "!type": "string",
        "!span": "146[8:6]-150[8:10]"
      },
      "materials": {
        "!type": "[?]",
        "!span": "181[10:6]-190[10:15]"
      }
    },
    "MeshLambertMaterial": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.MeshLambertMaterial",
          "!span": "1927[87:36]-1932[87:41]"
        },
        "!proto": "THREE.Material.prototype",
        "!span": "1758[84:26]-1767[84:35]",
        "constructor": "THREE.MeshLambertMaterial"
      },
      "!type": "fn(parameters: ?)",
      "!span": "893[40:6]-912[40:25]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/ * parameters = { color: <hex>, emissive: <hex>, opacity: <float>, * map: new THREE.Texture( <Image> ), * lightMap: new THREE.Texture( <Image> ), * specularMap: new THREE.Texture( <Image> ), * alphaMap: new THREE.Texture( <Image> ), * envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ), combine: THREE.Multiply, reflectivity: <float>, refractionRatio: <float>, * shading: THREE.SmoothShading, blending: THREE.NormalBlending, depthTest: <bool>, depthWrite: <bool>, * wireframe: <boolean>, wireframeLinewidth: <float>, * vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors, * skinning: <bool>, morphTargets: <bool>, morphNormals: <bool>, * fog: <bool> }",
      "type": {
        "!type": "string",
        "!span": "979[44:6]-983[44:10]"
      },
      "wrapAround": {
        "!type": "bool",
        "!span": "1117[49:6]-1127[49:16]"
      },
      "combine": {
        "!type": "number",
        "!span": "1305[61:6]-1312[61:13]"
      },
      "reflectivity": {
        "!type": "number",
        "!span": "1346[62:6]-1358[62:18]"
      },
      "refractionRatio": {
        "!type": "number",
        "!span": "1370[63:6]-1385[63:21]"
      },
      "fog": {
        "!type": "bool",
        "!span": "1401[65:6]-1404[65:9]"
      },
      "shading": {
        "!type": "number",
        "!span": "1420[67:6]-1427[67:13]"
      },
      "wireframe": {
        "!type": "bool",
        "!span": "1458[69:6]-1467[69:15]"
      },
      "wireframeLinewidth": {
        "!type": "number",
        "!span": "1483[70:6]-1501[70:24]"
      },
      "wireframeLinecap": {
        "!type": "string",
        "!span": "1513[71:6]-1529[71:22]"
      },
      "wireframeLinejoin": {
        "!type": "string",
        "!span": "1547[72:6]-1564[72:23]"
      },
      "vertexColors": {
        "!type": "number",
        "!span": "1583[74:6]-1595[74:18]"
      },
      "skinning": {
        "!type": "bool",
        "!span": "1621[76:6]-1629[76:14]"
      },
      "morphTargets": {
        "!type": "bool",
        "!span": "1645[77:6]-1657[77:18]"
      },
      "morphNormals": {
        "!type": "bool",
        "!span": "1673[78:6]-1685[78:18]"
      },
      "name": {
        "!type": "string",
        "!span": "4922[193:11]-4926[193:15]"
      },
      "side": {
        "!type": "number",
        "!span": "4952[195:11]-4956[195:15]"
      },
      "opacity": {
        "!type": "number",
        "!span": "4982[197:11]-4989[197:18]"
      },
      "transparent": {
        "!type": "bool",
        "!span": "5017[198:11]-5028[198:22]"
      },
      "blending": {
        "!type": "number",
        "!span": "5061[200:11]-5069[200:19]"
      },
      "blendSrc": {
        "!type": "number",
        "!span": "5099[202:11]-5107[202:19]"
      },
      "blendDst": {
        "!type": "number",
        "!span": "5136[203:11]-5144[203:19]"
      },
      "blendEquation": {
        "!type": "number",
        "!span": "5173[204:11]-5186[204:24]"
      },
      "depthTest": {
        "!type": "bool",
        "!span": "5372[209:11]-5381[209:20]"
      },
      "depthWrite": {
        "!type": "bool",
        "!span": "5411[210:11]-5421[210:21]"
      },
      "polygonOffset": {
        "!type": "bool",
        "!span": "5453[212:11]-5466[212:24]"
      },
      "polygonOffsetFactor": {
        "!type": "number",
        "!span": "5500[213:11]-5519[213:30]"
      },
      "polygonOffsetUnits": {
        "!type": "number",
        "!span": "5559[214:11]-5577[214:29]"
      },
      "alphaTest": {
        "!type": "number",
        "!span": "5617[216:11]-5626[216:20]"
      },
      "overdraw": {
        "!type": "number",
        "!span": "5657[218:11]-5665[218:19]"
      },
      "visible": {
        "!type": "bool",
        "!span": "5695[220:11]-5702[220:18]"
      }
    },
    "MeshNormalMaterial": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.MeshNormalMaterial",
          "!span": "720[34:35]-725[34:40]"
        },
        "!proto": "THREE.Material.prototype",
        "!span": "554[31:25]-563[31:34]",
        "constructor": "THREE.MeshNormalMaterial"
      },
      "!type": "fn(parameters: ?)",
      "!span": "281[16:6]-299[16:24]",
      "!doc": "@author mrdoob / http://mrdoob.com/ * parameters = { opacity: <float>, * shading: THREE.FlatShading, blending: THREE.NormalBlending, depthTest: <bool>, depthWrite: <bool>, * wireframe: <boolean>, wireframeLinewidth: <float> }",
      "type": {
        "!type": "string",
        "!span": "378[20:6]-382[20:10]"
      },
      "wireframe": {
        "!type": "bool",
        "!span": "414[22:6]-423[22:15]"
      },
      "wireframeLinewidth": {
        "!type": "number",
        "!span": "439[23:6]-457[23:24]"
      },
      "morphTargets": {
        "!type": "bool",
        "!span": "470[25:6]-482[25:18]"
      },
      "name": {
        "!type": "string",
        "!span": "4922[193:11]-4926[193:15]"
      },
      "side": {
        "!type": "number",
        "!span": "4952[195:11]-4956[195:15]"
      },
      "opacity": {
        "!type": "number",
        "!span": "4982[197:11]-4989[197:18]"
      },
      "transparent": {
        "!type": "bool",
        "!span": "5017[198:11]-5028[198:22]"
      },
      "blending": {
        "!type": "number",
        "!span": "5061[200:11]-5069[200:19]"
      },
      "blendSrc": {
        "!type": "number",
        "!span": "5099[202:11]-5107[202:19]"
      },
      "blendDst": {
        "!type": "number",
        "!span": "5136[203:11]-5144[203:19]"
      },
      "blendEquation": {
        "!type": "number",
        "!span": "5173[204:11]-5186[204:24]"
      },
      "depthTest": {
        "!type": "bool",
        "!span": "5372[209:11]-5381[209:20]"
      },
      "depthWrite": {
        "!type": "bool",
        "!span": "5411[210:11]-5421[210:21]"
      },
      "polygonOffset": {
        "!type": "bool",
        "!span": "5453[212:11]-5466[212:24]"
      },
      "polygonOffsetFactor": {
        "!type": "number",
        "!span": "5500[213:11]-5519[213:30]"
      },
      "polygonOffsetUnits": {
        "!type": "number",
        "!span": "5559[214:11]-5577[214:29]"
      },
      "alphaTest": {
        "!type": "number",
        "!span": "5617[216:11]-5626[216:20]"
      },
      "overdraw": {
        "!type": "number",
        "!span": "5657[218:11]-5665[218:19]"
      },
      "visible": {
        "!type": "bool",
        "!span": "5695[220:11]-5702[220:18]"
      }
    },
    "MeshPhongMaterial": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.MeshPhongMaterial",
          "!span": "2312[105:34]-2317[105:39]"
        },
        "!proto": "THREE.Material.prototype",
        "!span": "2149[102:24]-2158[102:33]",
        "constructor": "THREE.MeshPhongMaterial"
      },
      "!type": "fn(parameters: ?)",
      "!span": "1084[48:6]-1101[48:23]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/ * parameters = { color: <hex>, emissive: <hex>, specular: <hex>, shininess: <float>, opacity: <float>, * map: new THREE.Texture( <Image> ), * lightMap: new THREE.Texture( <Image> ), * bumpMap: new THREE.Texture( <Image> ), bumpScale: <float>, * normalMap: new THREE.Texture( <Image> ), normalScale: <Vector2>, * specularMap: new THREE.Texture( <Image> ), * alphaMap: new THREE.Texture( <Image> ), * envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ), combine: THREE.Multiply, reflectivity: <float>, refractionRatio: <float>, * shading: THREE.SmoothShading, blending: THREE.NormalBlending, depthTest: <bool>, depthWrite: <bool>, * wireframe: <boolean>, wireframeLinewidth: <float>, * vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors, * skinning: <bool>, morphTargets: <bool>, morphNormals: <bool>, * fog: <bool> }",
      "type": {
        "!type": "string",
        "!span": "1168[52:6]-1172[52:10]"
      },
      "shininess": {
        "!type": "number",
        "!span": "1349[57:6]-1358[57:15]"
      },
      "metal": {
        "!type": "bool",
        "!span": "1372[59:6]-1377[59:11]"
      },
      "wrapAround": {
        "!type": "bool",
        "!span": "1394[61:6]-1404[61:16]"
      },
      "bumpScale": {
        "!type": "number",
        "!span": "1532[69:6]-1541[69:15]"
      },
      "combine": {
        "!type": "number",
        "!span": "1698[79:6]-1705[79:13]"
      },
      "reflectivity": {
        "!type": "number",
        "!span": "1739[80:6]-1751[80:18]"
      },
      "refractionRatio": {
        "!type": "number",
        "!span": "1763[81:6]-1778[81:21]"
      },
      "fog": {
        "!type": "bool",
        "!span": "1794[83:6]-1797[83:9]"
      },
      "shading": {
        "!type": "number",
        "!span": "1813[85:6]-1820[85:13]"
      },
      "wireframe": {
        "!type": "bool",
        "!span": "1851[87:6]-1860[87:15]"
      },
      "wireframeLinewidth": {
        "!type": "number",
        "!span": "1876[88:6]-1894[88:24]"
      },
      "wireframeLinecap": {
        "!type": "string",
        "!span": "1906[89:6]-1922[89:22]"
      },
      "wireframeLinejoin": {
        "!type": "string",
        "!span": "1940[90:6]-1957[90:23]"
      },
      "vertexColors": {
        "!type": "number",
        "!span": "1976[92:6]-1988[92:18]"
      },
      "skinning": {
        "!type": "bool",
        "!span": "2014[94:6]-2022[94:14]"
      },
      "morphTargets": {
        "!type": "bool",
        "!span": "2038[95:6]-2050[95:18]"
      },
      "morphNormals": {
        "!type": "bool",
        "!span": "2066[96:6]-2078[96:18]"
      },
      "name": {
        "!type": "string",
        "!span": "4922[193:11]-4926[193:15]"
      },
      "side": {
        "!type": "number",
        "!span": "4952[195:11]-4956[195:15]"
      },
      "opacity": {
        "!type": "number",
        "!span": "4982[197:11]-4989[197:18]"
      },
      "transparent": {
        "!type": "bool",
        "!span": "5017[198:11]-5028[198:22]"
      },
      "blending": {
        "!type": "number",
        "!span": "5061[200:11]-5069[200:19]"
      },
      "blendSrc": {
        "!type": "number",
        "!span": "5099[202:11]-5107[202:19]"
      },
      "blendDst": {
        "!type": "number",
        "!span": "5136[203:11]-5144[203:19]"
      },
      "blendEquation": {
        "!type": "number",
        "!span": "5173[204:11]-5186[204:24]"
      },
      "depthTest": {
        "!type": "bool",
        "!span": "5372[209:11]-5381[209:20]"
      },
      "depthWrite": {
        "!type": "bool",
        "!span": "5411[210:11]-5421[210:21]"
      },
      "polygonOffset": {
        "!type": "bool",
        "!span": "5453[212:11]-5466[212:24]"
      },
      "polygonOffsetFactor": {
        "!type": "number",
        "!span": "5500[213:11]-5519[213:30]"
      },
      "polygonOffsetUnits": {
        "!type": "number",
        "!span": "5559[214:11]-5577[214:29]"
      },
      "alphaTest": {
        "!type": "number",
        "!span": "5617[216:11]-5626[216:20]"
      },
      "overdraw": {
        "!type": "number",
        "!span": "5657[218:11]-5665[218:19]"
      },
      "visible": {
        "!type": "bool",
        "!span": "5695[220:11]-5702[220:18]"
      }
    },
    "PointCloudMaterial": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.PointCloudMaterial",
          "!span": "901[46:35]-906[46:40]"
        },
        "!proto": "THREE.Material.prototype",
        "!span": "735[43:25]-744[43:34]",
        "constructor": "THREE.PointCloudMaterial"
      },
      "!type": "fn(parameters: THREE.PointCloudMaterial.!0)",
      "!span": "392[22:6]-410[22:24]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/ * parameters = { color: <hex>, opacity: <float>, map: new THREE.Texture( <Image> ), * size: <float>, sizeAttenuation: <bool>, * blending: THREE.NormalBlending, depthTest: <bool>, depthWrite: <bool>, * vertexColors: <bool>, * fog: <bool> }",
      "type": {
        "!type": "string",
        "!span": "477[26:6]-481[26:10]"
      },
      "size": {
        "!type": "number",
        "!span": "576[32:6]-580[32:10]"
      },
      "sizeAttenuation": {
        "!type": "bool",
        "!span": "592[33:6]-607[33:21]"
      },
      "vertexColors": {
        "!type": "number",
        "!span": "623[35:6]-635[35:18]"
      },
      "fog": {
        "!type": "bool",
        "!span": "661[37:6]-664[37:9]"
      },
      "name": {
        "!type": "string",
        "!span": "4922[193:11]-4926[193:15]"
      },
      "side": {
        "!type": "number",
        "!span": "4952[195:11]-4956[195:15]"
      },
      "opacity": {
        "!type": "number",
        "!span": "4982[197:11]-4989[197:18]"
      },
      "transparent": {
        "!type": "bool",
        "!span": "5017[198:11]-5028[198:22]"
      },
      "blending": {
        "!type": "number",
        "!span": "5061[200:11]-5069[200:19]"
      },
      "blendSrc": {
        "!type": "number",
        "!span": "5099[202:11]-5107[202:19]"
      },
      "blendDst": {
        "!type": "number",
        "!span": "5136[203:11]-5144[203:19]"
      },
      "blendEquation": {
        "!type": "number",
        "!span": "5173[204:11]-5186[204:24]"
      },
      "depthTest": {
        "!type": "bool",
        "!span": "5372[209:11]-5381[209:20]"
      },
      "depthWrite": {
        "!type": "bool",
        "!span": "5411[210:11]-5421[210:21]"
      },
      "polygonOffset": {
        "!type": "bool",
        "!span": "5453[212:11]-5466[212:24]"
      },
      "polygonOffsetFactor": {
        "!type": "number",
        "!span": "5500[213:11]-5519[213:30]"
      },
      "polygonOffsetUnits": {
        "!type": "number",
        "!span": "5559[214:11]-5577[214:29]"
      },
      "alphaTest": {
        "!type": "number",
        "!span": "5617[216:11]-5626[216:20]"
      },
      "overdraw": {
        "!type": "number",
        "!span": "5657[218:11]-5665[218:19]"
      },
      "visible": {
        "!type": "bool",
        "!span": "5695[220:11]-5702[220:18]"
      }
    },
    "ParticleBasicMaterial": {
      "!type": "fn(parameters: ?) -> +THREE.PointCloudMaterial",
      "!span": "1302[69:6]-1323[69:27]",
      "!doc": "backwards compatibility"
    },
    "ParticleSystemMaterial": {
      "!type": "fn(parameters: ?) -> +THREE.PointCloudMaterial",
      "!span": "1508[76:6]-1530[76:28]"
    },
    "RawShaderMaterial": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.RawShaderMaterial",
          "!span": "382[15:34]-387[15:39]"
        },
        "!span": "213[12:24]-222[12:33]",
        "constructor": "THREE.RawShaderMaterial"
      },
      "!type": "fn(parameters: ?)",
      "!span": "54[4:6]-71[4:23]",
      "!doc": "@author mrdoob / http://mrdoob.com/",
      "type": {
        "!type": "string",
        "!span": "156[7:28]-160[7:32]"
      },
      "vertexShader": {
        "!type": "string",
        "!span": "841[32:18]-853[33:3]"
      },
      "fragmentShader": {
        "!type": "string",
        "!span": "959[36:0]-973[38:7]"
      },
      "shading": {
        "!type": "number",
        "!span": "1049[43:6]-1056[43:13]"
      },
      "linewidth": {
        "!type": "number",
        "!span": "1087[45:6]-1096[45:15]"
      },
      "wireframe": {
        "!type": "bool",
        "!span": "1109[47:6]-1118[47:15]"
      },
      "wireframeLinewidth": {
        "!type": "number",
        "!span": "1134[48:6]-1152[48:24]"
      },
      "fog": {
        "!type": "bool",
        "!span": "1165[50:6]-1168[50:9]"
      },
      "lights": {
        "!type": "bool",
        "!span": "1209[52:6]-1215[52:12]"
      },
      "vertexColors": {
        "!type": "number",
        "!span": "1259[54:6]-1271[54:18]"
      },
      "skinning": {
        "!type": "bool",
        "!span": "1336[49:11]-1344[49:19]"
      },
      "morphTargets": {
        "!type": "bool",
        "!span": "1402[53:31]-1414[54:7]"
      },
      "morphNormals": {
        "!type": "bool",
        "!span": "1458[59:6]-1470[59:18]"
      },
      "name": {
        "!type": "string",
        "!span": "4922[193:11]-4926[193:15]"
      },
      "side": {
        "!type": "number",
        "!span": "4952[195:11]-4956[195:15]"
      },
      "opacity": {
        "!type": "number",
        "!span": "4982[197:11]-4989[197:18]"
      },
      "transparent": {
        "!type": "bool",
        "!span": "5017[198:11]-5028[198:22]"
      },
      "blending": {
        "!type": "number",
        "!span": "5061[200:11]-5069[200:19]"
      },
      "blendSrc": {
        "!type": "number",
        "!span": "5099[202:11]-5107[202:19]"
      },
      "blendDst": {
        "!type": "number",
        "!span": "5136[203:11]-5144[203:19]"
      },
      "blendEquation": {
        "!type": "number",
        "!span": "5173[204:11]-5186[204:24]"
      },
      "depthTest": {
        "!type": "bool",
        "!span": "5372[209:11]-5381[209:20]"
      },
      "depthWrite": {
        "!type": "bool",
        "!span": "5411[210:11]-5421[210:21]"
      },
      "polygonOffset": {
        "!type": "bool",
        "!span": "5453[212:11]-5466[212:24]"
      },
      "polygonOffsetFactor": {
        "!type": "number",
        "!span": "5500[213:11]-5519[213:30]"
      },
      "polygonOffsetUnits": {
        "!type": "number",
        "!span": "5559[214:11]-5577[214:29]"
      },
      "alphaTest": {
        "!type": "number",
        "!span": "5617[216:11]-5626[216:20]"
      },
      "overdraw": {
        "!type": "number",
        "!span": "5657[218:11]-5665[218:19]"
      },
      "visible": {
        "!type": "bool",
        "!span": "5695[220:11]-5702[220:18]"
      },
      "id": {
        "!type": "number",
        "!span": "158[7:30]-162[7:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "210[9:6]-214[9:10]"
      },
      "colorWrite": {
        "!type": "bool",
        "!span": "679[31:6]-689[31:16]"
      },
      "_needsUpdate": {
        "!type": "bool",
        "!span": "957[43:6]-969[43:18]"
      }
    },
    "ShaderMaterial": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.ShaderMaterial",
          "!span": "2028[78:31]-2033[78:36]"
        },
        "!proto": "THREE.Material.prototype",
        "constructor": "THREE.ShaderMaterial"
      },
      "!type": "fn(parameters: THREE.LineDashedMaterial.!0)",
      "!span": "661[30:6]-675[30:20]",
      "!doc": "@author alteredq / http://alteredqualia.com/ * parameters = { defines: { \"label\" : \"value\" }, uniforms: { \"parameter1\": { type: \"f\", value: 1.0 }, \"parameter2\": { type: \"i\" value2: 2 } }, * fragmentShader: <string>, vertexShader: <string>, * shading: THREE.SmoothShading, blending: THREE.NormalBlending, depthTest: <bool>, depthWrite: <bool>, * wireframe: <boolean>, wireframeLinewidth: <float>, * lights: <bool>, * vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors, * skinning: <bool>, morphTargets: <bool>, morphNormals: <bool>, * fog: <bool> }",
      "type": {
        "!type": "string",
        "!span": "742[34:14]-746[34:18]"
      },
      "vertexShader": {
        "!type": "string",
        "!span": "841[32:18]-853[33:3]"
      },
      "fragmentShader": {
        "!type": "string",
        "!span": "959[36:0]-973[38:7]"
      },
      "shading": {
        "!type": "number",
        "!span": "1049[43:6]-1056[43:13]"
      },
      "linewidth": {
        "!type": "number",
        "!span": "1087[45:6]-1096[45:15]"
      },
      "wireframe": {
        "!type": "bool",
        "!span": "1109[47:6]-1118[47:15]"
      },
      "wireframeLinewidth": {
        "!type": "number",
        "!span": "1134[48:6]-1152[48:24]"
      },
      "fog": {
        "!type": "bool",
        "!span": "1165[50:6]-1168[50:9]"
      },
      "lights": {
        "!type": "bool",
        "!span": "1209[52:6]-1215[52:12]"
      },
      "vertexColors": {
        "!type": "number",
        "!span": "1259[54:6]-1271[54:18]"
      },
      "skinning": {
        "!type": "bool",
        "!span": "1336[49:11]-1344[49:19]"
      },
      "morphTargets": {
        "!type": "bool",
        "!span": "1402[53:31]-1414[54:7]"
      },
      "morphNormals": {
        "!type": "bool",
        "!span": "1458[59:6]-1470[59:18]"
      },
      "defaultAttributeValues": {
        "color": {
          "!type": "[number]",
          "!span": "1714[64:2]-1721[64:9]"
        },
        "uv": {
          "!type": "[number]",
          "!span": "1738[65:2]-1742[65:6]"
        },
        "uv2": {
          "!type": "[number]",
          "!span": "1756[66:2]-1761[66:7]"
        },
        "!span": "1685[63:6]-1707[63:28]",
        "!doc": "When rendered geometry doesn't include these attributes but the material does, use these default values in WebGL."
      },
      "id": {
        "!type": "number",
        "!span": "158[7:30]-162[7:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "210[9:6]-214[9:10]"
      },
      "name": {
        "!type": "string",
        "!span": "251[11:6]-255[11:10]"
      },
      "side": {
        "!type": "number",
        "!span": "294[14:6]-298[14:10]"
      },
      "opacity": {
        "!type": "number",
        "!span": "325[16:6]-332[16:13]"
      },
      "transparent": {
        "!type": "bool",
        "!span": "344[17:6]-355[17:17]"
      },
      "blending": {
        "!type": "number",
        "!span": "372[19:6]-380[19:14]"
      },
      "blendSrc": {
        "!type": "number",
        "!span": "412[21:6]-420[21:14]"
      },
      "blendDst": {
        "!type": "number",
        "!span": "451[22:6]-459[22:14]"
      },
      "blendEquation": {
        "!type": "number",
        "!span": "498[23:6]-511[23:19]"
      },
      "depthTest": {
        "!type": "bool",
        "!span": "629[28:6]-638[28:15]"
      },
      "depthWrite": {
        "!type": "bool",
        "!span": "653[29:6]-663[29:16]"
      },
      "colorWrite": {
        "!type": "bool",
        "!span": "679[31:6]-689[31:16]"
      },
      "polygonOffset": {
        "!type": "bool",
        "!span": "705[33:6]-718[33:19]"
      },
      "polygonOffsetFactor": {
        "!type": "number",
        "!span": "734[34:6]-753[34:25]"
      },
      "polygonOffsetUnits": {
        "!type": "number",
        "!span": "765[35:6]-783[35:24]"
      },
      "alphaTest": {
        "!type": "number",
        "!span": "796[37:6]-805[37:15]"
      },
      "overdraw": {
        "!type": "number",
        "!span": "818[39:6]-826[39:14]"
      },
      "visible": {
        "!type": "bool",
        "!span": "934[41:6]-941[41:13]"
      },
      "_needsUpdate": {
        "!type": "bool",
        "!span": "957[43:6]-969[43:18]"
      },
      "_shadowPass": {
        "!type": "bool",
        "!span": "1387[53:16]-1398[53:27]"
      }
    },
    "SpriteMaterial": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.SpriteMaterial",
          "!span": "784[41:31]-789[41:36]"
        },
        "!proto": "THREE.Material.prototype",
        "!span": "630[38:21]-639[38:30]",
        "constructor": "THREE.SpriteMaterial"
      },
      "!type": "fn(parameters: ?)",
      "!span": "343[19:6]-357[19:20]",
      "!doc": "@author alteredq / http://alteredqualia.com/ * parameters = { color: <hex>, opacity: <float>, map: new THREE.Texture( <Image> ), * blending: THREE.NormalBlending, depthTest: <bool>, depthWrite: <bool>, * uvOffset: new THREE.Vector2(), uvScale: new THREE.Vector2(), * fog: <bool> }",
      "type": {
        "!type": "string",
        "!span": "424[23:6]-428[23:10]"
      },
      "rotation": {
        "!type": "number",
        "!span": "518[28:6]-526[28:14]"
      },
      "fog": {
        "!type": "bool",
        "!span": "539[30:6]-542[30:9]"
      },
      "name": {
        "!type": "string",
        "!span": "4922[193:11]-4926[193:15]"
      },
      "side": {
        "!type": "number",
        "!span": "4952[195:11]-4956[195:15]"
      },
      "opacity": {
        "!type": "number",
        "!span": "4982[197:11]-4989[197:18]"
      },
      "transparent": {
        "!type": "bool",
        "!span": "5017[198:11]-5028[198:22]"
      },
      "blending": {
        "!type": "number",
        "!span": "5061[200:11]-5069[200:19]"
      },
      "blendSrc": {
        "!type": "number",
        "!span": "5099[202:11]-5107[202:19]"
      },
      "blendDst": {
        "!type": "number",
        "!span": "5136[203:11]-5144[203:19]"
      },
      "blendEquation": {
        "!type": "number",
        "!span": "5173[204:11]-5186[204:24]"
      },
      "depthTest": {
        "!type": "bool",
        "!span": "5372[209:11]-5381[209:20]"
      },
      "depthWrite": {
        "!type": "bool",
        "!span": "5411[210:11]-5421[210:21]"
      },
      "polygonOffset": {
        "!type": "bool",
        "!span": "5453[212:11]-5466[212:24]"
      },
      "polygonOffsetFactor": {
        "!type": "number",
        "!span": "5500[213:11]-5519[213:30]"
      },
      "polygonOffsetUnits": {
        "!type": "number",
        "!span": "5559[214:11]-5577[214:29]"
      },
      "alphaTest": {
        "!type": "number",
        "!span": "5617[216:11]-5626[216:20]"
      },
      "overdraw": {
        "!type": "number",
        "!span": "5657[218:11]-5665[218:19]"
      },
      "visible": {
        "!type": "bool",
        "!span": "5695[220:11]-5702[220:18]"
      }
    },
    "Box2": {
      "prototype": {
        "set": {
          "!type": "fn(min: ?, max: ?) -> !this",
          "!span": "319[15:1]-322[15:4]"
        },
        "setFromPoints": {
          "!type": "fn(points: ?) -> !this",
          "!span": "420[24:1]-433[24:14]"
        },
        "setFromCenterAndSize": {
          "!type": "fn(center: ?, size: ?) -> !this",
          "!span": "601[38:1]-621[38:21]"
        },
        "copy": {
          "!type": "fn(box: +THREE.Box2) -> !this",
          "!span": "886[54:1]-890[54:5]"
        },
        "makeEmpty": {
          "!type": "fn() -> !this",
          "!span": "991[63:1]-1000[63:10]"
        },
        "empty": {
          "!type": "fn() -> bool",
          "!span": "1118[72:1]-1123[72:6]"
        },
        "center": {
          "!type": "fn(optionalTarget: ?) -> +THREE.Vector2",
          "!span": "1336[80:1]-1342[80:7]"
        },
        "size": {
          "!type": "fn(optionalTarget: ?) -> +THREE.Vector2",
          "!span": "1508[87:1]-1512[87:5]"
        },
        "expandByPoint": {
          "!type": "fn(point: ?) -> !this",
          "!span": "1656[94:1]-1669[94:14]"
        },
        "expandByVector": {
          "!type": "fn(vector: ?) -> !this",
          "!span": "1765[102:1]-1779[102:15]"
        },
        "expandByScalar": {
          "!type": "fn(scalar: ?) -> !this",
          "!span": "1878[110:1]-1892[110:15]"
        },
        "containsPoint": {
          "!type": "fn(point: ?) -> bool",
          "!span": "2005[118:1]-2018[118:14]"
        },
        "containsBox": {
          "!type": "fn(box: ?) -> bool",
          "!span": "2199[131:1]-2210[131:12]"
        },
        "getParameter": {
          "!type": "fn(point: ?, optionalTarget: ?) -> +THREE.Vector2",
          "!span": "2417[144:1]-2429[144:13]"
        },
        "isIntersectionBox": {
          "!type": "fn(box: ?) -> bool",
          "!span": "2766[158:1]-2783[158:18]"
        },
        "clampPoint": {
          "!type": "fn(point: ?, optionalTarget: ?) -> +THREE.Vector2",
          "!span": "3028[173:1]-3038[173:11]"
        },
        "distanceToPoint": {
          "!type": "fn(point: ?) -> number",
          "!span": "3198[180:1]-3213[180:16]"
        },
        "intersect": {
          "!type": "fn(box: ?) -> !this",
          "!span": "3423[193:1]-3432[193:10]"
        },
        "union": {
          "!type": "fn(box: ?) -> !this",
          "!span": "3531[202:1]-3536[202:6]"
        },
        "translate": {
          "!type": "fn(offset: ?) -> !this",
          "!span": "3635[211:1]-3644[211:10]"
        },
        "equals": {
          "!type": "fn(box: ?)",
          "!span": "3744[220:1]-3750[220:7]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Box2",
          "!span": "3846[226:1]-3851[226:6]"
        },
        "!span": "288[11:23]-3914[232:1]",
        "constructor": "THREE.Box2"
      },
      "!type": "fn(min: ?, max: ?)",
      "!span": "58[4:6]-62[4:10]",
      "!doc": "@author bhouston / http://exocortex.com"
    },
    "Box3": {
      "prototype": {
        "set": {
          "!type": "fn(min: +THREE.Vector3, max: +THREE.Vector3) -> !this",
          "!span": "396[16:1]-399[16:4]"
        },
        "setFromPoints": {
          "!type": "fn(points: [+THREE.Vector3]) -> !this",
          "!span": "497[25:1]-510[25:14]"
        },
        "setFromCenterAndSize": {
          "!type": "fn(center: ?, size: ?) -> !this",
          "!span": "678[39:1]-698[39:21]"
        },
        "setFromObject": {
          "!type": "fn(object: ?) -> !this",
          "!span": "964[56:1]-977[56:14]"
        },
        "copy": {
          "!type": "fn(box: +THREE.Box3) -> !this",
          "!span": "2155[117:1]-2159[117:5]"
        },
        "makeEmpty": {
          "!type": "fn() -> !this",
          "!span": "2260[126:1]-2269[126:10]"
        },
        "empty": {
          "!type": "fn() -> bool",
          "!span": "2413[135:1]-2418[135:6]"
        },
        "center": {
          "!type": "fn(optionalTarget: +THREE.Vector3) -> +THREE.Vector3",
          "!span": "2662[143:1]-2668[143:7]"
        },
        "size": {
          "!type": "fn(optionalTarget: +THREE.Vector3) -> +THREE.Vector3",
          "!span": "2834[150:1]-2838[150:5]"
        },
        "expandByPoint": {
          "!type": "fn(point: +THREE.Vector3) -> !this",
          "!span": "2982[157:1]-2995[157:14]"
        },
        "expandByVector": {
          "!type": "fn(vector: ?) -> !this",
          "!span": "3092[166:1]-3106[166:15]"
        },
        "expandByScalar": {
          "!type": "fn(scalar: number) -> !this",
          "!span": "3206[175:1]-3220[175:15]"
        },
        "containsPoint": {
          "!type": "fn(point: ?) -> bool",
          "!span": "3334[184:1]-3347[184:14]"
        },
        "containsBox": {
          "!type": "fn(box: ?) -> bool",
          "!span": "3583[198:1]-3594[198:12]"
        },
        "getParameter": {
          "!type": "fn(point: ?, optionalTarget: ?) -> +THREE.Vector3",
          "!span": "3864[212:1]-3876[212:13]"
        },
        "isIntersectionBox": {
          "!type": "fn(box: ?) -> bool",
          "!span": "4272[227:1]-4289[227:18]"
        },
        "clampPoint": {
          "!type": "fn(point: ?, optionalTarget: ?) -> +THREE.Vector3",
          "!span": "4593[243:1]-4603[243:11]"
        },
        "distanceToPoint": {
          "!type": "fn(point: ?) -> number",
          "!span": "4763[250:1]-4778[250:16]"
        },
        "getBoundingSphere": {
          "!type": "fn(optionalTarget: ?) -> !0",
          "!span": "4988[263:1]-5005[263:18]"
        },
        "intersect": {
          "!type": "fn(box: ?) -> !this",
          "!span": "5269[280:1]-5278[280:10]"
        },
        "union": {
          "!type": "fn(box: ?) -> !this",
          "!span": "5377[289:1]-5382[289:6]"
        },
        "applyMatrix4": {
          "!type": "fn(matrix: ?) -> !this",
          "!span": "5481[298:1]-5493[298:13]"
        },
        "translate": {
          "!type": "fn(offset: ?) -> !this",
          "!span": "6626[332:1]-6635[332:10]"
        },
        "equals": {
          "!type": "fn(box: ?)",
          "!span": "6735[341:1]-6741[341:7]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Box3",
          "!span": "6837[347:1]-6842[347:6]"
        },
        "!span": "365[12:23]-6905[353:1]",
        "constructor": "THREE.Box3"
      },
      "!type": "fn(min: ?, max: ?)",
      "!span": "113[5:6]-117[5:10]",
      "!doc": "@author bhouston / http://exocortex.com @author WestLangley / http://github.com/WestLangley"
    },
    "Color": {
      "prototype": {
        "r": {
          "!type": "number",
          "!span": "282[20:1]-283[20:2]"
        },
        "g": {
          "!type": "number",
          "!span": "288[20:7]-289[20:8]"
        },
        "b": {
          "!type": "number",
          "!span": "294[20:13]-295[20:14]"
        },
        "set": {
          "!type": "fn(value: number) -> !this",
          "!span": "302[22:1]-305[22:4]"
        },
        "setHex": {
          "!type": "fn(hex: number) -> !this",
          "!span": "565[42:1]-571[42:7]"
        },
        "setRGB": {
          "!type": "fn(r: number, g: number, b: number) -> !this",
          "!span": "751[54:1]-757[54:7]"
        },
        "setHSL": {
          "!type": "fn(h: ?, s: ?, l: ?) -> !this",
          "!span": "848[64:1]-854[64:7]"
        },
        "setStyle": {
          "!type": "fn(style: number) -> !this",
          "!span": "1464[98:1]-1472[98:9]"
        },
        "copy": {
          "!type": "fn(color: +THREE.Color) -> !this",
          "!span": "2808[165:1]-2812[165:5]"
        },
        "copyGammaToLinear": {
          "!type": "fn(color: ?, gammaFactor: number) -> !this",
          "!span": "2919[175:1]-2936[175:18]"
        },
        "copyLinearToGamma": {
          "!type": "fn(color: ?, gammaFactor: number) -> !this",
          "!span": "3186[187:1]-3203[187:18]"
        },
        "convertGammaToLinear": {
          "!type": "fn() -> !this",
          "!span": "3525[201:1]-3545[201:21]"
        },
        "convertLinearToGamma": {
          "!type": "fn() -> !this",
          "!span": "3682[213:1]-3702[213:21]"
        },
        "getHex": {
          "!type": "fn() -> number",
          "!span": "3838[223:1]-3844[223:7]"
        },
        "getHexString": {
          "!type": "fn() -> string",
          "!span": "3949[229:1]-3961[229:13]"
        },
        "getHSL": {
          "!type": "fn(optionalTarget: ?) -> !0",
          "!span": "4052[235:1]-4058[235:7]"
        },
        "getStyle": {
          "!type": "fn() -> string",
          "!span": "4822[280:1]-4830[280:9]"
        },
        "offsetHSL": {
          "!type": "fn(h: ?, s: ?, l: ?) -> !this",
          "!span": "4970[286:1]-4979[286:10]"
        },
        "add": {
          "!type": "fn(color: ?) -> !this",
          "!span": "5133[298:1]-5136[298:4]"
        },
        "addColors": {
          "!type": "fn(color1: ?, color2: ?) -> !this",
          "!span": "5246[308:1]-5255[308:10]"
        },
        "addScalar": {
          "!type": "fn(s: ?) -> !this",
          "!span": "5407[318:1]-5416[318:10]"
        },
        "multiply": {
          "!type": "fn(color: ?) -> !this",
          "!span": "5504[328:1]-5512[328:9]"
        },
        "multiplyScalar": {
          "!type": "fn(s: ?) -> !this",
          "!span": "5622[338:1]-5636[338:15]"
        },
        "lerp": {
          "!type": "fn(color: ?, alpha: ?) -> !this",
          "!span": "5724[348:1]-5728[348:5]"
        },
        "equals": {
          "!type": "fn(c: ?) -> bool",
          "!span": "5908[358:1]-5914[358:7]"
        },
        "fromArray": {
          "!type": "fn(array: ?) -> !this",
          "!span": "6014[364:1]-6023[364:10]"
        },
        "toArray": {
          "!type": "fn(array: [number], offset: number) -> [!this.r]",
          "!span": "6139[374:1]-6146[374:8]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Color",
          "!span": "6377[386:1]-6382[386:6]"
        },
        "!span": "250[16:24]-6466[392:1]",
        "constructor": "THREE.Color"
      },
      "!type": "fn(color: number) -> +THREE.Color",
      "!span": "54[4:6]-59[4:11]",
      "!doc": "@author mrdoob / http://mrdoob.com/",
      "r": {
        "!type": "number",
        "!span": "628[46:7]-629[46:8]"
      },
      "g": {
        "!type": "number",
        "!span": "666[47:7]-667[47:8]"
      },
      "b": {
        "!type": "number",
        "!span": "703[48:7]-704[48:8]"
      }
    },
    "ColorKeywords": {
      "aliceblue": {
        "!type": "number",
        "!span": "6493[394:24]-6504[394:35]"
      },
      "antiquewhite": {
        "!type": "number",
        "!span": "6516[394:47]-6530[394:61]"
      },
      "aqua": {
        "!type": "number",
        "!span": "6542[394:73]-6548[394:79]"
      },
      "aquamarine": {
        "!type": "number",
        "!span": "6560[394:91]-6572[394:103]"
      },
      "azure": {
        "!type": "number",
        "!span": "6584[394:115]-6591[394:122]"
      },
      "beige": {
        "!type": "number",
        "!span": "6603[395:0]-6610[395:7]"
      },
      "bisque": {
        "!type": "number",
        "!span": "6622[395:19]-6630[395:27]"
      },
      "black": {
        "!type": "number",
        "!span": "6642[395:39]-6649[395:46]"
      },
      "blanchedalmond": {
        "!type": "number",
        "!span": "6661[395:58]-6677[395:74]"
      },
      "blue": {
        "!type": "number",
        "!span": "6689[395:86]-6695[395:92]"
      },
      "blueviolet": {
        "!type": "number",
        "!span": "6707[395:104]-6719[395:116]"
      },
      "brown": {
        "!type": "number",
        "!span": "6731[396:0]-6738[396:7]"
      },
      "burlywood": {
        "!type": "number",
        "!span": "6750[396:19]-6761[396:30]"
      },
      "cadetblue": {
        "!type": "number",
        "!span": "6773[396:42]-6784[396:53]"
      },
      "chartreuse": {
        "!type": "number",
        "!span": "6796[396:65]-6808[396:77]"
      },
      "chocolate": {
        "!type": "number",
        "!span": "6820[396:89]-6831[396:100]"
      },
      "coral": {
        "!type": "number",
        "!span": "6843[396:112]-6850[396:119]"
      },
      "cornflowerblue": {
        "!type": "number",
        "!span": "6862[397:0]-6878[397:16]"
      },
      "cornsilk": {
        "!type": "number",
        "!span": "6890[397:28]-6900[397:38]"
      },
      "crimson": {
        "!type": "number",
        "!span": "6912[397:50]-6921[397:59]"
      },
      "cyan": {
        "!type": "number",
        "!span": "6933[397:71]-6939[397:77]"
      },
      "darkblue": {
        "!type": "number",
        "!span": "6951[397:89]-6961[397:99]"
      },
      "darkcyan": {
        "!type": "number",
        "!span": "6973[397:111]-6983[397:121]"
      },
      "darkgoldenrod": {
        "!type": "number",
        "!span": "6995[398:0]-7010[398:15]"
      },
      "darkgray": {
        "!type": "number",
        "!span": "7022[398:27]-7032[398:37]"
      },
      "darkgreen": {
        "!type": "number",
        "!span": "7044[398:49]-7055[398:60]"
      },
      "darkgrey": {
        "!type": "number",
        "!span": "7067[398:72]-7077[398:82]"
      },
      "darkkhaki": {
        "!type": "number",
        "!span": "7089[398:94]-7100[398:105]"
      },
      "darkmagenta": {
        "!type": "number",
        "!span": "7112[398:117]-7125[398:130]"
      },
      "darkolivegreen": {
        "!type": "number",
        "!span": "7137[399:0]-7153[399:16]"
      },
      "darkorange": {
        "!type": "number",
        "!span": "7165[399:28]-7177[399:40]"
      },
      "darkorchid": {
        "!type": "number",
        "!span": "7189[399:52]-7201[399:64]"
      },
      "darkred": {
        "!type": "number",
        "!span": "7213[399:76]-7222[399:85]"
      },
      "darksalmon": {
        "!type": "number",
        "!span": "7234[399:97]-7246[399:109]"
      },
      "darkseagreen": {
        "!type": "number",
        "!span": "7258[399:121]-7272[399:135]"
      },
      "darkslateblue": {
        "!type": "number",
        "!span": "7284[400:0]-7299[400:15]"
      },
      "darkslategray": {
        "!type": "number",
        "!span": "7311[400:27]-7326[400:42]"
      },
      "darkslategrey": {
        "!type": "number",
        "!span": "7338[400:54]-7353[400:69]"
      },
      "darkturquoise": {
        "!type": "number",
        "!span": "7365[400:81]-7380[400:96]"
      },
      "darkviolet": {
        "!type": "number",
        "!span": "7392[400:108]-7404[400:120]"
      },
      "deeppink": {
        "!type": "number",
        "!span": "7416[401:0]-7426[401:10]"
      },
      "deepskyblue": {
        "!type": "number",
        "!span": "7438[401:22]-7451[401:35]"
      },
      "dimgray": {
        "!type": "number",
        "!span": "7463[401:47]-7472[401:56]"
      },
      "dimgrey": {
        "!type": "number",
        "!span": "7484[401:68]-7493[401:77]"
      },
      "dodgerblue": {
        "!type": "number",
        "!span": "7505[401:89]-7517[401:101]"
      },
      "firebrick": {
        "!type": "number",
        "!span": "7529[401:113]-7540[401:124]"
      },
      "floralwhite": {
        "!type": "number",
        "!span": "7552[402:0]-7565[402:13]"
      },
      "forestgreen": {
        "!type": "number",
        "!span": "7577[402:25]-7590[402:38]"
      },
      "fuchsia": {
        "!type": "number",
        "!span": "7602[402:50]-7611[402:59]"
      },
      "gainsboro": {
        "!type": "number",
        "!span": "7623[402:71]-7634[402:82]"
      },
      "ghostwhite": {
        "!type": "number",
        "!span": "7646[402:94]-7658[402:106]"
      },
      "gold": {
        "!type": "number",
        "!span": "7670[402:118]-7676[402:124]"
      },
      "goldenrod": {
        "!type": "number",
        "!span": "7688[403:0]-7699[403:11]"
      },
      "gray": {
        "!type": "number",
        "!span": "7711[403:23]-7717[403:29]"
      },
      "green": {
        "!type": "number",
        "!span": "7729[403:41]-7736[403:48]"
      },
      "greenyellow": {
        "!type": "number",
        "!span": "7748[403:60]-7761[403:73]"
      },
      "grey": {
        "!type": "number",
        "!span": "7773[403:85]-7779[403:91]"
      },
      "honeydew": {
        "!type": "number",
        "!span": "7791[403:103]-7801[403:113]"
      },
      "hotpink": {
        "!type": "number",
        "!span": "7813[403:125]-7822[403:134]"
      },
      "indianred": {
        "!type": "number",
        "!span": "7834[404:0]-7845[404:11]"
      },
      "indigo": {
        "!type": "number",
        "!span": "7857[404:23]-7865[404:31]"
      },
      "ivory": {
        "!type": "number",
        "!span": "7877[404:43]-7884[404:50]"
      },
      "khaki": {
        "!type": "number",
        "!span": "7896[404:62]-7903[404:69]"
      },
      "lavender": {
        "!type": "number",
        "!span": "7915[404:81]-7925[404:91]"
      },
      "lavenderblush": {
        "!type": "number",
        "!span": "7937[404:103]-7952[404:118]"
      },
      "lawngreen": {
        "!type": "number",
        "!span": "7964[404:130]-7975[404:141]"
      },
      "lemonchiffon": {
        "!type": "number",
        "!span": "7987[405:0]-8001[405:14]"
      },
      "lightblue": {
        "!type": "number",
        "!span": "8013[405:26]-8024[405:37]"
      },
      "lightcoral": {
        "!type": "number",
        "!span": "8036[405:49]-8048[405:61]"
      },
      "lightcyan": {
        "!type": "number",
        "!span": "8060[405:73]-8071[405:84]"
      },
      "lightgoldenrodyellow": {
        "!type": "number",
        "!span": "8083[405:96]-8105[405:118]"
      },
      "lightgray": {
        "!type": "number",
        "!span": "8117[405:130]-8128[405:141]"
      },
      "lightgreen": {
        "!type": "number",
        "!span": "8140[406:0]-8152[406:12]"
      },
      "lightgrey": {
        "!type": "number",
        "!span": "8164[406:24]-8175[406:35]"
      },
      "lightpink": {
        "!type": "number",
        "!span": "8187[406:47]-8198[406:58]"
      },
      "lightsalmon": {
        "!type": "number",
        "!span": "8210[406:70]-8223[406:83]"
      },
      "lightseagreen": {
        "!type": "number",
        "!span": "8235[406:95]-8250[406:110]"
      },
      "lightskyblue": {
        "!type": "number",
        "!span": "8262[406:122]-8276[406:136]"
      },
      "lightslategray": {
        "!type": "number",
        "!span": "8288[407:0]-8304[407:16]"
      },
      "lightslategrey": {
        "!type": "number",
        "!span": "8316[407:28]-8332[407:44]"
      },
      "lightsteelblue": {
        "!type": "number",
        "!span": "8344[407:56]-8360[407:72]"
      },
      "lightyellow": {
        "!type": "number",
        "!span": "8372[407:84]-8385[407:97]"
      },
      "lime": {
        "!type": "number",
        "!span": "8397[407:109]-8403[407:115]"
      },
      "limegreen": {
        "!type": "number",
        "!span": "8415[407:127]-8426[407:138]"
      },
      "linen": {
        "!type": "number",
        "!span": "8438[408:0]-8445[408:7]"
      },
      "magenta": {
        "!type": "number",
        "!span": "8457[408:19]-8466[408:28]"
      },
      "maroon": {
        "!type": "number",
        "!span": "8478[408:40]-8486[408:48]"
      },
      "mediumaquamarine": {
        "!type": "number",
        "!span": "8498[408:60]-8516[408:78]"
      },
      "mediumblue": {
        "!type": "number",
        "!span": "8528[408:90]-8540[408:102]"
      },
      "mediumorchid": {
        "!type": "number",
        "!span": "8552[408:114]-8566[408:128]"
      },
      "mediumpurple": {
        "!type": "number",
        "!span": "8578[409:0]-8592[409:14]"
      },
      "mediumseagreen": {
        "!type": "number",
        "!span": "8604[409:26]-8620[409:42]"
      },
      "mediumslateblue": {
        "!type": "number",
        "!span": "8632[409:54]-8649[409:71]"
      },
      "mediumspringgreen": {
        "!type": "number",
        "!span": "8661[409:83]-8680[409:102]"
      },
      "mediumturquoise": {
        "!type": "number",
        "!span": "8692[409:114]-8709[409:131]"
      },
      "mediumvioletred": {
        "!type": "number",
        "!span": "8721[410:0]-8738[410:17]"
      },
      "midnightblue": {
        "!type": "number",
        "!span": "8750[410:29]-8764[410:43]"
      },
      "mintcream": {
        "!type": "number",
        "!span": "8776[410:55]-8787[410:66]"
      },
      "mistyrose": {
        "!type": "number",
        "!span": "8799[410:78]-8810[410:89]"
      },
      "moccasin": {
        "!type": "number",
        "!span": "8822[410:101]-8832[410:111]"
      },
      "navajowhite": {
        "!type": "number",
        "!span": "8844[410:123]-8857[410:136]"
      },
      "navy": {
        "!type": "number",
        "!span": "8869[411:0]-8875[411:6]"
      },
      "oldlace": {
        "!type": "number",
        "!span": "8887[411:18]-8896[411:27]"
      },
      "olive": {
        "!type": "number",
        "!span": "8908[411:39]-8915[411:46]"
      },
      "olivedrab": {
        "!type": "number",
        "!span": "8927[411:58]-8938[411:69]"
      },
      "orange": {
        "!type": "number",
        "!span": "8950[411:81]-8958[411:89]"
      },
      "orangered": {
        "!type": "number",
        "!span": "8970[411:101]-8981[411:112]"
      },
      "orchid": {
        "!type": "number",
        "!span": "8993[411:124]-9001[411:132]"
      },
      "palegoldenrod": {
        "!type": "number",
        "!span": "9013[412:0]-9028[412:15]"
      },
      "palegreen": {
        "!type": "number",
        "!span": "9040[412:27]-9051[412:38]"
      },
      "paleturquoise": {
        "!type": "number",
        "!span": "9063[412:50]-9078[412:65]"
      },
      "palevioletred": {
        "!type": "number",
        "!span": "9090[412:77]-9105[412:92]"
      },
      "papayawhip": {
        "!type": "number",
        "!span": "9117[412:104]-9129[412:116]"
      },
      "peachpuff": {
        "!type": "number",
        "!span": "9141[412:128]-9152[412:139]"
      },
      "peru": {
        "!type": "number",
        "!span": "9164[413:0]-9170[413:6]"
      },
      "pink": {
        "!type": "number",
        "!span": "9182[413:18]-9188[413:24]"
      },
      "plum": {
        "!type": "number",
        "!span": "9200[413:36]-9206[413:42]"
      },
      "powderblue": {
        "!type": "number",
        "!span": "9218[413:54]-9230[413:66]"
      },
      "purple": {
        "!type": "number",
        "!span": "9242[413:78]-9250[413:86]"
      },
      "red": {
        "!type": "number",
        "!span": "9262[413:98]-9267[413:103]"
      },
      "rosybrown": {
        "!type": "number",
        "!span": "9279[413:115]-9290[413:126]"
      },
      "royalblue": {
        "!type": "number",
        "!span": "9302[414:0]-9313[414:11]"
      },
      "saddlebrown": {
        "!type": "number",
        "!span": "9325[414:23]-9338[414:36]"
      },
      "salmon": {
        "!type": "number",
        "!span": "9350[414:48]-9358[414:56]"
      },
      "sandybrown": {
        "!type": "number",
        "!span": "9370[414:68]-9382[414:80]"
      },
      "seagreen": {
        "!type": "number",
        "!span": "9394[414:92]-9404[414:102]"
      },
      "seashell": {
        "!type": "number",
        "!span": "9416[414:114]-9426[414:124]"
      },
      "sienna": {
        "!type": "number",
        "!span": "9438[415:0]-9446[415:8]"
      },
      "silver": {
        "!type": "number",
        "!span": "9458[415:20]-9466[415:28]"
      },
      "skyblue": {
        "!type": "number",
        "!span": "9478[415:40]-9487[415:49]"
      },
      "slateblue": {
        "!type": "number",
        "!span": "9499[415:61]-9510[415:72]"
      },
      "slategray": {
        "!type": "number",
        "!span": "9522[415:84]-9533[415:95]"
      },
      "slategrey": {
        "!type": "number",
        "!span": "9545[415:107]-9556[415:118]"
      },
      "snow": {
        "!type": "number",
        "!span": "9568[415:130]-9574[415:136]"
      },
      "springgreen": {
        "!type": "number",
        "!span": "9586[416:0]-9599[416:13]"
      },
      "steelblue": {
        "!type": "number",
        "!span": "9611[416:25]-9622[416:36]"
      },
      "tan": {
        "!type": "number",
        "!span": "9634[416:48]-9639[416:53]"
      },
      "teal": {
        "!type": "number",
        "!span": "9651[416:65]-9657[416:71]"
      },
      "thistle": {
        "!type": "number",
        "!span": "9669[416:83]-9678[416:92]"
      },
      "tomato": {
        "!type": "number",
        "!span": "9690[416:104]-9698[416:112]"
      },
      "turquoise": {
        "!type": "number",
        "!span": "9710[416:124]-9721[416:135]"
      },
      "violet": {
        "!type": "number",
        "!span": "9733[417:0]-9741[417:8]"
      },
      "wheat": {
        "!type": "number",
        "!span": "9753[417:20]-9760[417:27]"
      },
      "white": {
        "!type": "number",
        "!span": "9772[417:39]-9779[417:46]"
      },
      "whitesmoke": {
        "!type": "number",
        "!span": "9791[417:58]-9803[417:70]"
      },
      "yellow": {
        "!type": "number",
        "!span": "9815[417:82]-9823[417:90]"
      },
      "yellowgreen": {
        "!type": "number",
        "!span": "9835[417:102]-9848[417:115]"
      },
      "!span": "6475[394:6]-6488[394:19]"
    },
    "Euler": {
      "prototype": {
        "_x": {
          "!type": "number",
          "!span": "470[23:1]-472[23:3]"
        },
        "_y": {
          "!type": "number",
          "!span": "477[23:8]-479[23:10]"
        },
        "_z": {
          "!type": "number",
          "!span": "484[23:15]-486[23:17]"
        },
        "_order": {
          "!type": "string",
          "!span": "491[23:22]-497[23:28]"
        },
        "x": {
          "!type": "number",
          "!span": "531[25:5]-532[25:6]"
        },
        "y": {
          "!type": "number",
          "!span": "640[38:5]-641[38:6]"
        },
        "z": {
          "!type": "number",
          "!span": "749[51:5]-750[51:6]"
        },
        "order": {
          "!type": "string",
          "!span": "858[64:5]-863[64:10]"
        },
        "set": {
          "!type": "fn(x: ?, y: ?, z: ?, order: string) -> !this",
          "!span": "979[77:1]-982[77:4]"
        },
        "copy": {
          "!type": "fn(euler: ?) -> !this",
          "!span": "1149[90:1]-1153[90:5]"
        },
        "setFromRotationMatrix": {
          "!type": "fn(m: +THREE.Matrix4, order: string, update: bool) -> !this",
          "!span": "1324[103:1]-1345[103:22]"
        },
        "setFromQuaternion": {
          "!type": "fn(q: +THREE.Quaternion, order: string, update: bool) -> !this",
          "!span": "3573[226:1]-3590[226:18]"
        },
        "setFromVector3": {
          "!type": "fn(v: ?, order: ?) -> +THREE.Euler",
          "!span": "3856[242:1]-3870[242:15]"
        },
        "reorder": {
          "!type": "fn(newOrder: ?)",
          "!span": "3962[248:1]-3969[248:8]"
        },
        "equals": {
          "!type": "fn(euler: ?) -> bool",
          "!span": "4201[263:1]-4207[263:7]"
        },
        "fromArray": {
          "!type": "fn(array: ?) -> !this",
          "!span": "4365[269:1]-4374[269:10]"
        },
        "toArray": {
          "!type": "fn(array: [number|string], offset: number) -> [!this._x]",
          "!span": "4581[282:1]-4588[282:8]"
        },
        "toVector3": {
          "!type": "fn(optionalResult: ?) -> +THREE.Vector3",
          "!span": "4859[295:1]-4868[295:10]"
        },
        "onChange": {
          "!type": "fn(callback: fn()) -> !this",
          "!span": "5070[309:1]-5078[309:9]"
        },
        "onChangeCallback": {
          "!type": "fn()",
          "!span": "5164[317:1]-5180[317:17]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Euler",
          "!span": "5200[319:1]-5205[319:6]"
        },
        "!span": "438[19:24]-5296[325:1]",
        "constructor": "THREE.Euler"
      },
      "RotationOrders": {
        "!type": "[string]",
        "!span": "315[15:12]-329[15:26]"
      },
      "DefaultOrder": {
        "!type": "string",
        "!span": "391[17:12]-403[17:24]"
      },
      "!type": "fn(x: number, y: number, z: number, order: string)",
      "!span": "152[6:6]-157[6:11]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author WestLangley / http://github.com/WestLangley @author bhouston / http://exocortex.com",
      "_x": {
        "!type": "number",
        "!span": "1022[79:7]-1024[79:9]"
      },
      "_y": {
        "!type": "number",
        "!span": "1037[80:7]-1039[80:9]"
      },
      "_z": {
        "!type": "number",
        "!span": "1052[81:7]-1054[81:9]"
      },
      "_order": {
        "!type": "string",
        "!span": "1067[82:7]-1073[82:13]"
      },
      "onChangeCallback": {
        "!type": "fn()",
        "!span": "5112[311:7]-5128[311:23]"
      }
    },
    "Frustum": {
      "prototype": {
        "set": {
          "!type": "fn(p0: ?, p1: ?, p2: ?, p3: ?, p4: ?, p5: ?) -> !this",
          "!span": "575[25:1]-578[25:4]"
        },
        "copy": {
          "!type": "fn(frustum: +THREE.Frustum) -> !this",
          "!span": "827[40:1]-831[40:5]"
        },
        "setFromMatrix": {
          "!type": "fn(m: +THREE.Matrix4) -> !this",
          "!span": "994[54:1]-1007[54:14]"
        },
        "intersectsObject": {
          "!type": "fn(object: ?) -> bool",
          "!span": "1920[74:1]-1936[74:17]"
        },
        "intersectsSphere": {
          "!type": "fn(sphere: ?) -> bool",
          "!span": "2283[93:1]-2299[93:17]"
        },
        "intersectsBox": {
          "!type": "fn(box: ?) -> bool",
          "!span": "2598[115:1]-2611[115:14]"
        },
        "containsPoint": {
          "!type": "fn(point: ?) -> bool",
          "!span": "3374[153:1]-3387[153:14]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Frustum",
          "!span": "3582[171:1]-3587[171:6]"
        },
        "!span": "541[21:26]-3653[177:1]",
        "constructor": "THREE.Frustum"
      },
      "!type": "fn(p0: ?, p1: ?, p2: ?, p3: ?, p4: ?, p5: ?)",
      "!span": "145[6:6]-152[6:13]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/ @author bhouston / http://exocortex.com",
      "planes": {
        "!type": "[?]",
        "!span": "200[8:6]-206[8:12]"
      }
    },
    "Line3": {
      "prototype": {
        "set": {
          "!type": "fn(start: ?, end: ?) -> !this",
          "!span": "286[15:1]-289[15:4]"
        },
        "copy": {
          "!type": "fn(line: +THREE.Line3) -> !this",
          "!span": "393[24:1]-397[24:5]"
        },
        "center": {
          "!type": "fn(optionalTarget: ?) -> +THREE.Vector3",
          "!span": "505[33:1]-511[33:7]"
        },
        "delta": {
          "!type": "fn(optionalTarget: +THREE.Vector3) -> +THREE.Vector3",
          "!span": "679[40:1]-684[40:6]"
        },
        "distanceSq": {
          "!type": "fn() -> number",
          "!span": "830[47:1]-840[47:11]"
        },
        "distance": {
          "!type": "fn() -> number",
          "!span": "915[53:1]-923[53:9]"
        },
        "at": {
          "!type": "fn(t: ?, optionalTarget: ?) -> +THREE.Vector3",
          "!span": "991[59:1]-993[59:3]"
        },
        "closestPointToPointParameter": {
          "!type": "fn(point: ?, clampToLine: ?) -> number",
          "!span": "1160[67:1]-1188[67:29]"
        },
        "closestPointToPoint": {
          "!type": "fn(point: ?, clampToLine: ?, optionalTarget: ?) -> +THREE.Vector3",
          "!span": "1649[94:1]-1668[94:20]"
        },
        "applyMatrix4": {
          "!type": "fn(matrix: ?) -> !this",
          "!span": "1920[104:1]-1932[104:13]"
        },
        "equals": {
          "!type": "fn(line: ?)",
          "!span": "2052[113:1]-2058[113:7]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Line3",
          "!span": "2161[119:1]-2166[119:6]"
        },
        "!span": "254[11:24]-2230[125:1]",
        "constructor": "THREE.Line3"
      },
      "!type": "fn(start: ?, end: ?)",
      "!span": "58[4:6]-63[4:11]",
      "!doc": "@author bhouston / http://exocortex.com"
    },
    "Math": {
      "generateUUID": {
        "!type": "fn() -> string",
        "!span": "113[7:1]-125[7:13]"
      },
      "clamp": {
        "!type": "fn(x: number, a: number, b: number) -> !0",
        "!span": "805[45:1]-810[45:6]",
        "!doc": "Clamp value to range <a, b>"
      },
      "clampBottom": {
        "!type": "fn(x: ?, a: ?) -> !0",
        "!span": "926[53:1]-937[53:12]",
        "!doc": "Clamp value to range <a, inf)"
      },
      "mapLinear": {
        "!type": "fn(x: ?, a1: ?, a2: ?, b1: ?, b2: ?)",
        "!span": "1049[61:1]-1058[61:10]",
        "!doc": "Linear mapping from range <a1, a2> to range <b1, b2>"
      },
      "smoothstep": {
        "!type": "fn(x: number, min: ?, max: ?) -> number",
        "!span": "1200[69:1]-1210[69:11]"
      },
      "smootherstep": {
        "!type": "fn(x: number, min: ?, max: ?) -> number",
        "!span": "1372[80:1]-1384[80:13]"
      },
      "random16": {
        "!type": "fn() -> number",
        "!span": "1709[94:1]-1717[94:9]",
        "!doc": "Random float from <0, 1> with 16 bits of randomness (standard Math.random() creates repetitive patterns when applied over larger space)"
      },
      "randInt": {
        "!type": "fn(low: ?, high: ?) -> number",
        "!span": "1853[102:1]-1860[102:8]",
        "!doc": "Random integer from <low, high> interval"
      },
      "randFloat": {
        "!type": "fn(low: ?, high: ?)",
        "!span": "1991[110:1]-2000[110:10]",
        "!doc": "Random float from <low, high> interval"
      },
      "randFloatSpread": {
        "!type": "fn(range: ?) -> number",
        "!span": "2134[118:1]-2149[118:16]",
        "!doc": "Random float from <-range/2, range/2> interval"
      },
      "degToRad": {
        "!type": "fn(degrees: number) -> number",
        "!span": "2222[124:1]-2230[124:9]"
      },
      "radToDeg": {
        "!type": "fn(radians: number) -> number",
        "!span": "2384[136:1]-2392[136:9]"
      },
      "isPowerOfTwo": {
        "!type": "fn(value: ?) -> bool",
        "!span": "2546[148:1]-2558[148:13]"
      },
      "nextPowerOfTwo": {
        "!type": "fn(value: number) -> !0",
        "!span": "2646[154:1]-2660[154:15]"
      },
      "!span": "102[5:6]-106[5:10]",
      "!doc": "@author alteredq / http://alteredqualia.com/ @author mrdoob / http://mrdoob.com/"
    },
    "Matrix3": {
      "prototype": {
        "set": {
          "!type": "fn(n11: number, n12: number, n13: number, n21: number, n22: number, n23: number, n31: number, n32: number, n33: number) -> !this",
          "!span": "463[28:1]-466[28:4]"
        },
        "identity": {
          "!type": "fn() -> !this",
          "!span": "719[40:1]-727[40:9]"
        },
        "copy": {
          "!type": "fn(m: ?) -> !this",
          "!span": "821[54:1]-825[54:5]"
        },
        "multiplyVector3": {
          "!type": "fn(vector: ?)",
          "!span": "1000[70:1]-1015[70:16]"
        },
        "multiplyVector3Array": {
          "!type": "fn(a: ?)",
          "!span": "1199[77:1]-1219[77:21]"
        },
        "applyToVector3Array": {
          "!type": "fn(array: ?, offset: number, length: ?) -> !0",
          "!span": "1411[84:1]-1430[84:20]"
        },
        "multiplyScalar": {
          "!type": "fn(s: number) -> !this",
          "!span": "1917[113:1]-1931[113:15]"
        },
        "determinant": {
          "!type": "fn() -> number",
          "!span": "2133[125:1]-2144[125:12]"
        },
        "getInverse": {
          "!type": "fn(matrix: +THREE.Matrix4, throwOnInvertible: ?) -> !this",
          "!span": "2405[137:1]-2415[137:11]"
        },
        "transpose": {
          "!type": "fn() -> !this",
          "!span": "3479[185:1]-3488[185:10]"
        },
        "flattenToArrayOffset": {
          "!type": "fn(array: ?, offset: ?) -> !0",
          "!span": "3700[197:1]-3720[197:21]"
        },
        "getNormalMatrix": {
          "!type": "fn(m: +THREE.Matrix4) -> !this",
          "!span": "4103[217:1]-4118[217:16]"
        },
        "transposeIntoArray": {
          "!type": "fn(r: ?) -> !this",
          "!span": "4224[227:1]-4242[227:19]"
        },
        "fromArray": {
          "!type": "fn(array: ?) -> !this",
          "!span": "4482[245:1]-4491[245:10]"
        },
        "toArray": {
          "!type": "fn() -> [?]",
          "!span": "4568[253:1]-4575[253:8]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Matrix3",
          "!span": "4731[265:1]-4736[265:6]"
        },
        "!span": "429[24:26]-4816[271:1]",
        "constructor": "THREE.Matrix3"
      },
      "!type": "fn()",
      "!span": "161[6:6]-168[6:13]",
      "!doc": "@author alteredq / http://alteredqualia.com/ @author WestLangley / http://github.com/WestLangley @author bhouston / http://exocortex.com"
    },
    "Matrix4": {
      "prototype": {
        "set": {
          "!type": "fn(n11: number, n12: number, n13: number, n14: number, n21: number, n22: number, n23: number, n24: number, n31: number, n32: number, n33: number, n34: number, n41: number, n42: number, n43: number, n44: number) -> !this",
          "!span": "810[36:1]-813[36:4]"
        },
        "identity": {
          "!type": "fn() -> !this",
          "!span": "1214[49:1]-1222[49:9]"
        },
        "copy": {
          "!type": "fn(m: +THREE.Matrix4) -> !this",
          "!span": "1340[64:1]-1344[64:5]"
        },
        "extractPosition": {
          "!type": "fn(m: ?) -> +THREE.Matrix4",
          "!span": "1422[72:1]-1437[72:16]"
        },
        "copyPosition": {
          "!type": "fn(m: ?) -> !this",
          "!span": "1587[79:1]-1599[79:13]"
        },
        "extractBasis": {
          "!type": "fn(xAxis: ?, yAxis: ?, zAxis: ?) -> !this",
          "!span": "1761[92:1]-1773[92:13]"
        },
        "makeBasis": {
          "!type": "fn(xAxis: ?, yAxis: ?, zAxis: ?) -> !this",
          "!span": "1995[104:1]-2004[104:10]"
        },
        "extractRotation": {
          "!type": "fn(m: ?) -> !this",
          "!span": "2213[117:1]-2228[117:16]"
        },
        "makeRotationFromEuler": {
          "!type": "fn(euler: ?) -> !this",
          "!span": "2872[148:1]-2893[148:22]"
        },
        "setRotationFromQuaternion": {
          "!type": "fn(q: ?) -> +THREE.Matrix4",
          "!span": "5290[276:1]-5315[276:26]"
        },
        "makeRotationFromQuaternion": {
          "!type": "fn(q: +THREE.Quaternion) -> !this",
          "!span": "5504[284:1]-5530[284:27]"
        },
        "lookAt": {
          "!type": "fn(eye: +THREE.Vector3, target: +THREE.Vector3, up: +THREE.Vector3) -> !this",
          "!span": "6181[321:1]-6187[321:7]"
        },
        "multiply": {
          "!type": "fn(m: +THREE.Matrix4, n: ?) -> +THREE.Matrix4",
          "!span": "6806[361:1]-6814[361:9]"
        },
        "multiplyMatrices": {
          "!type": "fn(a: +THREE.Matrix4, b: +THREE.Matrix4) -> !this",
          "!span": "7079[374:1]-7095[374:17]"
        },
        "multiplyToArray": {
          "!type": "fn(a: ?, b: ?, r: ?) -> !this",
          "!span": "8709[414:1]-8724[414:16]"
        },
        "multiplyScalar": {
          "!type": "fn(s: number) -> !this",
          "!span": "9144[429:1]-9158[429:15]"
        },
        "multiplyVector3": {
          "!type": "fn(vector: ?)",
          "!span": "9466[442:1]-9481[442:16]"
        },
        "multiplyVector4": {
          "!type": "fn(vector: ?)",
          "!span": "9704[449:1]-9719[449:16]"
        },
        "multiplyVector3Array": {
          "!type": "fn(a: ?)",
          "!span": "9903[456:1]-9923[456:21]"
        },
        "applyToVector3Array": {
          "!type": "fn(array: ?, offset: number, length: ?) -> !0",
          "!span": "10115[463:1]-10134[463:20]"
        },
        "rotateAxis": {
          "!type": "fn(v: ?)",
          "!span": "10621[492:1]-10631[492:11]"
        },
        "crossVector": {
          "!type": "fn(vector: ?)",
          "!span": "10807[500:1]-10818[500:12]"
        },
        "determinant": {
          "!type": "fn() -> number",
          "!span": "10998[507:1]-11009[507:12]"
        },
        "transpose": {
          "!type": "fn() -> !this",
          "!span": "12104[557:1]-12113[557:10]"
        },
        "flattenToArrayOffset": {
          "!type": "fn(array: ?, offset: number) -> !0",
          "!span": "12506[574:1]-12526[574:21]"
        },
        "getPosition": {
          "!type": "fn() -> +THREE.Vector3",
          "!span": "13154[602:1]-13165[602:12]"
        },
        "setPosition": {
          "!type": "fn(v: +THREE.Vector3) -> !this",
          "!span": "13453[617:1]-13464[617:12]"
        },
        "getInverse": {
          "!type": "fn(m: +THREE.Matrix4, throwOnInvertible: ?) -> !this",
          "!span": "13588[629:1]-13598[629:11]"
        },
        "translate": {
          "!type": "fn(v: ?)",
          "!span": "16360[684:1]-16369[684:10]"
        },
        "rotateX": {
          "!type": "fn(angle: ?)",
          "!span": "16462[690:1]-16469[690:8]"
        },
        "rotateY": {
          "!type": "fn(angle: ?)",
          "!span": "16564[696:1]-16571[696:8]"
        },
        "rotateZ": {
          "!type": "fn(angle: ?)",
          "!span": "16666[702:1]-16673[702:8]"
        },
        "rotateByAxis": {
          "!type": "fn(axis: ?, angle: ?)",
          "!span": "16768[708:1]-16780[708:13]"
        },
        "scale": {
          "!type": "fn(v: +THREE.Vector3) -> !this",
          "!span": "16886[714:1]-16891[714:6]"
        },
        "getMaxScaleOnAxis": {
          "!type": "fn() -> number",
          "!span": "17172[728:1]-17189[728:18]"
        },
        "makeTranslation": {
          "!type": "fn(x: number, y: number, z: number) -> !this",
          "!span": "17547[740:1]-17562[740:16]"
        },
        "makeRotationX": {
          "!type": "fn(theta: number) -> !this",
          "!span": "17689[755:1]-17702[755:14]"
        },
        "makeRotationY": {
          "!type": "fn(theta: ?) -> !this",
          "!span": "17885[772:1]-17898[772:14]"
        },
        "makeRotationZ": {
          "!type": "fn(theta: ?) -> !this",
          "!span": "18081[789:1]-18094[789:14]"
        },
        "makeRotationAxis": {
          "!type": "fn(axis: +THREE.Vector3, angle: number) -> !this",
          "!span": "18277[806:1]-18293[806:17]"
        },
        "makeScale": {
          "!type": "fn(x: ?, y: ?, z: ?) -> !this",
          "!span": "18754[829:1]-18763[829:10]"
        },
        "compose": {
          "!type": "fn(position: +THREE.Vector3, quaternion: +THREE.Quaternion, scale: +THREE.Vector3) -> !this",
          "!span": "18890[844:1]-18897[844:8]"
        },
        "decompose": {
          "!type": "fn(position: +THREE.Vector3, quaternion: +THREE.Quaternion, scale: +THREE.Vector3) -> !this",
          "!span": "19070[854:1]-19079[854:10]"
        },
        "makeFrustum": {
          "!type": "fn(left: number, right: number, bottom: number, top: number, near: number, far: number) -> !this",
          "!span": "20297[909:1]-20308[909:12]"
        },
        "makePerspective": {
          "!type": "fn(fov: number, aspect: number, near: number, far: number) -> +THREE.Matrix4",
          "!span": "20899[929:1]-20914[929:16]"
        },
        "makeOrthographic": {
          "!type": "fn(left: number, right: number, top: number, bottom: number, near: number, far: number) -> !this",
          "!span": "21170[940:1]-21186[940:17]"
        },
        "fromArray": {
          "!type": "fn(array: ?) -> !this",
          "!span": "21697[960:1]-21706[960:10]"
        },
        "toArray": {
          "!type": "fn() -> [?]",
          "!span": "21783[968:1]-21790[968:8]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Matrix4",
          "!span": "22018[981:1]-22023[981:6]"
        },
        "!span": "776[32:26]-22103[987:1]",
        "constructor": "THREE.Matrix4"
      },
      "!type": "fn()",
      "!span": "485[13:6]-492[13:13]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author supereggbert / http://www.paulbrunt.co.uk/ @author philogb / http://blog.thejit.org/ @author jordi_ros / http://plattsoft.com @author D1plo1d / http://github.com/D1plo1d @author alteredq / http://alteredqualia.com/ @author mikael emtinger / http://gomo.se/ @author timknip / http://www.floorplanner.com/ @author bhouston / http://exocortex.com @author WestLangley / http://github.com/WestLangley"
    },
    "Plane": {
      "prototype": {
        "set": {
          "!type": "fn(normal: ?, constant: ?) -> !this",
          "!span": "301[15:1]-304[15:4]"
        },
        "setComponents": {
          "!type": "fn(x: number, y: number, z: number, w: number) -> !this",
          "!span": "420[24:1]-433[24:14]"
        },
        "setFromNormalAndCoplanarPoint": {
          "!type": "fn(normal: +THREE.Vector3, point: +THREE.Vector3) -> !this",
          "!span": "536[33:1]-565[33:30]"
        },
        "setFromCoplanarPoints": {
          "!type": "fn(a: +THREE.Vector3, b: +THREE.Vector3, c: +THREE.Vector3) -> !this",
          "!span": "761[42:1]-782[42:22]"
        },
        "copy": {
          "!type": "fn(plane: +THREE.Plane) -> !this",
          "!span": "1144[62:1]-1148[62:5]"
        },
        "normalize": {
          "!type": "fn() -> !this",
          "!span": "1265[71:1]-1274[71:10]"
        },
        "negate": {
          "!type": "fn() -> !this",
          "!span": "1530[83:1]-1536[83:7]"
        },
        "distanceToPoint": {
          "!type": "fn(point: +THREE.Vector3) -> number",
          "!span": "1624[92:1]-1639[92:16]"
        },
        "distanceToSphere": {
          "!type": "fn(sphere: ?) -> number",
          "!span": "1721[98:1]-1737[98:17]"
        },
        "projectPoint": {
          "!type": "fn(point: ?, optionalTarget: ?) -> +THREE.Vector3",
          "!span": "1833[104:1]-1845[104:13]"
        },
        "orthoPoint": {
          "!type": "fn(point: ?, optionalTarget: ?) -> +THREE.Vector3",
          "!span": "1965[110:1]-1975[110:11]"
        },
        "isIntersectionLine": {
          "!type": "fn(line: ?) -> bool",
          "!span": "2217[119:1]-2235[119:19]"
        },
        "intersectLine": {
          "!type": "fn(line: ?, optionalTarget: ?) -> +THREE.Vector3",
          "!span": "2561[130:1]-2574[130:14]"
        },
        "coplanarPoint": {
          "!type": "fn(optionalTarget: +THREE.Vector3) -> +THREE.Vector3",
          "!span": "3306[171:1]-3319[171:14]"
        },
        "applyMatrix4": {
          "!type": "fn(matrix: ?, optionalNormalMatrix: ?) -> !this",
          "!span": "3484[178:1]-3496[178:13]"
        },
        "translate": {
          "!type": "fn(offset: ?) -> !this",
          "!span": "4117[202:1]-4126[202:10]"
        },
        "equals": {
          "!type": "fn(plane: ?) -> bool",
          "!span": "4235[210:1]-4241[210:7]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Plane",
          "!span": "4356[216:1]-4361[216:6]"
        },
        "!span": "269[11:24]-4425[222:1]",
        "constructor": "THREE.Plane"
      },
      "!type": "fn(normal: ?, constant: ?)",
      "!span": "58[4:6]-63[4:11]",
      "!doc": "@author bhouston / http://exocortex.com",
      "constant": {
        "!type": "number",
        "!span": "376[18:7]-384[18:15]"
      }
    },
    "Quaternion": {
      "prototype": {
        "_x": {
          "!type": "number",
          "!span": "414[20:1]-416[20:3]"
        },
        "_y": {
          "!type": "number",
          "!span": "420[20:7]-422[20:9]"
        },
        "_z": {
          "!type": "number",
          "!span": "427[20:14]-429[20:16]"
        },
        "_w": {
          "!type": "number",
          "!span": "434[20:21]-436[20:23]"
        },
        "x": {
          "!type": "number",
          "!span": "447[22:5]-448[22:6]"
        },
        "y": {
          "!type": "number",
          "!span": "556[35:5]-557[35:6]"
        },
        "z": {
          "!type": "number",
          "!span": "665[48:5]-666[48:6]"
        },
        "w": {
          "!type": "number",
          "!span": "774[61:5]-775[61:6]"
        },
        "set": {
          "!type": "fn(x: ?, y: ?, z: ?, w: ?) -> !this",
          "!span": "879[74:1]-882[74:4]"
        },
        "copy": {
          "!type": "fn(quaternion: +THREE.Quaternion) -> !this",
          "!span": "1022[87:1]-1026[87:5]"
        },
        "setFromEuler": {
          "!type": "fn(euler: +THREE.Euler, update: bool) -> !this",
          "!span": "1210[100:1]-1222[100:13]"
        },
        "setFromAxisAngle": {
          "!type": "fn(axis: +THREE.Vector3, angle: ?) -> !this",
          "!span": "3157[168:1]-3173[168:17]"
        },
        "setFromRotationMatrix": {
          "!type": "fn(m: +THREE.Matrix4) -> !this",
          "!span": "3552[187:1]-3573[187:22]"
        },
        "setFromUnitVectors": {
          "!type": "fn(vFrom: ?, vTo: ?) -> !this",
          "!span": "4805[246:1]-4823[246:19]"
        },
        "inverse": {
          "!type": "fn() -> !this",
          "!span": "5504[295:1]-5511[295:8]"
        },
        "conjugate": {
          "!type": "fn() -> !this",
          "!span": "5583[303:1]-5592[303:10]"
        },
        "dot": {
          "!type": "fn(v: ?) -> number",
          "!span": "5714[315:1]-5717[315:4]"
        },
        "lengthSq": {
          "!type": "fn() -> number",
          "!span": "5820[321:1]-5828[321:9]"
        },
        "length": {
          "!type": "fn() -> number",
          "!span": "5940[327:1]-5946[327:7]"
        },
        "normalize": {
          "!type": "fn() -> !this",
          "!span": "6071[333:1]-6080[333:10]"
        },
        "multiply": {
          "!type": "fn(q: +THREE.Quaternion, p: ?) -> +THREE.Quaternion",
          "!span": "6395[361:1]-6403[361:9]"
        },
        "multiplyQuaternions": {
          "!type": "fn(a: +THREE.Quaternion, b: +THREE.Quaternion) -> !this",
          "!span": "6680[374:1]-6699[374:20]"
        },
        "multiplyVector3": {
          "!type": "fn(vector: ?)",
          "!span": "7218[392:1]-7233[392:16]"
        },
        "slerp": {
          "!type": "fn(qb: +THREE.Quaternion, t: number) -> !this",
          "!span": "7437[399:1]-7442[399:6]"
        },
        "equals": {
          "!type": "fn(quaternion: ?) -> bool",
          "!span": "8748[464:1]-8754[464:7]"
        },
        "fromArray": {
          "!type": "fn(array: ?, offset: number) -> !this",
          "!span": "8929[470:1]-8938[470:10]"
        },
        "toArray": {
          "!type": "fn(array: [number], offset: number) -> [!this._x]",
          "!span": "9192[485:1]-9199[485:8]"
        },
        "onChange": {
          "!type": "fn(callback: fn()) -> !this",
          "!span": "9467[499:1]-9475[499:9]"
        },
        "onChangeCallback": {
          "!type": "fn()",
          "!span": "9561[507:1]-9577[507:17]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Quaternion",
          "!span": "9597[509:1]-9602[509:6]"
        },
        "!span": "377[16:29]-9694[515:1]",
        "constructor": "THREE.Quaternion"
      },
      "slerp": {
        "!type": "fn(qa: ?, qb: +THREE.Quaternion, qm: +THREE.Quaternion, t: number) -> +THREE.Quaternion",
        "!span": "9714[517:17]-9719[517:22]"
      },
      "!type": "fn(x: number, y: number, z: number, w: number)",
      "!span": "206[7:6]-216[7:16]",
      "!doc": "@author mikael emtinger / http://gomo.se/ @author alteredq / http://alteredqualia.com/ @author WestLangley / http://github.com/WestLangley @author bhouston / http://exocortex.com",
      "_x": {
        "!type": "number",
        "!span": "252[9:6]-254[9:8]"
      },
      "_y": {
        "!type": "number",
        "!span": "271[10:6]-273[10:8]"
      },
      "_z": {
        "!type": "number",
        "!span": "290[11:6]-292[11:8]"
      },
      "_w": {
        "!type": "number",
        "!span": "309[12:6]-311[12:8]"
      },
      "onChangeCallback": {
        "!type": "fn()",
        "!span": "9509[501:7]-9525[501:23]"
      }
    },
    "Ray": {
      "prototype": {
        "set": {
          "!type": "fn(origin: ?, direction: ?) -> !this",
          "!span": "308[15:1]-311[15:4]"
        },
        "copy": {
          "!type": "fn(ray: +THREE.Ray) -> !this",
          "!span": "436[24:1]-440[24:5]"
        },
        "at": {
          "!type": "fn(t: number, optionalTarget: +THREE.Vector3) -> +THREE.Vector3",
          "!span": "559[33:1]-561[33:3]"
        },
        "recast": {
          "!type": "fn(t: ?) -> !this",
          "!span": "738[41:1]-744[41:7]"
        },
        "closestPointToPoint": {
          "!type": "fn(point: +THREE.Vector3, optionalTarget: ?) -> +THREE.Vector3",
          "!span": "894[55:1]-913[55:20]"
        },
        "distanceToPoint": {
          "!type": "fn(point: +THREE.Vector3) -> number",
          "!span": "1287[71:1]-1302[71:16]"
        },
        "distanceSqToSegment": {
          "!type": "fn(v0: +THREE.Vector3, v1: +THREE.Vector3, optionalPointOnRay: +THREE.Vector3, optionalPointOnSegment: +THREE.Vector3) -> number",
          "!span": "1719[95:1]-1738[95:20]"
        },
        "isIntersectionSphere": {
          "!type": "fn(sphere: ?) -> bool",
          "!span": "4643[223:1]-4663[223:21]"
        },
        "intersectSphere": {
          "!type": "fn(sphere: ?, optionalTarget: ?) -> +THREE.Vector3",
          "!span": "4760[229:1]-4775[229:16]"
        },
        "isIntersectionPlane": {
          "!type": "fn(plane: ?) -> bool",
          "!span": "5961[270:1]-5980[270:20]"
        },
        "distanceToPlane": {
          "!type": "fn(plane: ?) -> number",
          "!span": "6371[296:1]-6386[296:16]"
        },
        "intersectPlane": {
          "!type": "fn(plane: ?, optionalTarget: ?) -> +THREE.Vector3",
          "!span": "6880[322:1]-6894[322:15]"
        },
        "isIntersectionBox": {
          "!type": "fn(box: ?) -> bool",
          "!span": "7066[335:1]-7083[335:18]"
        },
        "intersectBox": {
          "!type": "fn(box: ?, optionalTarget: +THREE.Vector3) -> +THREE.Vector3",
          "!span": "7224[347:1]-7236[347:13]"
        },
        "intersectTriangle": {
          "!type": "fn(a: +THREE.Vector3|number, b: +THREE.Vector3|number, c: +THREE.Vector3|number, backfaceCulling: bool, optionalTarget: ?) -> +THREE.Vector3",
          "!span": "8879[415:1]-8896[415:18]"
        },
        "applyMatrix4": {
          "!type": "fn(matrix4: +THREE.Matrix4) -> !this",
          "!span": "10577[498:1]-10589[498:13]"
        },
        "equals": {
          "!type": "fn(ray: ?)",
          "!span": "10804[508:1]-10810[508:7]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Ray",
          "!span": "10924[514:1]-10929[514:6]"
        },
        "!span": "278[11:22]-10991[520:1]",
        "constructor": "THREE.Ray"
      },
      "!type": "fn(origin: ?, direction: ?)",
      "!span": "58[4:6]-61[4:9]",
      "!doc": "@author bhouston / http://exocortex.com"
    },
    "Sphere": {
      "prototype": {
        "set": {
          "!type": "fn(center: ?, radius: ?) -> !this",
          "!span": "326[16:1]-329[16:4]"
        },
        "setFromPoints": {
          "!type": "fn(points: [+THREE.Vector3], optionalCenter: ?) -> !this",
          "!span": "438[24:1]-451[24:14]"
        },
        "copy": {
          "!type": "fn(sphere: +THREE.Sphere) -> !this",
          "!span": "974[58:1]-978[58:5]"
        },
        "empty": {
          "!type": "fn() -> bool",
          "!span": "1094[67:1]-1099[67:6]"
        },
        "containsPoint": {
          "!type": "fn(point: ?) -> bool",
          "!span": "1154[73:1]-1167[73:14]"
        },
        "distanceToPoint": {
          "!type": "fn(point: ?) -> number",
          "!span": "1284[79:1]-1299[79:16]"
        },
        "intersectsSphere": {
          "!type": "fn(sphere: ?) -> bool",
          "!span": "1390[85:1]-1406[85:17]"
        },
        "clampPoint": {
          "!type": "fn(point: ?, optionalTarget: ?) -> !1",
          "!span": "1572[93:1]-1582[93:11]"
        },
        "getBoundingBox": {
          "!type": "fn(optionalTarget: ?) -> !0",
          "!span": "1954[111:1]-1968[111:15]"
        },
        "applyMatrix4": {
          "!type": "fn(matrix: +THREE.Matrix4) -> !this",
          "!span": "2148[122:1]-2160[122:13]"
        },
        "translate": {
          "!type": "fn(offset: ?) -> !this",
          "!span": "2304[131:1]-2313[131:10]"
        },
        "equals": {
          "!type": "fn(sphere: ?) -> bool",
          "!span": "2390[139:1]-2396[139:7]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Sphere",
          "!span": "2511[145:1]-2516[145:6]"
        },
        "!span": "293[12:25]-2581[151:1]",
        "constructor": "THREE.Sphere"
      },
      "!type": "fn(center: +THREE.Vector3, radius: number)",
      "!span": "97[5:6]-103[5:12]",
      "!doc": "@author bhouston / http://exocortex.com @author mrdoob / http://mrdoob.com/",
      "radius": {
        "!type": "number",
        "!span": "399[18:26]-405[18:32]"
      }
    },
    "Spline": {
      "!type": "fn(points: ?)",
      "!span": "222[8:6]-228[8:12]",
      "!doc": "Spline from Tween.js, slightly optimized (and trashed) http://sole.github.com/tween.js/examples/05_spline.html * @author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/"
    },
    "Triangle": {
      "normal": {
        "!type": "fn(a: +THREE.Vector3, b: +THREE.Vector3, c: +THREE.Vector3, optionalTarget: ?) -> +THREE.Vector3",
        "!span": "323[13:15]-329[13:21]"
      },
      "barycoordFromPoint": {
        "!type": "fn(point: ?, a: +THREE.Vector3, b: +THREE.Vector3, c: +THREE.Vector3, optionalTarget: +THREE.Vector3) -> +THREE.Vector3",
        "!span": "889[40:15]-907[40:33]"
      },
      "containsPoint": {
        "!type": "fn(point: ?, a: +THREE.Vector3, b: +THREE.Vector3, c: +THREE.Vector3) -> bool",
        "!span": "1874[80:15]-1887[80:28]"
      },
      "prototype": {
        "set": {
          "!type": "fn(a: ?, b: ?, c: ?) -> !this",
          "!span": "2208[98:1]-2211[98:4]"
        },
        "setFromPointsAndIndices": {
          "!type": "fn(points: ?, i0: ?, i1: ?, i2: ?) -> !this",
          "!span": "2320[108:1]-2343[108:24]"
        },
        "copy": {
          "!type": "fn(triangle: +THREE.Triangle) -> !this",
          "!span": "2496[118:1]-2500[118:5]"
        },
        "area": {
          "!type": "fn() -> number",
          "!span": "2637[128:1]-2641[128:5]"
        },
        "midpoint": {
          "!type": "fn(optionalTarget: ?) -> +THREE.Vector3",
          "!span": "2876[144:1]-2884[144:9]"
        },
        "normal": {
          "!type": "fn(optionalTarget: ?) -> +THREE.Vector3",
          "!span": "3062[151:1]-3068[151:7]"
        },
        "plane": {
          "!type": "fn(optionalTarget: ?) -> +THREE.Plane",
          "!span": "3182[157:1]-3187[157:6]"
        },
        "barycoordFromPoint": {
          "!type": "fn(point: ?, optionalTarget: ?) -> +THREE.Vector3",
          "!span": "3345[165:1]-3363[165:19]"
        },
        "containsPoint": {
          "!type": "fn(point: ?) -> bool",
          "!span": "3503[171:1]-3516[171:14]"
        },
        "equals": {
          "!type": "fn(triangle: ?)",
          "!span": "3619[177:1]-3625[177:7]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Triangle",
          "!span": "3759[183:1]-3764[183:6]"
        },
        "!span": "2173[94:27]-3831[189:1]",
        "constructor": "THREE.Triangle"
      },
      "!type": "fn(a: ?, b: ?, c: ?)",
      "!span": "97[5:6]-105[5:14]",
      "!doc": "@author bhouston / http://exocortex.com @author mrdoob / http://mrdoob.com/"
    },
    "Vector2": {
      "prototype": {
        "set": {
          "!type": "fn(x: number, y: number) -> !this",
          "!span": "329[18:1]-332[18:4]"
        },
        "setX": {
          "!type": "fn(x: ?) -> !this",
          "!span": "406[27:1]-410[27:5]"
        },
        "setY": {
          "!type": "fn(y: ?) -> !this",
          "!span": "467[35:1]-471[35:5]"
        },
        "setComponent": {
          "!type": "fn(index: ?, value: ?)",
          "!span": "528[43:1]-540[43:13]"
        },
        "getComponent": {
          "!type": "fn(index: ?) -> !this.x",
          "!span": "739[55:1]-751[55:13]"
        },
        "copy": {
          "!type": "fn(v: +THREE.Vector2) -> !this",
          "!span": "927[67:1]-931[67:5]"
        },
        "add": {
          "!type": "fn(v: +THREE.Vector2, w: ?) -> !this",
          "!span": "1006[76:1]-1009[76:4]"
        },
        "addScalar": {
          "!type": "fn(s: number) -> !this",
          "!span": "1264[92:1]-1273[92:10]"
        },
        "addVectors": {
          "!type": "fn(a: +THREE.Vector2, b: +THREE.Vector2) -> !this",
          "!span": "1346[101:1]-1356[101:11]"
        },
        "sub": {
          "!type": "fn(v: +THREE.Vector2, w: ?) -> !this",
          "!span": "1446[110:1]-1449[110:4]"
        },
        "subScalar": {
          "!type": "fn(s: ?) -> !this",
          "!span": "1704[126:1]-1713[126:10]"
        },
        "subVectors": {
          "!type": "fn(a: +THREE.Vector2, b: +THREE.Vector2) -> !this",
          "!span": "1786[135:1]-1796[135:11]"
        },
        "multiply": {
          "!type": "fn(v: ?) -> !this",
          "!span": "1886[144:1]-1894[144:9]"
        },
        "multiplyScalar": {
          "!type": "fn(s: number) -> !this",
          "!span": "1971[153:1]-1985[153:15]"
        },
        "divide": {
          "!type": "fn(v: ?) -> !this",
          "!span": "2058[162:1]-2064[162:7]"
        },
        "divideScalar": {
          "!type": "fn(scalar: number) -> !this",
          "!span": "2141[171:1]-2153[171:13]"
        },
        "min": {
          "!type": "fn(v: ?) -> !this",
          "!span": "2354[191:1]-2357[191:4]"
        },
        "max": {
          "!type": "fn(v: ?) -> !this",
          "!span": "2495[209:1]-2498[209:4]"
        },
        "clamp": {
          "!type": "fn(min: +THREE.Vector2, max: +THREE.Vector2) -> !this",
          "!span": "2636[227:1]-2641[227:6]"
        },
        "clampScalar": {
          "!type": "fn(minVal: ?, maxVal: ?) -> +THREE.Vector2",
          "!span": "3000[254:1]-3011[254:12]"
        },
        "floor": {
          "!type": "fn() -> !this",
          "!span": "3299[276:1]-3304[276:6]"
        },
        "ceil": {
          "!type": "fn() -> !this",
          "!span": "3410[285:1]-3414[285:5]"
        },
        "round": {
          "!type": "fn() -> !this",
          "!span": "3518[294:1]-3523[294:6]"
        },
        "roundToZero": {
          "!type": "fn() -> !this",
          "!span": "3629[303:1]-3640[303:12]"
        },
        "negate": {
          "!type": "fn() -> !this",
          "!span": "3824[312:1]-3830[312:7]"
        },
        "dot": {
          "!type": "fn(v: ?) -> number",
          "!span": "3912[321:1]-3915[321:4]"
        },
        "lengthSq": {
          "!type": "fn() -> number",
          "!span": "3980[327:1]-3988[327:9]"
        },
        "length": {
          "!type": "fn() -> number",
          "!span": "4056[333:1]-4062[333:7]"
        },
        "normalize": {
          "!type": "fn() -> +THREE.Vector2",
          "!span": "4143[339:1]-4152[339:10]"
        },
        "distanceTo": {
          "!type": "fn(v: ?) -> number",
          "!span": "4221[345:1]-4231[345:11]"
        },
        "distanceToSquared": {
          "!type": "fn(v: ?) -> number",
          "!span": "4309[351:1]-4326[351:18]"
        },
        "setLength": {
          "!type": "fn(l: ?) -> !this",
          "!span": "4425[358:1]-4434[358:10]"
        },
        "lerp": {
          "!type": "fn(v: ?, alpha: ?) -> !this",
          "!span": "4603[371:1]-4607[371:5]"
        },
        "lerpVectors": {
          "!type": "fn(v1: ?, v2: ?, alpha: ?) -> !this",
          "!span": "4733[380:1]-4744[380:12]"
        },
        "equals": {
          "!type": "fn(v: ?) -> bool",
          "!span": "4862[388:1]-4868[388:7]"
        },
        "fromArray": {
          "!type": "fn(array: ?, offset: number) -> !this",
          "!span": "4950[394:1]-4959[394:10]"
        },
        "toArray": {
          "!type": "fn(array: [number], offset: number) -> [!this.x]",
          "!span": "5117[405:1]-5124[405:8]"
        },
        "fromAttribute": {
          "!type": "fn(attribute: ?, index: number, offset: number) -> !this",
          "!span": "5324[417:1]-5337[417:14]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Vector2",
          "!span": "5572[430:1]-5577[430:6]"
        },
        "!span": "295[14:26]-5646[436:1]",
        "constructor": "THREE.Vector2"
      },
      "!type": "fn(x: number, y: number)",
      "!span": "197[7:6]-204[7:13]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author philogb / http://blog.thejit.org/ @author egraether / http://egraether.com/ @author zz85 / http://www.lab4games.net/zz85/blog",
      "x": {
        "!type": "number",
        "!span": "234[10:0]-235[10:1]"
      },
      "y": {
        "!type": "number",
        "!span": "252[8:18]-253[8:19]"
      }
    },
    "Vector3": {
      "prototype": {
        "set": {
          "!type": "fn(x: number, y: number, z: number) -> !this",
          "!span": "445[21:1]-448[21:4]"
        },
        "setX": {
          "!type": "fn(x: ?) -> !this",
          "!span": "539[31:1]-543[31:5]"
        },
        "setY": {
          "!type": "fn(y: ?) -> !this",
          "!span": "600[39:1]-604[39:5]"
        },
        "setZ": {
          "!type": "fn(z: ?) -> !this",
          "!span": "661[47:1]-665[47:5]"
        },
        "setComponent": {
          "!type": "fn(index: ?, value: ?)",
          "!span": "722[55:1]-734[55:13]"
        },
        "getComponent": {
          "!type": "fn(index: ?) -> !this.x",
          "!span": "967[68:1]-979[68:13]"
        },
        "copy": {
          "!type": "fn(v: +THREE.Vector3|[+THREE.Vector3]) -> !this",
          "!span": "1181[81:1]-1185[81:5]"
        },
        "add": {
          "!type": "fn(v: +THREE.Vector3|number, w: ?) -> !this",
          "!span": "1276[91:1]-1279[91:4]"
        },
        "addScalar": {
          "!type": "fn(s: number) -> !this",
          "!span": "1551[108:1]-1560[108:10]"
        },
        "addVectors": {
          "!type": "fn(a: +THREE.Vector3, b: +THREE.Vector3) -> !this",
          "!span": "1648[118:1]-1658[118:11]"
        },
        "sub": {
          "!type": "fn(v: +THREE.Vector3, w: ?) -> !this",
          "!span": "1770[128:1]-1773[128:4]"
        },
        "subScalar": {
          "!type": "fn(s: ?) -> !this",
          "!span": "2046[145:1]-2055[145:10]"
        },
        "subVectors": {
          "!type": "fn(a: +THREE.Vector3|number, b: +THREE.Vector3|number) -> !this",
          "!span": "2143[155:1]-2153[155:11]"
        },
        "multiply": {
          "!type": "fn(v: ?, w: ?) -> !this",
          "!span": "2265[165:1]-2273[165:9]"
        },
        "multiplyScalar": {
          "!type": "fn(scalar: number) -> !this",
          "!span": "2560[182:1]-2574[182:15]"
        },
        "multiplyVectors": {
          "!type": "fn(a: ?, b: ?) -> !this",
          "!span": "2682[192:1]-2697[192:16]"
        },
        "applyEuler": {
          "!type": "fn(euler: ?) -> !this",
          "!span": "2809[202:1]-2819[202:11]"
        },
        "applyAxisAngle": {
          "!type": "fn(axis: ?, angle: ?) -> !this",
          "!span": "3224[224:1]-3238[224:15]"
        },
        "applyMatrix3": {
          "!type": "fn(m: +THREE.Matrix3) -> !this",
          "!span": "3487[240:1]-3499[240:13]"
        },
        "applyMatrix4": {
          "!type": "fn(m: +THREE.Matrix4) -> !this",
          "!span": "3767[256:1]-3779[256:13]"
        },
        "applyProjection": {
          "!type": "fn(m: +THREE.Matrix4) -> !this",
          "!span": "4109[272:1]-4124[272:16]"
        },
        "applyQuaternion": {
          "!type": "fn(q: +THREE.Quaternion) -> !this",
          "!span": "4571[289:1]-4586[289:16]"
        },
        "project": {
          "!type": "fn(camera: ?) -> +THREE.Vector3",
          "!span": "5139[317:1]-5146[317:8]"
        },
        "unproject": {
          "!type": "fn(camera: ?) -> +THREE.Vector3",
          "!span": "5425[332:1]-5434[332:10]"
        },
        "transformDirection": {
          "!type": "fn(m: ?) -> !this",
          "!span": "5713[347:1]-5731[347:19]"
        },
        "divide": {
          "!type": "fn(v: ?) -> !this",
          "!span": "6091[366:1]-6097[366:7]"
        },
        "divideScalar": {
          "!type": "fn(scalar: number) -> !this",
          "!span": "6191[376:1]-6203[376:13]"
        },
        "min": {
          "!type": "fn(v: +THREE.Vector3) -> !this",
          "!span": "6443[398:1]-6446[398:4]"
        },
        "max": {
          "!type": "fn(v: +THREE.Vector3) -> !this",
          "!span": "6632[422:1]-6635[422:4]"
        },
        "clamp": {
          "!type": "fn(min: +THREE.Vector3, max: +THREE.Vector3) -> !this",
          "!span": "6821[446:1]-6826[446:6]"
        },
        "clampScalar": {
          "!type": "fn(minVal: ?, maxVal: ?) -> +THREE.Vector3",
          "!span": "7292[484:1]-7303[484:12]"
        },
        "floor": {
          "!type": "fn() -> !this",
          "!span": "7607[506:1]-7612[506:6]"
        },
        "ceil": {
          "!type": "fn() -> !this",
          "!span": "7751[516:1]-7755[516:5]"
        },
        "round": {
          "!type": "fn() -> !this",
          "!span": "7891[526:1]-7896[526:6]"
        },
        "roundToZero": {
          "!type": "fn() -> !this",
          "!span": "8035[536:1]-8046[536:12]"
        },
        "negate": {
          "!type": "fn() -> !this",
          "!span": "8302[546:1]-8308[546:7]"
        },
        "dot": {
          "!type": "fn(v: [+THREE.Vector3]|+THREE.Vector3) -> number",
          "!span": "8411[556:1]-8414[556:4]"
        },
        "lengthSq": {
          "!type": "fn() -> number",
          "!span": "8494[562:1]-8502[562:9]"
        },
        "length": {
          "!type": "fn() -> number",
          "!span": "8588[568:1]-8594[568:7]"
        },
        "lengthManhattan": {
          "!type": "fn() -> number",
          "!span": "8693[574:1]-8708[574:16]"
        },
        "normalize": {
          "!type": "fn() -> +THREE.Vector3",
          "!span": "8803[580:1]-8812[580:10]"
        },
        "setLength": {
          "!type": "fn(l: ?) -> !this",
          "!span": "8881[586:1]-8890[586:10]"
        },
        "lerp": {
          "!type": "fn(v: +THREE.Vector3, alpha: number) -> !this",
          "!span": "9060[599:1]-9064[599:5]"
        },
        "lerpVectors": {
          "!type": "fn(v1: ?, v2: ?, alpha: ?) -> !this",
          "!span": "9228[609:1]-9239[609:12]"
        },
        "cross": {
          "!type": "fn(v: +THREE.Vector3, w: ?) -> !this",
          "!span": "9357[617:1]-9362[617:6]"
        },
        "crossVectors": {
          "!type": "fn(a: +THREE.Vector3, b: +THREE.Vector3) -> !this",
          "!span": "9722[636:1]-9734[636:13]"
        },
        "projectOnVector": {
          "!type": "fn(vector: ?) -> +THREE.Vector3",
          "!span": "9943[649:1]-9958[649:16]"
        },
        "projectOnPlane": {
          "!type": "fn(planeNormal: ?) -> +THREE.Vector3",
          "!span": "10202[667:1]-10216[667:15]"
        },
        "reflect": {
          "!type": "fn(normal: ?) -> +THREE.Vector3",
          "!span": "10427[683:1]-10434[683:8]"
        },
        "angleTo": {
          "!type": "fn(v: ?) -> number",
          "!span": "10748[700:1]-10755[700:8]"
        },
        "distanceTo": {
          "!type": "fn(v: +THREE.Vector3) -> number",
          "!span": "10944[710:1]-10954[710:11]"
        },
        "distanceToSquared": {
          "!type": "fn(v: +THREE.Vector3) -> number",
          "!span": "11032[716:1]-11049[716:18]"
        },
        "setEulerFromRotationMatrix": {
          "!type": "fn(m: ?, order: ?)",
          "!span": "11190[726:1]-11216[726:27]"
        },
        "setEulerFromQuaternion": {
          "!type": "fn(q: ?, order: ?)",
          "!span": "11376[732:1]-11398[732:23]"
        },
        "getPositionFromMatrix": {
          "!type": "fn(m: ?) -> +THREE.Vector3",
          "!span": "11550[738:1]-11571[738:22]"
        },
        "getScaleFromMatrix": {
          "!type": "fn(m: ?) -> +THREE.Vector3",
          "!span": "11746[746:1]-11764[746:19]"
        },
        "getColumnFromMatrix": {
          "!type": "fn(index: ?, matrix: ?) -> +THREE.Vector3",
          "!span": "11929[753:1]-11948[753:20]"
        },
        "setFromMatrixPosition": {
          "!type": "fn(m: +THREE.Matrix4) -> !this",
          "!span": "12141[761:1]-12162[761:22]"
        },
        "setFromMatrixScale": {
          "!type": "fn(m: ?) -> !this",
          "!span": "12292[771:1]-12310[771:19]"
        },
        "setFromMatrixColumn": {
          "!type": "fn(index: ?, matrix: ?) -> !this",
          "!span": "12650[784:1]-12669[784:20]"
        },
        "equals": {
          "!type": "fn(v: ?) -> bool",
          "!span": "12865[798:1]-12871[798:7]"
        },
        "fromArray": {
          "!type": "fn(array: ?, offset: number) -> !this",
          "!span": "12975[804:1]-12984[804:10]"
        },
        "toArray": {
          "!type": "fn(array: [number], offset: number) -> [!this.x]",
          "!span": "13174[816:1]-13181[816:8]"
        },
        "fromAttribute": {
          "!type": "fn(attribute: ?, index: number, offset: number) -> !this",
          "!span": "13413[829:1]-13426[829:14]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Vector3",
          "!span": "13702[843:1]-13707[843:6]"
        },
        "!span": "411[17:26]-13784[849:1]",
        "constructor": "THREE.Vector3"
      },
      "!type": "fn(x: number, y: number, z: number)",
      "!span": "292[9:6]-299[9:13]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author *kile / http://kile.stravaganza.org/ @author philogb / http://blog.thejit.org/ @author mikael emtinger / http://gomo.se/ @author egraether / http://egraether.com/ @author WestLangley / http://github.com/WestLangley",
      "x": {
        "!type": "number",
        "!span": "332[8:94]-333[8:95]"
      },
      "y": {
        "!type": "number",
        "!span": "350[14:2]-351[14:3]"
      },
      "z": {
        "!type": "number",
        "!span": "368[14:0]-369[14:1]"
      },
      "<i>": {
        "!type": "number",
        "!span": "1911[68:10]-1912[68:11]"
      },
      "index": {
        "!type": "number",
        "!span": "2019[100:9]-2024[100:14]"
      },
      "uv": {
        "!type": "+THREE.Vector2",
        "!span": "2273[106:9]-2275[106:11]"
      }
    },
    "Vector4": {
      "prototype": {
        "set": {
          "!type": "fn(x: number, y: number, z: number, w: number) -> !this",
          "!span": "454[21:1]-457[21:4]"
        },
        "setX": {
          "!type": "fn(x: ?) -> !this",
          "!span": "565[32:1]-569[32:5]"
        },
        "setY": {
          "!type": "fn(y: ?) -> !this",
          "!span": "626[40:1]-630[40:5]"
        },
        "setZ": {
          "!type": "fn(z: ?) -> !this",
          "!span": "687[48:1]-691[48:5]"
        },
        "setW": {
          "!type": "fn(w: ?) -> !this",
          "!span": "748[56:1]-752[56:5]"
        },
        "setComponent": {
          "!type": "fn(index: ?, value: ?)",
          "!span": "809[64:1]-821[64:13]"
        },
        "getComponent": {
          "!type": "fn(index: ?) -> !this.x",
          "!span": "1088[78:1]-1100[78:13]"
        },
        "copy": {
          "!type": "fn(v: ?) -> !this",
          "!span": "1328[92:1]-1332[92:5]"
        },
        "add": {
          "!type": "fn(v: ?, w: ?) -> !this",
          "!span": "1467[103:1]-1470[103:4]"
        },
        "addScalar": {
          "!type": "fn(s: ?) -> !this",
          "!span": "1759[121:1]-1768[121:10]"
        },
        "addVectors": {
          "!type": "fn(a: ?, b: ?) -> !this",
          "!span": "1871[132:1]-1881[132:11]"
        },
        "sub": {
          "!type": "fn(v: ?, w: ?) -> !this",
          "!span": "2015[143:1]-2018[143:4]"
        },
        "subScalar": {
          "!type": "fn(s: ?) -> !this",
          "!span": "2307[161:1]-2316[161:10]"
        },
        "subVectors": {
          "!type": "fn(a: ?, b: ?) -> !this",
          "!span": "2419[172:1]-2429[172:11]"
        },
        "multiplyScalar": {
          "!type": "fn(scalar: number) -> !this",
          "!span": "2563[183:1]-2577[183:15]"
        },
        "applyMatrix4": {
          "!type": "fn(m: ?) -> !this",
          "!span": "2705[194:1]-2717[194:13]"
        },
        "divideScalar": {
          "!type": "fn(scalar: number) -> !this",
          "!span": "3110[212:1]-3122[212:13]"
        },
        "setAxisAngleFromQuaternion": {
          "!type": "fn(q: ?) -> !this",
          "!span": "3401[236:1]-3427[236:27]"
        },
        "setAxisAngleFromRotationMatrix": {
          "!type": "fn(m: ?) -> !this",
          "!span": "3835[264:1]-3865[264:31]"
        },
        "min": {
          "!type": "fn(v: ?) -> !this",
          "!span": "6672[388:1]-6675[388:4]"
        },
        "max": {
          "!type": "fn(v: ?) -> !this",
          "!span": "6909[418:1]-6912[418:4]"
        },
        "clamp": {
          "!type": "fn(min: +THREE.Vector4, max: +THREE.Vector4) -> !this",
          "!span": "7146[448:1]-7151[448:6]"
        },
        "clampScalar": {
          "!type": "fn(minVal: ?, maxVal: ?) -> +THREE.Vector4",
          "!span": "7723[496:1]-7734[496:12]"
        },
        "floor": {
          "!type": "fn() -> !this",
          "!span": "8055[518:2]-8060[518:7]"
        },
        "ceil": {
          "!type": "fn() -> !this",
          "!span": "8234[529:2]-8238[529:6]"
        },
        "round": {
          "!type": "fn() -> !this",
          "!span": "8408[540:2]-8413[540:7]"
        },
        "roundToZero": {
          "!type": "fn() -> !this",
          "!span": "8587[551:2]-8598[551:13]"
        },
        "negate": {
          "!type": "fn() -> !this",
          "!span": "8927[562:1]-8933[562:7]"
        },
        "dot": {
          "!type": "fn(v: ?) -> number",
          "!span": "9057[573:1]-9060[573:4]"
        },
        "lengthSq": {
          "!type": "fn() -> number",
          "!span": "9155[579:1]-9163[579:9]"
        },
        "length": {
          "!type": "fn() -> number",
          "!span": "9267[585:1]-9273[585:7]"
        },
        "lengthManhattan": {
          "!type": "fn() -> number",
          "!span": "9390[591:1]-9405[591:16]"
        },
        "normalize": {
          "!type": "fn() -> +THREE.Vector4",
          "!span": "9521[597:1]-9530[597:10]"
        },
        "setLength": {
          "!type": "fn(l: ?) -> !this",
          "!span": "9599[603:1]-9608[603:10]"
        },
        "lerp": {
          "!type": "fn(v: ?, alpha: ?) -> !this",
          "!span": "9778[617:1]-9782[617:5]"
        },
        "lerpVectors": {
          "!type": "fn(v1: ?, v2: ?, alpha: ?) -> !this",
          "!span": "9984[628:1]-9995[628:12]"
        },
        "equals": {
          "!type": "fn(v: ?) -> bool",
          "!span": "10113[636:1]-10119[636:7]"
        },
        "fromArray": {
          "!type": "fn(array: ?, offset: number) -> !this",
          "!span": "10245[642:1]-10254[642:10]"
        },
        "toArray": {
          "!type": "fn(array: [number], offset: number) -> [!this.x]",
          "!span": "10476[655:1]-10483[655:8]"
        },
        "fromAttribute": {
          "!type": "fn(attribute: ?, index: number, offset: number) -> !this",
          "!span": "10747[669:1]-10760[669:14]"
        },
        "clone": {
          "!type": "fn() -> +THREE.Vector4",
          "!span": "11077[684:1]-11082[684:6]"
        },
        "!span": "420[17:26]-11167[690:1]",
        "constructor": "THREE.Vector4"
      },
      "!type": "fn(x: number, y: number, z: number, w: number)",
      "!span": "259[8:6]-266[8:13]",
      "!doc": "@author supereggbert / http://www.paulbrunt.co.uk/ @author philogb / http://blog.thejit.org/ @author mikael emtinger / http://gomo.se/ @author egraether / http://egraether.com/ @author WestLangley / http://github.com/WestLangley",
      "x": {
        "!type": "number",
        "!span": "302[10:6]-303[10:7]"
      },
      "y": {
        "!type": "number",
        "!span": "320[11:6]-321[11:7]"
      },
      "z": {
        "!type": "number",
        "!span": "338[12:6]-339[12:7]"
      },
      "w": {
        "!type": "number",
        "!span": "356[13:6]-357[13:7]"
      }
    },
    "Bone": {
      "prototype": {
        "!proto": "THREE.Object3D.prototype",
        "!span": "261[16:11]-270[16:20]",
        "constructor": "THREE.Bone"
      },
      "!type": "fn(skin: +THREE.SkinnedMesh)",
      "!span": "145[6:6]-149[6:10]",
      "!doc": "@author mikael emtinger / http://gomo.se/ @author alteredq / http://alteredqualia.com/ @author ikerr / http://verold.com",
      "type": {
        "!type": "string",
        "!span": "210[10:6]-214[10:10]"
      },
      "skin": {
        "!type": "+THREE.SkinnedMesh",
        "!span": "232[12:6]-236[12:10]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "9619[553:8]-9641[553:30]"
      }
    },
    "Group": {
      "prototype": {
        "!proto": "THREE.Object3D.prototype",
        "constructor": "THREE.Group"
      },
      "!type": "fn()",
      "!span": "54[4:6]-59[4:11]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "LOD": {
      "prototype": {
        "addLevel": {
          "!type": "fn(object: ?, distance: number)",
          "!span": "356[18:20]-364[18:28]"
        },
        "getObjectForDistance": {
          "!type": "fn(distance: ?)",
          "!span": "720[39:20]-740[39:40]"
        },
        "raycast": {
          "!type": "fn(raycaster: ?, intersects: ?)",
          "!span": "961[55:20]-968[55:27]"
        },
        "update": {
          "!type": "fn(camera: ?)",
          "!span": "1316[71:20]-1322[71:26]"
        },
        "clone": {
          "!type": "fn(object: +THREE.LOD) -> !0",
          "!span": "2030[114:20]-2035[114:25]"
        },
        "!proto": "THREE.Object3D.prototype",
        "!span": "235[15:10]-244[15:19]",
        "constructor": "THREE.LOD"
      },
      "!type": "fn()",
      "!span": "147[6:6]-150[6:9]",
      "!doc": "@author mikael emtinger / http://gomo.se/ @author alteredq / http://alteredqualia.com/ @author mrdoob / http://mrdoob.com/",
      "objects": {
        "!type": "[?]",
        "!span": "205[10:6]-212[10:13]"
      },
      "name": {
        "!type": "string",
        "!span": "13239[736:9]-13243[736:13]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "13419[744:9]-13437[744:27]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "13560[749:9]-13576[749:25]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "13611[750:9]-13633[750:31]"
      },
      "visible": {
        "!type": "bool",
        "!span": "13675[752:9]-13682[752:16]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "13709[754:9]-13719[754:19]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "13748[755:9]-13761[755:22]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "13794[757:9]-13807[757:22]"
      }
    },
    "LensFlare": {
      "prototype": {
        "add": {
          "!type": "fn(texture: ?, size: number, distance: number, blending: number, color: +THREE.Color, opacity: number)",
          "!span": "606[30:26]-609[30:29]",
          "!doc": "Add: adds another flare"
        },
        "updateLensFlares": {
          "!type": "fn()",
          "!span": "1651[59:26]-1667[59:42]",
          "!doc": "Update lens flares update positions on all flares based on the screen position Set myLensFlare.customUpdateCallback to alter the flares in your project specific way."
        },
        "!proto": "THREE.Object3D.prototype",
        "!span": "431[22:16]-440[22:25]",
        "constructor": "THREE.LensFlare"
      },
      "!type": "fn(texture: ?, size: ?, distance: ?, blending: ?, color: ?)",
      "!span": "108[5:6]-117[5:15]",
      "!doc": "@author mikael emtinger / http://gomo.se/ @author alteredq / http://alteredqualia.com/",
      "lensFlares": {
        "!type": "[THREE.LensFlare.lensFlares.<i>]",
        "!span": "214[9:6]-224[9:16]"
      }
    },
    "Line": {
      "prototype": {
        "raycast": {
          "!type": "fn(raycaster: ?, intersects: ?)",
          "!span": "594[23:21]-601[23:28]"
        },
        "clone": {
          "!type": "fn(object: +THREE.Line) -> !0",
          "!span": "4553[184:21]-4558[184:26]"
        },
        "!proto": "THREE.Object3D.prototype",
        "constructor": "THREE.Line"
      },
      "!type": "fn(geometry: ?, material: +THREE.LineBasicMaterial, mode: number)",
      "!span": "54[4:6]-58[4:10]",
      "!doc": "@author mrdoob / http://mrdoob.com/",
      "type": {
        "!type": "string",
        "!span": "139[4:3]-143[4:7]"
      },
      "mode": {
        "!type": "number",
        "!span": "358[13:6]-362[13:10]"
      },
      "id": {
        "!type": "number",
        "!span": "258[9:30]-262[9:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "310[11:6]-314[11:10]"
      },
      "name": {
        "!type": "string",
        "!span": "351[13:6]-355[13:10]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "1201[56:6]-1219[56:24]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "1313[61:6]-1329[61:22]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "1344[62:6]-1366[62:28]"
      },
      "visible": {
        "!type": "bool",
        "!span": "1383[64:6]-1390[64:13]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "1406[66:6]-1416[66:16]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "1432[67:6]-1445[67:19]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "1462[69:6]-1475[69:19]"
      },
      "renderOrder": {
        "!type": "number",
        "!span": "1490[70:6]-1501[70:17]"
      }
    },
    "LineStrip": {
      "!type": "number",
      "!span": "421[17:6]-430[17:15]"
    },
    "LinePieces": {
      "!type": "number",
      "!span": "442[18:6]-452[18:16]"
    },
    "Mesh": {
      "prototype": {
        "updateMorphTargets": {
          "!type": "fn()",
          "!span": "649[23:21]-667[23:39]"
        },
        "getMorphTargetIndexByName": {
          "!type": "fn(name: ?) -> !this.morphTargetDictionary.<i>",
          "!span": "1143[43:21]-1168[43:46]"
        },
        "raycast": {
          "!type": "fn(raycaster: ?, intersects: ?)",
          "!span": "1452[58:21]-1459[58:28]"
        },
        "clone": {
          "!type": "fn(object: ?|+THREE.MorphAnimMesh, recursive: ?) -> !0",
          "!span": "7544[316:21]-7549[316:26]"
        },
        "!proto": "THREE.Object3D.prototype",
        "constructor": "THREE.Mesh"
      },
      "!type": "fn(geometry: ?, material: ?|+THREE.MeshBasicMaterial)",
      "!span": "188[7:6]-192[7:10]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/ @author mikael emtinger / http://gomo.se/ @author jonobr1 / http://jonobr1.com/"
    },
    "MorphAnimMesh": {
      "prototype": {
        "setFrameRange": {
          "!type": "fn(start: number, end: number)",
          "!span": "645[31:30]-658[31:43]"
        },
        "setDirectionForward": {
          "!type": "fn()",
          "!span": "836[40:30]-855[40:49]"
        },
        "setDirectionBackward": {
          "!type": "fn()",
          "!span": "963[47:30]-983[47:50]"
        },
        "parseAnimations": {
          "!type": "fn()",
          "!span": "1092[54:30]-1107[54:45]"
        },
        "setAnimationLabel": {
          "!type": "fn(label: ?, start: ?, end: ?)",
          "!span": "1900[90:30]-1917[90:47]"
        },
        "playAnimation": {
          "!type": "fn(label: ?, fps: ?)",
          "!span": "2121[98:30]-2134[98:43]"
        },
        "updateAnimation": {
          "!type": "fn(delta: ?)",
          "!span": "2529[116:30]-2544[116:45]"
        },
        "interpolateTargets": {
          "!type": "fn(a: ?, b: ?, t: ?)",
          "!span": "3750[179:30]-3768[179:48]"
        },
        "clone": {
          "!type": "fn(object: +THREE.MorphAnimMesh) -> !0",
          "!span": "4039[194:30]-4044[194:35]"
        },
        "!proto": "THREE.Mesh.prototype",
        "!span": "498[28:20]-507[28:29]",
        "constructor": "THREE.MorphAnimMesh"
      },
      "!type": "fn(geometry: ?, material: ?)",
      "!span": "63[4:6]-76[4:19]",
      "!doc": "@author alteredq / http://alteredqualia.com/",
      "type": {
        "!type": "string",
        "!span": "167[8:6]-171[8:10]"
      },
      "duration": {
        "!type": "number",
        "!span": "207[12:6]-215[12:14]",
        "!doc": "API"
      },
      "mirroredLoop": {
        "!type": "bool",
        "!span": "246[13:6]-258[13:18]"
      },
      "time": {
        "!type": "number",
        "!span": "274[14:6]-278[14:10]"
      },
      "lastKeyframe": {
        "!type": "number",
        "!span": "306[18:6]-318[18:18]",
        "!doc": "internals"
      },
      "currentKeyframe": {
        "!type": "number",
        "!span": "330[19:6]-345[19:21]"
      },
      "direction": {
        "!type": "number",
        "!span": "358[21:6]-367[21:15]"
      },
      "directionBackwards": {
        "!type": "bool",
        "!span": "379[22:6]-397[22:24]"
      },
      "startKeyframe": {
        "!type": "number",
        "!span": "694[33:6]-707[33:19]"
      },
      "endKeyframe": {
        "!type": "number",
        "!span": "723[34:6]-734[34:17]"
      },
      "length": {
        "!type": "number",
        "!span": "749[36:6]-755[36:12]"
      },
      "name": {
        "!type": "string",
        "!span": "13239[736:9]-13243[736:13]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "13419[744:9]-13437[744:27]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "13560[749:9]-13576[749:25]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "13611[750:9]-13633[750:31]"
      },
      "visible": {
        "!type": "bool",
        "!span": "13675[752:9]-13682[752:16]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "13709[754:9]-13719[754:19]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "13748[755:9]-13761[755:22]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "13794[757:9]-13807[757:22]"
      }
    },
    "PointCloud": {
      "prototype": {
        "raycast": {
          "!type": "fn(raycaster: ?, intersects: ?)",
          "!span": "531[18:27]-538[18:34]"
        },
        "clone": {
          "!type": "fn(object: +THREE.PointCloud) -> !0",
          "!span": "2952[145:27]-2957[145:32]"
        },
        "!proto": "THREE.Object3D.prototype",
        "constructor": "THREE.PointCloud"
      },
      "!type": "fn(geometry: ?, material: +THREE.PointCloudMaterial)",
      "!span": "63[4:6]-73[4:16]",
      "!doc": "@author alteredq / http://alteredqualia.com/",
      "type": {
        "!type": "string",
        "!span": "148[4:12]-152[4:16]"
      },
      "geometry": {
        "!type": "+THREE.Geometry",
        "!span": "176[10:6]-184[10:14]",
        "!doc": "use temp geometry to compute face and vertex normals for each morph"
      },
      "material": {
        "!type": "+THREE.PointCloudMaterial",
        "!span": "251[11:6]-259[11:14]"
      },
      "id": {
        "!type": "number",
        "!span": "258[9:30]-262[9:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "310[11:6]-314[11:10]"
      },
      "name": {
        "!type": "string",
        "!span": "351[13:6]-355[13:10]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "1201[56:6]-1219[56:24]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "1313[61:6]-1329[61:22]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "1344[62:6]-1366[62:28]"
      },
      "visible": {
        "!type": "bool",
        "!span": "1383[64:6]-1390[64:13]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "1406[66:6]-1416[66:16]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "1432[67:6]-1445[67:19]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "1462[69:6]-1475[69:19]"
      },
      "renderOrder": {
        "!type": "number",
        "!span": "1490[70:6]-1501[70:17]"
      }
    },
    "ParticleSystem": {
      "!type": "fn(geometry: ?, material: ?) -> +THREE.PointCloud",
      "!span": "3186[157:6]-3200[157:20]",
      "!doc": "Backwards compatibility"
    },
    "Skeleton": {
      "prototype": {
        "calculateInverses": {
          "!type": "fn()",
          "!span": "2196[87:25]-2213[87:42]"
        },
        "pose": {
          "!type": "fn()",
          "!span": "2514[107:25]-2518[107:29]"
        },
        "update": {
          "!type": "fn()",
          "!span": "3231[152:25]-3237[152:31]"
        }
      },
      "!type": "fn(bones: [?], boneInverses: ?, useVertexTexture: ?)",
      "!span": "202[7:6]-210[7:14]",
      "!doc": "@author mikael emtinger / http://gomo.se/ @author alteredq / http://alteredqualia.com/ @author michael guerrero / http://realitymeltdown.com @author ikerr / http://verold.com",
      "useVertexTexture": {
        "!type": "bool",
        "!span": "273[9:6]-289[9:22]"
      },
      "bones": {
        "<i>": {
          "!type": "+THREE.Bone",
          "!span": "1701[85:9]-1707[85:15]"
        },
        "!type": "[+THREE.Bone]",
        "!span": "450[17:6]-455[17:11]",
        "!doc": "TODO: remove bone creation as there is no reason (other than convenience) for THREE.SkinnedMesh to do this."
      },
      "boneTextureWidth": {
        "!type": "number",
        "!span": "1094[41:7]-1110[41:23]"
      },
      "boneTextureHeight": {
        "!type": "number",
        "!span": "1126[42:7]-1143[42:24]"
      },
      "boneTexture": {
        "!type": "+THREE.DataTexture",
        "!span": "1281[45:7]-1292[45:18]"
      },
      "boneInverses": {
        "!type": "[+THREE.Matrix4]",
        "!span": "1888[67:8]-1900[67:20]"
      }
    },
    "SkinnedMesh": {
      "prototype": {
        "bind": {
          "!type": "fn(skeleton: +THREE.Skeleton, bindMatrix: ?)",
          "!span": "1681[83:28]-1685[83:32]"
        },
        "pose": {
          "!type": "fn()",
          "!span": "1981[100:28]-1985[100:32]"
        },
        "normalizeSkinWeights": {
          "!type": "fn()",
          "!span": "2059[106:28]-2079[106:48]"
        },
        "updateMatrixWorld": {
          "!type": "fn(force: ?)",
          "!span": "2579[136:28]-2596[136:45]"
        },
        "clone": {
          "!type": "fn(object: +THREE.SkinnedMesh) -> !0",
          "!span": "3009[156:28]-3014[156:33]"
        },
        "!proto": "THREE.Mesh.prototype",
        "!span": "1540[80:18]-1549[80:27]",
        "constructor": "THREE.SkinnedMesh"
      },
      "!type": "fn(geometry: ?, material: ?, useVertexTexture: ?)",
      "!span": "145[6:6]-156[6:17]",
      "!doc": "@author mikael emtinger / http://gomo.se/ @author alteredq / http://alteredqualia.com/ @author ikerr / http://verold.com",
      "type": {
        "!type": "string",
        "!span": "265[10:6]-269[10:10]"
      },
      "bindMode": {
        "!type": "string",
        "!span": "294[12:6]-302[12:14]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "9619[553:8]-9641[553:30]"
      },
      "skeleton": {
        "!type": "+THREE.Skeleton",
        "!span": "1730[85:6]-1738[85:14]"
      },
      "name": {
        "!type": "string",
        "!span": "13239[736:9]-13243[736:13]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "13419[744:9]-13437[744:27]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "13560[749:9]-13576[749:25]"
      },
      "visible": {
        "!type": "bool",
        "!span": "13675[752:9]-13682[752:16]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "13709[754:9]-13719[754:19]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "13748[755:9]-13761[755:22]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "13794[757:9]-13807[757:22]"
      }
    },
    "Sprite": {
      "prototype": {
        "raycast": {
          "!type": "fn(raycaster: ?, intersects: ?)",
          "!span": "994[32:23]-1001[32:30]"
        },
        "clone": {
          "!type": "fn(object: +THREE.Sprite) -> !0",
          "!span": "1438[61:23]-1443[61:28]"
        },
        "!proto": "THREE.Object3D.prototype",
        "constructor": "THREE.Sprite"
      },
      "!type": "fn(material: +THREE.SpriteMaterial)",
      "!span": "108[5:6]-114[5:12]",
      "!doc": "@author mikael emtinger / http://gomo.se/ @author alteredq / http://alteredqualia.com/",
      "type": {
        "!type": "string",
        "!span": "705[27:27]-709[27:31]"
      },
      "material": {
        "!type": "+THREE.SpriteMaterial",
        "!span": "758[23:7]-766[23:15]"
      },
      "id": {
        "!type": "number",
        "!span": "258[9:30]-262[9:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "310[11:6]-314[11:10]"
      },
      "name": {
        "!type": "string",
        "!span": "351[13:6]-355[13:10]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "1201[56:6]-1219[56:24]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "1313[61:6]-1329[61:22]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "1344[62:6]-1366[62:28]"
      },
      "visible": {
        "!type": "bool",
        "!span": "1383[64:6]-1390[64:13]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "1406[66:6]-1416[66:16]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "1432[67:6]-1445[67:19]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "1462[69:6]-1475[69:19]"
      },
      "renderOrder": {
        "!type": "number",
        "!span": "1490[70:6]-1501[70:17]"
      }
    },
    "WebGLRenderTarget": {
      "prototype": {
        "setSize": {
          "!type": "fn(width: ?, height: ?)",
          "!span": "1324[39:1]-1331[39:8]"
        },
        "clone": {
          "!type": "fn() -> +THREE.WebGLRenderTarget",
          "!span": "1416[46:1]-1421[46:6]"
        },
        "dispose": {
          "!type": "fn()",
          "!span": "1982[75:1]-1989[75:8]"
        },
        "!span": "1280[35:36]-2057[81:1]",
        "constructor": "THREE.WebGLRenderTarget",
        "addEventListener": "THREE.BufferGeometry.prototype.addEventListener",
        "hasEventListener": "THREE.BufferGeometry.prototype.hasEventListener",
        "removeEventListener": "THREE.BufferGeometry.prototype.removeEventListener",
        "dispatchEvent": "THREE.BufferGeometry.prototype.dispatchEvent"
      },
      "!type": "fn(width: number, height: number, options: THREE.WebGLRenderTargetCube.!2)",
      "!span": "110[5:6]-127[5:23]",
      "!doc": "@author szimek / https://github.com/szimek/ @author alteredq / http://alteredqualia.com/",
      "width": {
        "!type": "number",
        "!span": "175[7:6]-180[7:11]"
      },
      "height": {
        "!type": "number",
        "!span": "196[8:6]-202[8:12]"
      },
      "wrapS": {
        "!type": "number",
        "!span": "247[12:6]-252[12:11]"
      },
      "wrapT": {
        "!type": "number",
        "!span": "334[13:6]-339[13:11]"
      },
      "magFilter": {
        "!type": "number",
        "!span": "422[15:6]-431[15:15]"
      },
      "minFilter": {
        "!type": "number",
        "!span": "514[16:6]-523[16:15]"
      },
      "anisotropy": {
        "!type": "number",
        "!span": "619[18:6]-629[18:16]"
      },
      "format": {
        "!type": "number",
        "!span": "783[23:6]-789[23:12]"
      },
      "type": {
        "!type": "number",
        "!span": "864[24:6]-868[24:10]"
      },
      "depthBuffer": {
        "!type": "bool",
        "!span": "946[26:6]-957[26:17]"
      },
      "stencilBuffer": {
        "!type": "bool",
        "!span": "1030[27:6]-1043[27:19]"
      },
      "generateMipmaps": {
        "!type": "bool",
        "!span": "1121[29:6]-1136[29:21]"
      }
    },
    "WebGLRenderTargetCube": {
      "prototype": {
        "!proto": "THREE.WebGLRenderTarget.prototype",
        "constructor": "THREE.WebGLRenderTargetCube"
      },
      "!type": "fn(width: ?, height: ?, options: THREE.WebGLRenderTargetCube.!2)",
      "!span": "62[4:6]-83[4:27]",
      "!doc": "@author alteredq / http://alteredqualia.com"
    },
    "WebGLRenderer": {
      "!type": "fn(parameters: ?)",
      "!span": "203[7:6]-216[7:19]",
      "!doc": "@author supereggbert / http://www.paulbrunt.co.uk/ @author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/ @author szimek / https://github.com/szimek/"
    },
    "ShaderLib": {
      "basic": {
        "uniforms": {
          "!span": "218[13:2]-226[13:10]"
        },
        "vertexShader": {
          "!type": "string",
          "!span": "370[21:2]-382[21:14]"
        },
        "fragmentShader": {
          "!type": "string",
          "!span": "1518[61:2]-1532[61:16]"
        },
        "!span": "204[11:1]-211[11:8]"
      },
      "lambert": {
        "uniforms": {
          "!span": "3160[109:2]-3168[109:10]"
        },
        "vertexShader": {
          "!type": "string",
          "!span": "3495[123:2]-3507[123:14]"
        },
        "fragmentShader": {
          "!type": "string",
          "!span": "4836[171:2]-4850[171:16]"
        },
        "!span": "3144[107:1]-3153[107:10]"
      },
      "phong": {
        "uniforms": {
          "!span": "6860[242:2]-6868[242:10]"
        },
        "vertexShader": {
          "!type": "string",
          "!span": "7375[260:2]-7387[260:14]"
        },
        "fragmentShader": {
          "!type": "string",
          "!span": "8894[316:2]-8908[316:16]"
        },
        "!span": "6846[240:1]-6853[240:8]"
      },
      "particle_basic": {
        "uniforms": {
          "!span": "10661[372:2]-10669[372:10]"
        },
        "vertexShader": {
          "!type": "string",
          "!span": "10784[379:2]-10796[379:14]"
        },
        "fragmentShader": {
          "!type": "string",
          "!span": "11541[411:2]-11555[411:16]"
        },
        "!span": "10638[370:1]-10654[370:17]"
      },
      "dashed": {
        "uniforms": {
          "!span": "12621[448:2]-12629[448:10]"
        },
        "vertexShader": {
          "!type": "string",
          "!span": "12873[461:2]-12885[461:14]"
        },
        "fragmentShader": {
          "!type": "string",
          "!span": "13424[487:2]-13438[487:16]"
        },
        "!span": "12606[446:1]-12614[446:9]"
      },
      "depth": {
        "uniforms": {
          "mNear": {
            "type": {
              "!type": "string",
              "!span": "14467[532:14]-14471[532:18]"
            },
            "value": {
              "!type": "number",
              "!span": "14478[532:25]-14483[532:30]"
            },
            "!span": "14456[532:3]-14463[532:10]"
          },
          "mFar": {
            "type": {
              "!type": "string",
              "!span": "14506[533:14]-14510[533:18]"
            },
            "value": {
              "!type": "number",
              "!span": "14517[533:25]-14522[533:30]"
            },
            "!span": "14495[533:3]-14501[533:9]"
          },
          "opacity": {
            "type": {
              "!type": "string",
              "!span": "14551[534:17]-14555[534:21]"
            },
            "value": {
              "!type": "number",
              "!span": "14562[534:28]-14567[534:33]"
            },
            "!span": "14537[534:3]-14546[534:12]"
          },
          "!span": "14440[530:2]-14448[530:10]"
        },
        "vertexShader": {
          "!type": "string",
          "!span": "14584[538:2]-14596[538:14]"
        },
        "fragmentShader": {
          "!type": "string",
          "!span": "14924[554:2]-14938[554:16]"
        },
        "!span": "14426[528:1]-14433[528:8]"
      },
      "normal": {
        "uniforms": {
          "opacity": {
            "type": {
              "!type": "string",
              "!span": "15653[590:17]-15657[590:21]"
            },
            "value": {
              "!type": "number",
              "!span": "15664[590:28]-15669[590:33]"
            },
            "!span": "15639[590:3]-15648[590:12]"
          },
          "!span": "15623[588:2]-15631[588:10]"
        },
        "vertexShader": {
          "!type": "string",
          "!span": "15686[594:2]-15698[594:14]"
        },
        "fragmentShader": {
          "!type": "string",
          "!span": "16109[614:2]-16123[614:16]"
        },
        "!span": "15608[586:1]-15616[586:9]"
      },
      "cube": {
        "uniforms": {
          "tCube": {
            "type": {
              "!type": "string",
              "!span": "16663[640:25]-16667[640:29]"
            },
            "!span": "16652[640:14]-16659[640:21]"
          },
          "tFlip": {
            "type": {
              "!type": "string",
              "!span": "16705[641:16]-16709[641:20]"
            },
            "value": {
              "!type": "number",
              "!span": "16716[641:27]-16721[641:32]"
            },
            "!span": "16694[641:5]-16701[641:12]"
          },
          "!span": "16640[640:2]-16648[640:10]"
        },
        "vertexShader": {
          "!type": "string",
          "!span": "16735[643:2]-16747[643:14]"
        },
        "fragmentShader": {
          "!type": "string",
          "!span": "17122[662:2]-17136[662:16]"
        },
        "!span": "16627[638:1]-16633[638:7]"
      },
      "equirect": {
        "uniforms": {
          "tEquirect": {
            "type": {
              "!type": "string",
              "!span": "17747[690:29]-17751[690:33]"
            },
            "!span": "17732[690:14]-17743[690:25]"
          },
          "tFlip": {
            "type": {
              "!type": "string",
              "!span": "17789[691:16]-17793[691:20]"
            },
            "value": {
              "!type": "number",
              "!span": "17800[691:27]-17805[691:32]"
            },
            "!span": "17778[691:5]-17785[691:12]"
          },
          "!span": "17720[690:2]-17728[690:10]"
        },
        "vertexShader": {
          "!type": "string",
          "!span": "17819[693:2]-17831[693:14]"
        },
        "fragmentShader": {
          "!type": "string",
          "!span": "18206[712:2]-18220[712:16]"
        },
        "!span": "17703[688:1]-17713[688:11]"
      },
      "depthRGBA": {
        "vertexShader": {
          "!type": "string",
          "!span": "19289[755:2]-19301[755:14]"
        },
        "fragmentShader": {
          "!type": "string",
          "!span": "19765[774:2]-19779[774:16]"
        },
        "!span": "19254[751:1]-19265[751:12]"
      },
      "!span": "188[9:6]-197[9:15]"
    },
    "UniformsLib": {
      "common": {
        "diffuse": {
          "type": {
            "!type": "string",
            "!span": "105[8:16]-109[8:20]"
          },
          "!span": "91[8:2]-100[8:11]",
          "value": "+THREE.Color"
        },
        "opacity": {
          "type": {
            "!type": "string",
            "!span": "170[9:16]-174[9:20]"
          },
          "value": {
            "!type": "number",
            "!span": "181[9:27]-186[9:32]"
          },
          "!span": "156[9:2]-165[9:11]"
        },
        "map": {
          "type": {
            "!type": "string",
            "!span": "208[11:12]-212[11:16]"
          },
          "!span": "198[11:2]-203[11:7]"
        },
        "offsetRepeat": {
          "type": {
            "!type": "string",
            "!span": "255[12:21]-259[12:25]"
          },
          "!span": "236[12:2]-250[12:16]",
          "value": "+THREE.Vector4"
        },
        "lightMap": {
          "type": {
            "!type": "string",
            "!span": "327[14:17]-331[14:21]"
          },
          "!span": "312[14:2]-322[14:12]"
        },
        "specularMap": {
          "type": {
            "!type": "string",
            "!span": "373[15:20]-377[15:24]"
          },
          "!span": "355[15:2]-368[15:15]"
        },
        "alphaMap": {
          "type": {
            "!type": "string",
            "!span": "416[16:17]-420[16:21]"
          },
          "!span": "401[16:2]-411[16:12]"
        },
        "envMap": {
          "type": {
            "!type": "string",
            "!span": "458[18:15]-462[18:19]"
          },
          "!span": "445[18:2]-453[18:10]"
        },
        "flipEnvMap": {
          "type": {
            "!type": "string",
            "!span": "503[19:19]-507[19:23]"
          },
          "value": {
            "!type": "number",
            "!span": "514[19:30]-519[19:35]"
          },
          "!span": "486[19:2]-498[19:14]"
        },
        "reflectivity": {
          "type": {
            "!type": "string",
            "!span": "549[20:21]-553[20:25]"
          },
          "value": {
            "!type": "number",
            "!span": "560[20:32]-565[20:37]"
          },
          "!span": "530[20:2]-544[20:16]"
        },
        "refractionRatio": {
          "type": {
            "!type": "string",
            "!span": "598[21:24]-602[21:28]"
          },
          "value": {
            "!type": "number",
            "!span": "609[21:35]-614[21:40]"
          },
          "!span": "576[21:2]-593[21:19]"
        },
        "morphTargetInfluences": {
          "type": {
            "!type": "string",
            "!span": "655[23:30]-659[23:34]"
          },
          "value": {
            "!type": "number",
            "!span": "666[23:41]-671[23:46]"
          },
          "!span": "627[23:2]-650[23:25]"
        },
        "!span": "78[6:1]-84[6:7]"
      },
      "bump": {
        "bumpMap": {
          "type": {
            "!type": "string",
            "!span": "709[29:16]-713[29:20]"
          },
          "!span": "695[29:2]-704[29:11]"
        },
        "bumpScale": {
          "type": {
            "!type": "string",
            "!span": "753[30:18]-757[30:22]"
          },
          "value": {
            "!type": "number",
            "!span": "764[30:29]-769[30:34]"
          },
          "!span": "737[30:2]-748[30:13]"
        },
        "!span": "684[27:1]-688[27:5]"
      },
      "normalmap": {
        "normalMap": {
          "type": {
            "!type": "string",
            "!span": "814[36:18]-818[36:22]"
          },
          "!span": "798[36:2]-809[36:13]"
        },
        "normalScale": {
          "type": {
            "!type": "string",
            "!span": "860[37:20]-864[37:24]"
          },
          "!span": "842[37:2]-855[37:15]",
          "value": "+THREE.Vector2"
        },
        "!span": "782[34:1]-791[34:10]"
      },
      "fog": {
        "fogDensity": {
          "type": {
            "!type": "string",
            "!span": "941[42:19]-945[42:23]"
          },
          "value": {
            "!type": "number",
            "!span": "952[42:30]-957[42:35]"
          },
          "!span": "924[42:2]-936[42:14]"
        },
        "fogNear": {
          "type": {
            "!type": "string",
            "!span": "986[43:16]-990[43:20]"
          },
          "value": {
            "!type": "number",
            "!span": "997[43:27]-1002[43:32]"
          },
          "!span": "972[43:2]-981[43:11]"
        },
        "fogFar": {
          "type": {
            "!type": "string",
            "!span": "1024[44:15]-1028[44:19]"
          },
          "value": {
            "!type": "number",
            "!span": "1035[44:26]-1040[44:31]"
          },
          "!span": "1011[44:2]-1019[44:10]"
        },
        "fogColor": {
          "type": {
            "!type": "string",
            "!span": "1067[45:17]-1071[45:21]"
          },
          "!span": "1052[45:2]-1062[45:12]",
          "value": "+THREE.Color"
        },
        "!span": "913[40:1]-916[40:4]"
      },
      "lights": {
        "ambientLightColor": {
          "type": {
            "!type": "string",
            "!span": "1159[51:26]-1163[51:30]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1171[51:38]-1176[51:43]"
          },
          "!span": "1135[51:2]-1154[51:21]"
        },
        "directionalLightDirection": {
          "type": {
            "!type": "string",
            "!span": "1219[53:34]-1223[53:38]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1231[53:46]-1236[53:51]"
          },
          "!span": "1187[53:2]-1214[53:29]"
        },
        "directionalLightColor": {
          "type": {
            "!type": "string",
            "!span": "1274[54:30]-1278[54:34]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1286[54:42]-1291[54:47]"
          },
          "!span": "1246[54:2]-1269[54:25]"
        },
        "hemisphereLightDirection": {
          "type": {
            "!type": "string",
            "!span": "1333[56:33]-1337[56:37]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1345[56:45]-1350[56:50]"
          },
          "!span": "1302[56:2]-1328[56:28]"
        },
        "hemisphereLightSkyColor": {
          "type": {
            "!type": "string",
            "!span": "1390[57:32]-1394[57:36]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1402[57:44]-1407[57:49]"
          },
          "!span": "1360[57:2]-1385[57:27]"
        },
        "hemisphereLightGroundColor": {
          "type": {
            "!type": "string",
            "!span": "1450[58:35]-1454[58:39]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1462[58:47]-1467[58:52]"
          },
          "!span": "1417[58:2]-1445[58:30]"
        },
        "pointLightColor": {
          "type": {
            "!type": "string",
            "!span": "1500[60:24]-1504[60:28]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1512[60:36]-1517[60:41]"
          },
          "!span": "1478[60:2]-1495[60:19]"
        },
        "pointLightPosition": {
          "type": {
            "!type": "string",
            "!span": "1552[61:27]-1556[61:31]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1564[61:39]-1569[61:44]"
          },
          "!span": "1527[61:2]-1547[61:22]"
        },
        "pointLightDistance": {
          "type": {
            "!type": "string",
            "!span": "1604[62:27]-1608[62:31]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1617[62:40]-1622[62:45]"
          },
          "!span": "1579[62:2]-1599[62:22]"
        },
        "pointLightDecay": {
          "type": {
            "!type": "string",
            "!span": "1654[63:24]-1658[63:28]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1667[63:37]-1672[63:42]"
          },
          "!span": "1632[63:2]-1649[63:19]"
        },
        "spotLightColor": {
          "type": {
            "!type": "string",
            "!span": "1704[65:23]-1708[65:27]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1716[65:35]-1721[65:40]"
          },
          "!span": "1683[65:2]-1699[65:18]"
        },
        "spotLightPosition": {
          "type": {
            "!type": "string",
            "!span": "1755[66:26]-1759[66:30]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1767[66:38]-1772[66:43]"
          },
          "!span": "1731[66:2]-1750[66:21]"
        },
        "spotLightDirection": {
          "type": {
            "!type": "string",
            "!span": "1807[67:27]-1811[67:31]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1819[67:39]-1824[67:44]"
          },
          "!span": "1782[67:2]-1802[67:22]"
        },
        "spotLightDistance": {
          "type": {
            "!type": "string",
            "!span": "1858[68:26]-1862[68:30]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1871[68:39]-1876[68:44]"
          },
          "!span": "1834[68:2]-1853[68:21]"
        },
        "spotLightAngleCos": {
          "type": {
            "!type": "string",
            "!span": "1910[69:26]-1914[69:30]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1923[69:39]-1928[69:44]"
          },
          "!span": "1886[69:2]-1905[69:21]"
        },
        "spotLightExponent": {
          "type": {
            "!type": "string",
            "!span": "1962[70:26]-1966[70:30]"
          },
          "value": {
            "!type": "[?]",
            "!span": "1975[70:39]-1980[70:44]"
          },
          "!span": "1938[70:2]-1957[70:21]"
        },
        "spotLightDecay": {
          "type": {
            "!type": "string",
            "!span": "2011[71:23]-2015[71:27]"
          },
          "value": {
            "!type": "[?]",
            "!span": "2024[71:36]-2029[71:41]"
          },
          "!span": "1990[71:2]-2006[71:18]"
        },
        "!span": "1122[49:1]-1128[49:7]"
      },
      "particle": {
        "psColor": {
          "type": {
            "!type": "string",
            "!span": "2072[77:16]-2076[77:20]"
          },
          "!span": "2058[77:2]-2067[77:11]",
          "value": "+THREE.Color"
        },
        "opacity": {
          "type": {
            "!type": "string",
            "!span": "2137[78:16]-2141[78:20]"
          },
          "value": {
            "!type": "number",
            "!span": "2148[78:27]-2153[78:32]"
          },
          "!span": "2123[78:2]-2132[78:11]"
        },
        "size": {
          "type": {
            "!type": "string",
            "!span": "2175[79:13]-2179[79:17]"
          },
          "value": {
            "!type": "number",
            "!span": "2186[79:24]-2191[79:29]"
          },
          "!span": "2164[79:2]-2170[79:8]"
        },
        "scale": {
          "type": {
            "!type": "string",
            "!span": "2214[80:14]-2218[80:18]"
          },
          "value": {
            "!type": "number",
            "!span": "2225[80:25]-2230[80:30]"
          },
          "!span": "2202[80:2]-2209[80:9]"
        },
        "map": {
          "type": {
            "!type": "string",
            "!span": "2251[81:12]-2255[81:16]"
          },
          "!span": "2241[81:2]-2246[81:7]"
        },
        "offsetRepeat": {
          "type": {
            "!type": "string",
            "!span": "2298[82:21]-2302[82:25]"
          },
          "!span": "2279[82:2]-2293[82:16]",
          "value": "+THREE.Vector4"
        },
        "fogDensity": {
          "type": {
            "!type": "string",
            "!span": "2372[84:19]-2376[84:23]"
          },
          "value": {
            "!type": "number",
            "!span": "2383[84:30]-2388[84:35]"
          },
          "!span": "2355[84:2]-2367[84:14]"
        },
        "fogNear": {
          "type": {
            "!type": "string",
            "!span": "2417[85:16]-2421[85:20]"
          },
          "value": {
            "!type": "number",
            "!span": "2428[85:27]-2433[85:32]"
          },
          "!span": "2403[85:2]-2412[85:11]"
        },
        "fogFar": {
          "type": {
            "!type": "string",
            "!span": "2455[86:15]-2459[86:19]"
          },
          "value": {
            "!type": "number",
            "!span": "2466[86:26]-2471[86:31]"
          },
          "!span": "2442[86:2]-2450[86:10]"
        },
        "fogColor": {
          "type": {
            "!type": "string",
            "!span": "2498[87:17]-2502[87:21]"
          },
          "!span": "2483[87:2]-2493[87:12]",
          "value": "+THREE.Color"
        },
        "!span": "2043[75:1]-2051[75:9]"
      },
      "shadowmap": {
        "shadowMap": {
          "type": {
            "!type": "string",
            "!span": "2584[93:17]-2588[93:21]"
          },
          "value": {
            "!type": "[?]",
            "!span": "2596[93:29]-2601[93:34]"
          },
          "!span": "2569[93:2]-2580[93:13]"
        },
        "shadowMapSize": {
          "type": {
            "!type": "string",
            "!span": "2630[94:21]-2634[94:25]"
          },
          "value": {
            "!type": "[?]",
            "!span": "2643[94:34]-2648[94:39]"
          },
          "!span": "2611[94:2]-2626[94:17]"
        },
        "shadowBias": {
          "type": {
            "!type": "string",
            "!span": "2676[96:19]-2680[96:23]"
          },
          "value": {
            "!type": "[?]",
            "!span": "2689[96:32]-2694[96:37]"
          },
          "!span": "2659[96:2]-2671[96:14]"
        },
        "shadowDarkness": {
          "type": {
            "!type": "string",
            "!span": "2724[97:22]-2728[97:26]"
          },
          "value": {
            "!type": "[?]",
            "!span": "2737[97:35]-2742[97:40]"
          },
          "!span": "2704[97:2]-2720[97:18]"
        },
        "shadowMatrix": {
          "type": {
            "!type": "string",
            "!span": "2772[99:21]-2776[99:25]"
          },
          "value": {
            "!type": "[?]",
            "!span": "2785[99:34]-2790[99:39]"
          },
          "!span": "2753[99:2]-2767[99:16]"
        },
        "!span": "2553[91:1]-2562[91:10]"
      },
      "!span": "60[4:6]-71[4:17]",
      "!doc": "Uniforms library for shared webgl shaders"
    },
    "UniformsUtils": {
      "merge": {
        "!type": "fn(uniforms: [?]|[?]) -> ?",
        "!span": "56[6:1]-61[6:6]"
      },
      "clone": {
        "!type": "fn(uniforms_src: ?) -> ?",
        "!span": "292[26:1]-297[26:6]"
      },
      "!span": "36[4:6]-49[4:19]",
      "!doc": "Uniform Utilities"
    },
    "WebGLExtensions": {
      "!type": "fn(gl: ?)",
      "!span": "52[4:6]-67[4:21]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "WebGLProgram": {
      "!type": "fn(renderer: ?, code: string, material: ?, parameters: THREE.WebGLProgram.!3) -> !this",
      "!span": "6[0:6]-18[0:18]",
      "uniforms": {
        "!span": "11048[406:7]-11056[406:15]"
      },
      "attributes": {
        "!span": "11585[442:7]-11595[442:17]"
      },
      "attributesKeys": {
        "!type": "[string]",
        "!span": "11659[443:7]-11673[443:21]"
      },
      "id": {
        "!type": "number",
        "!span": "11722[447:7]-11724[447:9]"
      },
      "code": {
        "!type": "string",
        "!span": "11753[448:7]-11757[448:11]"
      },
      "usedTimes": {
        "!type": "number",
        "!span": "11773[449:7]-11782[449:16]"
      },
      "vertexShader": {
        "!type": "+THREE.WebGLShader",
        "!span": "11821[451:7]-11833[451:19]"
      }
    },
    "WebGLShader": {
      "!type": "fn(gl: ?, type: ?, string: string)",
      "!span": "6[0:6]-17[0:17]"
    },
    "WebGLState": {
      "!type": "fn(gl: ?, paramThreeToGL: fn(p: ?) -> number)",
      "!span": "52[4:6]-62[4:16]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "WebGLTextures": {
      "!type": "fn(gl: ?)",
      "!span": "52[4:6]-65[4:19]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "LensFlarePlugin": {
      "!type": "fn(renderer: ?, flares: [?])",
      "!span": "108[5:6]-123[5:21]",
      "!doc": "@author mikael emtinger / http://gomo.se/ @author alteredq / http://alteredqualia.com/"
    },
    "ShadowMapPlugin": {
      "!type": "fn(_renderer: ?, _lights: [?], _webglObjects: ?, _webglObjectsImmediate: [THREE.ShadowMapPlugin.!3.<i>])",
      "!span": "63[4:6]-78[4:21]",
      "!doc": "@author alteredq / http://alteredqualia.com/"
    },
    "SpritePlugin": {
      "!type": "fn(renderer: ?, sprites: [?])",
      "!span": "108[5:6]-120[5:18]",
      "!doc": "@author mikael emtinger / http://gomo.se/ @author alteredq / http://alteredqualia.com/"
    },
    "Fog": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.Fog",
          "!span": "321[16:20]-326[16:25]"
        }
      },
      "!type": "fn(color: number, near: number, far: number)",
      "!span": "102[5:6]-105[5:9]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/",
      "name": {
        "!type": "string",
        "!span": "147[7:6]-151[7:10]"
      },
      "near": {
        "!type": "number",
        "!span": "206[11:6]-210[11:10]"
      },
      "far": {
        "!type": "number",
        "!span": "254[12:6]-257[12:9]"
      }
    },
    "FogExp2": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.FogExp2",
          "!span": "293[14:24]-298[14:29]"
        }
      },
      "!type": "fn(color: number, density: number)",
      "!span": "102[5:6]-109[5:13]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/",
      "name": {
        "!type": "string",
        "!span": "149[7:6]-153[7:10]"
      },
      "density": {
        "!type": "number",
        "!span": "207[10:6]-214[10:13]"
      }
    },
    "Scene": {
      "prototype": {
        "clone": {
          "!type": "fn(object: +THREE.Scene) -> !0",
          "!span": "377[20:22]-382[20:27]"
        },
        "!proto": "THREE.Object3D.prototype",
        "constructor": "THREE.Scene"
      },
      "!type": "fn()",
      "!span": "54[4:6]-59[4:11]",
      "!doc": "@author mrdoob / http://mrdoob.com/",
      "type": {
        "!type": "string",
        "!span": "114[3:26]-118[3:30]"
      },
      "autoUpdate": {
        "!type": "bool",
        "!span": "187[13:6]-197[13:16]"
      },
      "id": {
        "!type": "number",
        "!span": "258[9:30]-262[9:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "310[11:6]-314[11:10]"
      },
      "name": {
        "!type": "string",
        "!span": "351[13:6]-355[13:10]"
      },
      "rotationAutoUpdate": {
        "!type": "bool",
        "!span": "1201[56:6]-1219[56:24]"
      },
      "matrixAutoUpdate": {
        "!type": "bool",
        "!span": "1313[35:529]-1329[35:545]"
      },
      "matrixWorldNeedsUpdate": {
        "!type": "bool",
        "!span": "1344[62:6]-1366[62:28]"
      },
      "visible": {
        "!type": "bool",
        "!span": "1383[64:6]-1390[64:13]"
      },
      "castShadow": {
        "!type": "bool",
        "!span": "1406[66:6]-1416[66:16]"
      },
      "receiveShadow": {
        "!type": "bool",
        "!span": "1432[67:6]-1445[67:19]"
      },
      "frustumCulled": {
        "!type": "bool",
        "!span": "1462[69:6]-1475[69:19]"
      },
      "renderOrder": {
        "!type": "number",
        "!span": "1490[70:6]-1501[70:17]"
      }
    },
    "CompressedTexture": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.CompressedTexture",
          "!span": "802[26:34]-807[26:39]"
        },
        "constructor": "THREE.CompressedTexture"
      },
      "!type": "fn(mipmaps: ?, width: ?, height: ?, format: ?, type: ?, mapping: ?, wrapS: ?, wrapT: ?, magFilter: ?, minFilter: ?, anisotropy: ?)",
      "!span": "63[4:6]-80[4:23]",
      "!doc": "@author alteredq / http://alteredqualia.com/",
      "minFilter": {
        "!type": "number",
        "!span": "1003[28:47]-1012[28:56]"
      },
      "format": {
        "!type": "number",
        "!span": "1050[29:29]-1056[29:35]"
      },
      "needsUpdate": {
        "!type": "bool",
        "!span": "1090[55:14]-1101[55:25]"
      },
      "flipY": {
        "!type": "bool",
        "!span": "473[15:64]-478[15:69]",
        "!doc": "no flipping for cube textures (also flipping doesn't work for compressed textures )"
      },
      "generateMipmaps": {
        "!type": "bool",
        "!span": "586[20:1]-601[20:16]",
        "!doc": "can't generate mipmaps for compressed textures mips must be embedded in DDS files"
      },
      "id": {
        "!type": "number",
        "!span": "282[8:30]-286[8:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "333[10:6]-337[10:10]"
      },
      "name": {
        "!type": "string",
        "!span": "374[12:6]-378[12:10]"
      },
      "sourceFile": {
        "!type": "string",
        "!span": "391[13:6]-401[13:16]"
      },
      "mapping": {
        "!type": "number",
        "!span": "509[18:6]-516[18:13]"
      },
      "wrapS": {
        "!type": "number",
        "!span": "591[20:6]-596[20:11]"
      },
      "wrapT": {
        "!type": "number",
        "!span": "662[21:6]-667[21:11]"
      },
      "magFilter": {
        "!type": "number",
        "!span": "734[23:6]-743[23:15]"
      },
      "anisotropy": {
        "!type": "number",
        "!span": "899[26:6]-909[26:16]"
      },
      "type": {
        "!type": "number",
        "!span": "1027[29:6]-1031[29:10]"
      },
      "premultiplyAlpha": {
        "!type": "bool",
        "!span": "1208[35:6]-1224[35:22]"
      },
      "unpackAlignment": {
        "!type": "number",
        "!span": "1260[37:6]-1275[37:21]"
      },
      "_needsUpdate": {
        "!type": "bool",
        "!span": "1391[39:6]-1403[39:18]"
      }
    },
    "CubeTexture": {
      "prototype": {
        "constructor": "THREE.CubeTexture"
      },
      "clone": {
        "!type": "fn(texture: +THREE.CubeTexture) -> !0",
        "!span": "527[17:18]-532[17:23]"
      },
      "!type": "fn(images: [?], mapping: number, wrapS: ?, wrapT: ?, magFilter: ?, minFilter: ?, format: ?, type: ?, anisotropy: ?)",
      "!span": "54[4:6]-65[4:17]",
      "!doc": "@author mrdoob / http://mrdoob.com/",
      "flipY": {
        "!type": "bool",
        "!span": "953[26:60]-958[28:2]"
      },
      "needsUpdate": {
        "!type": "bool",
        "!span": "1168[61:13]-1179[61:24]"
      },
      "id": {
        "!type": "number",
        "!span": "282[8:30]-286[8:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "333[10:6]-337[10:10]"
      },
      "name": {
        "!type": "string",
        "!span": "374[12:6]-378[12:10]"
      },
      "sourceFile": {
        "!type": "string",
        "!span": "391[13:6]-401[13:16]"
      },
      "mapping": {
        "!type": "number",
        "!span": "509[18:6]-516[18:13]"
      },
      "wrapS": {
        "!type": "number",
        "!span": "591[20:6]-596[20:11]"
      },
      "wrapT": {
        "!type": "number",
        "!span": "662[21:6]-667[21:11]"
      },
      "magFilter": {
        "!type": "number",
        "!span": "734[23:6]-743[23:15]"
      },
      "minFilter": {
        "!type": "number",
        "!span": "810[24:6]-819[24:15]"
      },
      "anisotropy": {
        "!type": "number",
        "!span": "899[26:6]-909[26:16]"
      },
      "format": {
        "!type": "number",
        "!span": "962[28:6]-968[28:12]"
      },
      "type": {
        "!type": "number",
        "!span": "1027[29:6]-1031[29:10]"
      },
      "generateMipmaps": {
        "!type": "bool",
        "!span": "1178[34:6]-1193[34:21]"
      },
      "premultiplyAlpha": {
        "!type": "bool",
        "!span": "1208[35:6]-1224[35:22]"
      },
      "unpackAlignment": {
        "!type": "number",
        "!span": "1260[37:6]-1275[37:21]"
      },
      "_needsUpdate": {
        "!type": "bool",
        "!span": "1391[39:6]-1403[39:18]"
      }
    },
    "DataTexture": {
      "prototype": {
        "clone": {
          "!type": "fn() -> +THREE.DataTexture",
          "!span": "518[15:28]-523[15:33]"
        },
        "constructor": "THREE.DataTexture"
      },
      "!type": "fn(data: ?, width: number, height: number, format: number, type: number, mapping: ?, wrapS: ?, wrapT: ?, magFilter: ?, minFilter: ?, anisotropy: ?)",
      "!span": "63[4:6]-74[4:17]",
      "!doc": "@author alteredq / http://alteredqualia.com/",
      "needsUpdate": {
        "!type": "bool",
        "!span": "5025[181:1209]-5036[181:1220]"
      },
      "wrapS": {
        "!type": "number",
        "!span": "929[26:36]-934[26:41]"
      },
      "wrapT": {
        "!type": "number",
        "!span": "1021[29:0]-1026[29:5]"
      },
      "magFilter": {
        "!type": "number",
        "!span": "1114[31:27]-1123[31:36]"
      },
      "minFilter": {
        "!type": "number",
        "!span": "1211[35:9]-1220[35:18]"
      },
      "anisotropy": {
        "!type": "number",
        "!span": "1321[37:67]-1331[37:77]"
      },
      "format": {
        "!type": "number",
        "!span": "1448[44:7]-1454[44:13]"
      },
      "type": {
        "!type": "number",
        "!span": "1531[46:0]-1535[47:3]"
      },
      "mipmaps": {
        "!type": "[?]",
        "!span": "1614[53:0]-1621[53:7]"
      },
      "id": {
        "!type": "number",
        "!span": "282[8:30]-286[8:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "333[10:6]-337[10:10]"
      },
      "name": {
        "!type": "string",
        "!span": "374[12:6]-378[12:10]"
      },
      "sourceFile": {
        "!type": "string",
        "!span": "391[13:6]-401[13:16]"
      },
      "mapping": {
        "!type": "number",
        "!span": "509[18:6]-516[18:13]"
      },
      "generateMipmaps": {
        "!type": "bool",
        "!span": "1544[47:12]-1559[47:27]"
      },
      "premultiplyAlpha": {
        "!type": "bool",
        "!span": "1208[35:6]-1224[35:22]"
      },
      "flipY": {
        "!type": "bool",
        "!span": "1588[49:27]-1593[51:2]"
      },
      "unpackAlignment": {
        "!type": "number",
        "!span": "1260[37:6]-1275[37:21]"
      },
      "_needsUpdate": {
        "!type": "bool",
        "!span": "1391[39:6]-1403[39:18]"
      }
    },
    "Texture": {
      "prototype": {
        "clone": {
          "!type": "fn(texture: +THREE.CubeTexture) -> !0",
          "!span": "1754[65:1]-1759[65:6]"
        },
        "update": {
          "!type": "fn()",
          "!span": "2484[97:1]-2490[97:7]"
        },
        "dispose": {
          "!type": "fn()",
          "!span": "2558[103:1]-2565[103:8]"
        },
        "!span": "1558[47:26]-2633[109:1]",
        "constructor": "THREE.Texture",
        "addEventListener": "THREE.BufferGeometry.prototype.addEventListener",
        "hasEventListener": "THREE.BufferGeometry.prototype.hasEventListener",
        "removeEventListener": "THREE.BufferGeometry.prototype.removeEventListener",
        "dispatchEvent": "THREE.BufferGeometry.prototype.dispatchEvent"
      },
      "DEFAULT_MAPPING": {
        "!type": "number",
        "!span": "1496[45:14]-1511[45:29]"
      },
      "!type": "fn(image: [?], mapping: number, wrapS: ?, wrapT: ?, magFilter: ?, minFilter: ?, format: ?, type: ?, anisotropy: ?)",
      "!span": "149[6:6]-156[6:13]",
      "!doc": "@author mrdoob / http://mrdoob.com/ @author alteredq / http://alteredqualia.com/ @author szimek / https://github.com/szimek/",
      "image": {
        "!type": "[?]",
        "!span": "453[19:22]-458[19:27]"
      },
      "needsUpdate": {
        "!type": "bool",
        "!span": "479[22:23]-490[22:34]"
      },
      "sourceFile": {
        "!type": "string",
        "!span": "630[28:24]-640[29:8]"
      },
      "id": {
        "!type": "number",
        "!span": "282[8:30]-286[8:34]"
      },
      "uuid": {
        "!type": "string",
        "!span": "333[17:3]-337[17:7]"
      },
      "name": {
        "!type": "string",
        "!span": "374[19:8]-378[19:12]"
      },
      "mapping": {
        "!type": "number",
        "!span": "509[18:6]-516[18:13]"
      },
      "wrapS": {
        "!type": "number",
        "!span": "591[27:19]-596[27:24]"
      },
      "wrapT": {
        "!type": "number",
        "!span": "662[30:6]-667[30:11]"
      },
      "magFilter": {
        "!type": "number",
        "!span": "734[37:12]-743[37:21]"
      },
      "minFilter": {
        "!type": "number",
        "!span": "810[43:15]-819[43:24]"
      },
      "anisotropy": {
        "!type": "number",
        "!span": "899[38:6]-909[38:16]"
      },
      "format": {
        "!type": "number",
        "!span": "962[28:6]-968[28:12]"
      },
      "type": {
        "!type": "number",
        "!span": "1027[29:6]-1031[29:10]"
      },
      "generateMipmaps": {
        "!type": "bool",
        "!span": "1178[34:6]-1193[34:21]"
      },
      "premultiplyAlpha": {
        "!type": "bool",
        "!span": "1208[35:6]-1224[35:22]"
      },
      "flipY": {
        "!type": "bool",
        "!span": "1240[36:6]-1245[36:11]"
      },
      "unpackAlignment": {
        "!type": "number",
        "!span": "1260[37:6]-1275[37:21]"
      },
      "_needsUpdate": {
        "!type": "bool",
        "!span": "1391[39:6]-1403[39:18]"
      }
    },
    "TextureIdCount": {
      "!type": "number",
      "!span": "2709[113:6]-2723[113:20]"
    },
    "VideoTexture": {
      "prototype": {
        "!proto": "THREE.Texture.prototype",
        "!span": "518[28:19]-527[28:28]",
        "constructor": "THREE.VideoTexture"
      },
      "!type": "fn(video: ?, mapping: ?, wrapS: ?, wrapT: ?, magFilter: ?, minFilter: ?, format: ?, type: ?, anisotropy: ?)",
      "!span": "54[4:6]-66[4:18]",
      "!doc": "@author mrdoob / http://mrdoob.com/"
    },
    "!span": "52[4:4]-57[4:9]",
    "!doc": "@author mrdoob / http://mrdoob.com/",
    "DataTextureLoader": "THREE.BinaryTextureLoader",
    "Particle": "THREE.Sprite"
  }
}
